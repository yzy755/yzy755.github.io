<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>易泽源的博客</title>
  <subtitle>一天进步一点 程序员由入门到放弃</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yzy755.github.io/"/>
  <updated>2020-11-04T10:34:45.120Z</updated>
  <id>http://yzy755.github.io/</id>
  
  <author>
    <name>易泽源</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring-cloud-alibaba操作手册之分布式事务</title>
    <link href="http://yzy755.github.io/2020/03/07/spring-cloud-alibaba%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <id>http://yzy755.github.io/2020/03/07/spring-cloud-alibaba操作手册之分布式事务/</id>
    <published>2020-03-07T08:55:54.000Z</published>
    <updated>2020-11-04T10:34:45.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><h2 id="模拟分布式事务异常"><a href="#模拟分布式事务异常" class="headerlink" title="模拟分布式事务异常"></a>模拟分布式事务异常</h2><p>1、创建两个工程 order、pay，pom.xml</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、建两个数据库 order、pay，两个微服务分别访问。</p>
<p>3、分别写两个服务的 application.yml</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8010</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> order</div><div class="line"><span class="attr">  datasource:</span></div><div class="line"><span class="attr">    driver-class-name:</span> com.mysql.cj.jdbc.Driver</div><div class="line"><span class="attr">    username:</span> root</div><div class="line"><span class="attr">    password:</span> <span class="number">123456</span></div><div class="line"><span class="attr">    url:</span> jdbc:mysql://localhost:<span class="number">3306</span>/order</div></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8020</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> pay</div><div class="line"><span class="attr">  datasource:</span></div><div class="line"><span class="attr">    driver-class-name:</span> com.mysql.cj.jdbc.Driver</div><div class="line"><span class="attr">    username:</span> root</div><div class="line"><span class="attr">    password:</span> <span class="number">123456</span></div><div class="line"><span class="attr">    url:</span> jdbc:mysql://localhost:<span class="number">3306</span>/pay</div></pre></td></tr></table></figure>
<p>4、分别写两个 Service</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate.update(<span class="string">"insert into orders(username) values ('张三')"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayService</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate.update(<span class="string">"insert into pay(username) values ('张三')"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5、控制器 Order 通过 RestTemplate 调用 Pay 的服务</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.southwind.service.OrderService;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</div><div class="line"></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> OrderService orderService;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/save"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//订单</span></div><div class="line">        <span class="keyword">this</span>.orderService.save();</div><div class="line">        <span class="keyword">int</span> i = <span class="number">10</span>/<span class="number">0</span>;</div><div class="line">        <span class="comment">//支付</span></div><div class="line">        <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://localhost:8020/save"</span>,String.class);</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.southwind.service.PayService;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> PayService payService;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/save"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.payService.save();</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>6、启动类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(OrderApplication.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(PayApplication.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分布式异常模拟结束，Order 存储完成之后，出现异常，会导致 Pay 无法存储，但是 Order 数据库不会进行回滚。</p>
<h2 id="Seata-解决"><a href="#Seata-解决" class="headerlink" title="Seata 解决"></a>Seata 解决</h2><p>1、下载</p>
<p>2、解压，修改两个文件</p>
<p><img src="/2020/03/07/spring-cloud-alibaba操作手册之分布式事务/1604485504222.png" alt="1604485504222"></p>
<p>regisry.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">registry &#123;</div><div class="line">  type = &quot;nacos&quot;</div><div class="line">  nacos &#123;</div><div class="line">    serverAddr = &quot;localhost&quot;</div><div class="line">    namespace = &quot;public&quot;</div><div class="line">    cluster = &quot;default&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">config &#123;</div><div class="line">  type = &quot;nacos&quot;</div><div class="line">  nacos &#123;</div><div class="line">    serverAddr = &quot;localhost&quot;</div><div class="line">    namespace = &quot;public&quot;</div><div class="line">    cluster = &quot;default&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>nacos-config.txt</p>
<p><img src="/2020/03/07/spring-cloud-alibaba操作手册之分布式事务/1604485606940.png" alt="1604485606940"></p>
<p>3、启动 Nacos，运行 nacos-config.sh 将 Seata 配置导入 Nacos</p>
<p>进入 conf，右键 Git Bash Here</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd conf</div><div class="line">sh nacos-config.sh 127.0.0.1</div></pre></td></tr></table></figure>
<p>执行成功，刷新 Nacos，配置加入</p>
<p><img src="/2020/03/07/spring-cloud-alibaba操作手册之分布式事务/1604485648382.png" alt="1604485648382"></p>
<p>nacos-config.txt 配置已生效</p>
<p><img src="/2020/03/07/spring-cloud-alibaba操作手册之分布式事务/1604485674195.png" alt="1604485674195"></p>
<p>4、启动 Seata Server，  <strong>JDK 8 以上环境无法启动</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd bin</div><div class="line">seata-server.bat -p 8090 -m file</div></pre></td></tr></table></figure>
<p><img src="/2020/03/07/spring-cloud-alibaba操作手册之分布式事务/1604485704673.png" alt="1604485704673"></p>
<p>启动成功，Nacos 注册成功。</p>
<p><img src="/2020/03/07/spring-cloud-alibaba操作手册之分布式事务/1604485730409.png" alt="1604485730409"></p>
<p>Seata 服务环境搭建完毕，接下来去应用中添加。</p>
<p>1、初始化数据库，在两个数据库中添加事务日志记录表，SQL Seata 已经提供。</p>
<p><img src="/2020/03/07/spring-cloud-alibaba操作手册之分布式事务/1604485763591.png" alt="1604485763591"></p>
<p>2、直接在两个数据库运行脚本。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`undo_log`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`branch_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`xid`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`context`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`rollback_info`</span> longblob <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`log_status`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`log_created`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`log_modified`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`ext`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</div><div class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`ux_undo_log`</span> (<span class="string">`xid`</span>,<span class="string">`branch_id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>
<p>3、两个工程的 pom.xml 添加 Seata 组件和 Nacos Config 组件。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>4、给 JDBCTemplate 添加代理数据源</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.seata.rm.datasource.DataSourceProxy;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(OrderApplication.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">(DataSource dataSource)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(<span class="keyword">new</span> DataSourceProxy(dataSource));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.seata.rm.datasource.DataSourceProxy;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(PayApplication.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">(DataSource dataSource)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(<span class="keyword">new</span> DataSourceProxy(dataSource));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5、将 registry.conf 复制到两个工程的 resources 下。</p>
<p>6、给两个工程添加 bootstrap.yml 读取 Nacos 配置。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> order</div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    nacos:</span></div><div class="line"><span class="attr">      config:</span></div><div class="line"><span class="attr">        server-addr:</span> localhost:<span class="number">8848</span></div><div class="line"><span class="attr">        namespace:</span> public</div><div class="line"><span class="attr">        group:</span> SEATA_GROUP</div><div class="line"><span class="attr">    alibaba:</span></div><div class="line"><span class="attr">      seata:</span></div><div class="line"><span class="attr">        tx-service-group:</span> $&#123;spring.application.name&#125;</div></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> pay</div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    nacos:</span></div><div class="line"><span class="attr">      config:</span></div><div class="line"><span class="attr">        server-addr:</span> localhost:<span class="number">8848</span></div><div class="line"><span class="attr">        namespace:</span> public</div><div class="line"><span class="attr">        group:</span> SEATA_GROUP</div><div class="line"><span class="attr">    alibaba:</span></div><div class="line"><span class="attr">      seata:</span></div><div class="line"><span class="attr">        tx-service-group:</span> $&#123;spring.application.name&#125;</div></pre></td></tr></table></figure>
<p>tx-service-group 需要和 Nacos 配置中的名称一致。</p>
<p><img src="/2020/03/07/spring-cloud-alibaba操作手册之分布式事务/1604485804153.png" alt="1604485804153"></p>
<p>7、在 Order 调用 Pay 处添加注解 @GlobalTransactional</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.southwind.service.OrderService;</div><div class="line"><span class="keyword">import</span> io.seata.spring.annotation.GlobalTransactional;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</div><div class="line"></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> OrderService orderService;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/save"</span>)</div><div class="line">    <span class="meta">@GlobalTransactional</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//订单</span></div><div class="line">        <span class="keyword">this</span>.orderService.save();</div><div class="line">        <span class="keyword">int</span> i = <span class="number">10</span>/<span class="number">0</span>;</div><div class="line">        <span class="comment">//支付</span></div><div class="line">        <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://localhost:8020/save"</span>,String.class);</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分布式事务&quot;&gt;&lt;a href=&quot;#分布式事务&quot; class=&quot;headerlink&quot; title=&quot;分布式事务&quot;&gt;&lt;/a&gt;分布式事务&lt;/h2&gt;&lt;h2 id=&quot;模拟分布式事务异常&quot;&gt;&lt;a href=&quot;#模拟分布式事务异常&quot; class=&quot;headerlink&quot; title=&quot;模拟分布式事务异常&quot;&gt;&lt;/a&gt;模拟分布式事务异常&lt;/h2&gt;&lt;p&gt;1、创建两个工程 order、pay，pom.xml&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="spring-cloud" scheme="http://yzy755.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud-alibaba操作手册之服务网关</title>
    <link href="http://yzy755.github.io/2020/03/06/spring-cloud-alibaba%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C%E4%B9%8B%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/"/>
    <id>http://yzy755.github.io/2020/03/06/spring-cloud-alibaba操作手册之服务网关/</id>
    <published>2020-03-06T03:17:22.000Z</published>
    <updated>2020-11-03T10:28:09.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h2><p>Spring Cloud Gateway 是基于 Netty，跟 Servlet 不兼容，所以你的工程中不能出现 Servlet 的组件 。</p>
<a id="more"></a>
<p>1、pom.xml</p>
<p>注意，一定不能出现 spring web 的依赖，因为 Gateway 与 Servlet 不兼容。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、application.yml</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8010</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> gateway</div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      discovery:</span></div><div class="line"><span class="attr">        locator:</span></div><div class="line"><span class="attr">          enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      routes:</span> </div><div class="line"><span class="attr">        - id:</span> provider_route   </div><div class="line"><span class="attr">          uri:</span> http://localhost:<span class="number">8081</span> </div><div class="line"><span class="attr">          predicates:</span> </div><div class="line"><span class="bullet">            -</span> Path=/provider/** </div><div class="line"><span class="attr">          filters:</span></div><div class="line"><span class="bullet">            -</span> StripPrefix=<span class="number">1</span></div></pre></td></tr></table></figure>
<p>上面这种做法其实没有用到 nacos ，现在我们让 gateway 直接去 nacos 中发现服务，配置更加简单了。</p>
<p>1、pom.xml 引入 nacos</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、application.yml</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8010</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> gateway</div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">      gateway:</span></div><div class="line"><span class="attr">        discovery:</span></div><div class="line"><span class="attr">          locator:</span></div><div class="line"><span class="attr">            enabled:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<h2 id="Gateway-限流"><a href="#Gateway-限流" class="headerlink" title="Gateway 限流"></a>Gateway 限流</h2><p>基于路由限流</p>
<p>1、pom.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-spring-cloud-gateway-adapter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、配置类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayFlowRule;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayRuleManager;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.SentinelGatewayFilter;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.callback.BlockRequestHandler;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.callback.GatewayCallbackManager;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.exception.SentinelGatewayBlockExceptionHandler;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.ObjectProvider;</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</div><div class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.http.codec.ServerCodecConfigurer;</div><div class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.BodyInserters;</div><div class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.ServerResponse;</div><div class="line"><span class="keyword">import</span> org.springframework.web.reactive.result.view.ViewResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</div><div class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayConfiguration</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ViewResolver&gt; viewResolvers;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerCodecConfigurer serverCodecConfigurer;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GatewayConfiguration</span><span class="params">(ObjectProvider&lt;List&lt;ViewResolver&gt;&gt; viewResolversProvider,</span></span></div><div class="line">                                ServerCodecConfigurer serverCodecConfigurer) &#123;</div><div class="line">        <span class="keyword">this</span>.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList);</div><div class="line">        <span class="keyword">this</span>.serverCodecConfigurer = serverCodecConfigurer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//配置限流的异常处理</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</div><div class="line">    <span class="function"><span class="keyword">public</span> SentinelGatewayBlockExceptionHandler <span class="title">sentinelGatewayBlockExceptionHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SentinelGatewayBlockExceptionHandler(viewResolvers, serverCodecConfigurer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//配置初始化的限流参数</span></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initGatewayRules</span><span class="params">()</span></span>&#123;</div><div class="line">        Set&lt;GatewayFlowRule&gt; rules = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">        rules.add(</div><div class="line">                <span class="keyword">new</span> GatewayFlowRule(<span class="string">"provider_route"</span>)</div><div class="line">                .setCount(<span class="number">1</span>)</div><div class="line">                .setIntervalSec(<span class="number">1</span>)</div><div class="line">        );</div><div class="line">        GatewayRuleManager.loadRules(rules);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//初始化限流过滤器</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</div><div class="line">    <span class="function"><span class="keyword">public</span> GlobalFilter <span class="title">sentinelGatewayFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SentinelGatewayFilter();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//自定义限流异常页面</span></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBlockHandlers</span><span class="params">()</span></span>&#123;</div><div class="line">        BlockRequestHandler blockRequestHandler = <span class="keyword">new</span> BlockRequestHandler() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">handleRequest</span><span class="params">(ServerWebExchange serverWebExchange, Throwable throwable)</span> </span>&#123;</div><div class="line">                Map map = <span class="keyword">new</span> HashMap();</div><div class="line">                map.put(<span class="string">"code"</span>,<span class="number">0</span>);</div><div class="line">                map.put(<span class="string">"msg"</span>,<span class="string">"被限流了"</span>);</div><div class="line">                <span class="keyword">return</span> ServerResponse.status(HttpStatus.OK)</div><div class="line">                        .contentType(MediaType.APPLICATION_JSON)</div><div class="line">                        .body(BodyInserters.fromObject(map));</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        GatewayCallbackManager.setBlockHandler(blockRequestHandler);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、application.yml</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8010</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> gateway</div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      discovery:</span></div><div class="line"><span class="attr">        locator:</span></div><div class="line"><span class="attr">          enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line"><span class="attr">        - id:</span> provider_route</div><div class="line"><span class="attr">          uri:</span> http://localhost:<span class="number">8081</span></div><div class="line"><span class="attr">          predicates:</span></div><div class="line"><span class="bullet">            -</span> Path=/provider/**</div><div class="line"><span class="attr">          filters:</span></div><div class="line"><span class="bullet">            -</span> StripPrefix=<span class="number">1</span></div></pre></td></tr></table></figure>
<p>基于 API 分组限流</p>
<p>1、修改配置类，添加基于 API 分组限流的方法，修改初始化的限流参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.SentinelGatewayConstants;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.api.ApiDefinition;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.api.ApiPathPredicateItem;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.api.ApiPredicateItem;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.api.GatewayApiDefinitionManager;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayFlowRule;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayRuleManager;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.SentinelGatewayFilter;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.callback.BlockRequestHandler;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.callback.GatewayCallbackManager;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.exception.SentinelGatewayBlockExceptionHandler;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.ObjectProvider;</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</div><div class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.http.codec.ServerCodecConfigurer;</div><div class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.BodyInserters;</div><div class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.ServerResponse;</div><div class="line"><span class="keyword">import</span> org.springframework.web.reactive.result.view.ViewResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</div><div class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayConfiguration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ViewResolver&gt; viewResolvers;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerCodecConfigurer serverCodecConfigurer;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GatewayConfiguration</span><span class="params">(ObjectProvider&lt;List&lt;ViewResolver&gt;&gt; viewResolversProvider,</span></span></div><div class="line">                                ServerCodecConfigurer serverCodecConfigurer) &#123;</div><div class="line">        <span class="keyword">this</span>.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList);</div><div class="line">        <span class="keyword">this</span>.serverCodecConfigurer = serverCodecConfigurer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//配置限流的异常处理</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</div><div class="line">    <span class="function"><span class="keyword">public</span> SentinelGatewayBlockExceptionHandler <span class="title">sentinelGatewayBlockExceptionHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SentinelGatewayBlockExceptionHandler(viewResolvers, serverCodecConfigurer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//配置初始化的限流参数</span></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initGatewayRules</span><span class="params">()</span></span>&#123;</div><div class="line">        Set&lt;GatewayFlowRule&gt; rules = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">        rules.add(<span class="keyword">new</span> GatewayFlowRule(<span class="string">"provider_api1"</span>).setCount(<span class="number">1</span>).setIntervalSec(<span class="number">1</span>));</div><div class="line">        rules.add(<span class="keyword">new</span> GatewayFlowRule(<span class="string">"provider_api2"</span>).setCount(<span class="number">1</span>).setIntervalSec(<span class="number">1</span>));</div><div class="line">        GatewayRuleManager.loadRules(rules);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//初始化限流过滤器</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</div><div class="line">    <span class="function"><span class="keyword">public</span> GlobalFilter <span class="title">sentinelGatewayFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SentinelGatewayFilter();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//自定义限流异常页面</span></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBlockHandlers</span><span class="params">()</span></span>&#123;</div><div class="line">        BlockRequestHandler blockRequestHandler = <span class="keyword">new</span> BlockRequestHandler() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">handleRequest</span><span class="params">(ServerWebExchange serverWebExchange, Throwable throwable)</span> </span>&#123;</div><div class="line">                Map map = <span class="keyword">new</span> HashMap();</div><div class="line">                map.put(<span class="string">"code"</span>,<span class="number">0</span>);</div><div class="line">                map.put(<span class="string">"msg"</span>,<span class="string">"被限流了"</span>);</div><div class="line">                <span class="keyword">return</span> ServerResponse.status(HttpStatus.OK)</div><div class="line">                        .contentType(MediaType.APPLICATION_JSON)</div><div class="line">                        .body(BodyInserters.fromObject(map));</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        GatewayCallbackManager.setBlockHandler(blockRequestHandler);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//自定义API分组</span></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initCustomizedApis</span><span class="params">()</span></span>&#123;</div><div class="line">        Set&lt;ApiDefinition&gt; definitions = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">        ApiDefinition api1 = <span class="keyword">new</span> ApiDefinition(<span class="string">"provider_api1"</span>)</div><div class="line">                .setPredicateItems(<span class="keyword">new</span> HashSet&lt;ApiPredicateItem&gt;()&#123;&#123;</div><div class="line">                    add(<span class="keyword">new</span> ApiPathPredicateItem().setPattern(<span class="string">"/provider/api1/**"</span>)</div><div class="line">                            .setMatchStrategy(SentinelGatewayConstants.URL_MATCH_STRATEGY_PREFIX));</div><div class="line">                &#125;&#125;);</div><div class="line">        ApiDefinition api2 = <span class="keyword">new</span> ApiDefinition(<span class="string">"provider_api2"</span>)</div><div class="line">                .setPredicateItems(<span class="keyword">new</span> HashSet&lt;ApiPredicateItem&gt;()&#123;&#123;</div><div class="line">                    add(<span class="keyword">new</span> ApiPathPredicateItem().setPattern(<span class="string">"/provider/api2/demo1"</span>));</div><div class="line">                &#125;&#125;);</div><div class="line">        definitions.add(api1);</div><div class="line">        definitions.add(api2);</div><div class="line">        GatewayApiDefinitionManager.loadApiDefinitions(definitions);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、Controller 添加方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/api1/demo1"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"demo"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/api1/demo2"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"demo"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/api2/demo1"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo3</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"demo"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/api2/demo2"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo4</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"demo"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以基于 Nacos 服务发现组件进行限流</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8010</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> gateway</div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      discovery:</span></div><div class="line"><span class="attr">        locator:</span></div><div class="line"><span class="attr">          enabled:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>API 分组代码修改，改为 discovery 中的服务名。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ApiDefinition api2 = <span class="keyword">new</span> ApiDefinition(<span class="string">"provider_api2"</span>)</div><div class="line">        .setPredicateItems(<span class="keyword">new</span> HashSet&lt;ApiPredicateItem&gt;()&#123;&#123;</div><div class="line">            add(<span class="keyword">new</span> ApiPathPredicateItem().setPattern(<span class="string">"/p1/api2/demo1"</span>));</div><div class="line">        &#125;&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;服务网关&quot;&gt;&lt;a href=&quot;#服务网关&quot; class=&quot;headerlink&quot; title=&quot;服务网关&quot;&gt;&lt;/a&gt;服务网关&lt;/h2&gt;&lt;p&gt;Spring Cloud Gateway 是基于 Netty，跟 Servlet 不兼容，所以你的工程中不能出现 Servlet 的组件 。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="spring-cloud" scheme="http://yzy755.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud-alibaba操作手册之整合 RocketMQ</title>
    <link href="http://yzy755.github.io/2020/03/05/spring-cloud-alibaba%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C%E4%B9%8B%E6%95%B4%E5%90%88%20RocketMQ/"/>
    <id>http://yzy755.github.io/2020/03/05/spring-cloud-alibaba操作手册之整合 RocketMQ/</id>
    <published>2020-03-05T09:23:40.000Z</published>
    <updated>2020-11-04T10:41:37.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整合-RocketMQ"><a href="#整合-RocketMQ" class="headerlink" title="整合 RocketMQ"></a>整合 RocketMQ</h2><h3 id="安装-RocketMQ"><a href="#安装-RocketMQ" class="headerlink" title="安装 RocketMQ"></a>安装 RocketMQ</h3><p>1、传入 Linux 服务器</p>
<p>2、解压缩</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unzip rocketmq-all-4.7.1-bin-release.zip</div></pre></td></tr></table></figure>
<p>3、启动 NameServer</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup ./bin/mqnamesrv &amp;</div></pre></td></tr></table></figure>
<p>4、检查是否启动成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -an | grep 9876</div></pre></td></tr></table></figure>
<p><img src="/2020/03/05/spring-cloud-alibaba操作手册之整合 RocketMQ/1604486306694.png" alt="1604486306694"></p>
<p>5、启动 Broker</p>
<p>启动之前需要编辑配置文件，修改 JVM 内存设置，默认给的内存 4 GB，超过我们的 JVM 了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd bin</div><div class="line">vim runserver.sh</div></pre></td></tr></table></figure>
<p><img src="/2020/03/05/spring-cloud-alibaba操作手册之整合 RocketMQ/1604486343246.png" alt="1604486343246"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim runbroker.sh</div></pre></td></tr></table></figure>
<p><img src="/2020/03/05/spring-cloud-alibaba操作手册之整合 RocketMQ/1604486364259.png" alt="1604486364259"></p>
<p>启动 Broker</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup ./mqbroker -n localhost:9876 &amp;</div></pre></td></tr></table></figure>
<p>可以查看日志</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail -f ~/logs/rocketmqlogs/broker.log</div></pre></td></tr></table></figure>
<p><img src="/2020/03/05/spring-cloud-alibaba操作手册之整合 RocketMQ/1604486386015.png" alt="1604486386015"></p>
<p>启动成功</p>
<p>6、测试 RocketMQ</p>
<p>消息发送</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd bin</div><div class="line">export NAMESRV_ADDR=localhost:9876</div><div class="line">./tools.sh org.apache.rocketmq.example.quickstart.Producer</div></pre></td></tr></table></figure>
<p>消息接收</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd bin</div><div class="line">export NAMESRV_ADDR=localhost:9876</div><div class="line">./tools.sh org.apache.rocketmq.example.quickstart.Consumer</div></pre></td></tr></table></figure>
<p>7、关闭 RocketMQ</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd bin</div><div class="line">./mqshutdown broker</div><div class="line">./mqshutdown namesrv</div></pre></td></tr></table></figure>
<h3 id="安装-RocketMQ-控制台"><a href="#安装-RocketMQ-控制台" class="headerlink" title="安装 RocketMQ 控制台"></a>安装 RocketMQ 控制台</h3><p>1、解压缩，修改配置，打包</p>
<p><img src="/2020/03/05/spring-cloud-alibaba操作手册之整合 RocketMQ/1604486413542.png" alt="1604486413542"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn clean package -Dmaven.test.skip=true</div></pre></td></tr></table></figure>
<p><img src="/2020/03/05/spring-cloud-alibaba操作手册之整合 RocketMQ/1604486431359.png" alt="1604486431359"></p>
<p>2、进入 target 启动 jar</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar rocketmq-console-ng-1.0.0.jar</div></pre></td></tr></table></figure>
<p><img src="/2020/03/05/spring-cloud-alibaba操作手册之整合 RocketMQ/1604486448601.png" alt="1604486448601"></p>
<p>打开浏览器访问 localhost:9877，如果报错</p>
<p><img src="/2020/03/05/spring-cloud-alibaba操作手册之整合 RocketMQ/1604486464540.png" alt="1604486464540"></p>
<p>这是因为我们的 RocketMQ 安装在 Linux 中，控制台在 windows，Linux 需要开放端口才能访问，开放 10909 和 9876 端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --zone=public --add-port=10909/tcp --permanent</div><div class="line">firewall-cmd --zone=public --add-port=9876/tcp --permanent</div><div class="line">systemctl restart firewalld.service</div><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure>
<p>重新启动控制台项目</p>
<p><img src="/2020/03/05/spring-cloud-alibaba操作手册之整合 RocketMQ/1604486483836.png" alt="1604486483836"></p>
<h3 id="Java-实现消息发送"><a href="#Java-实现消息发送" class="headerlink" title="Java 实现消息发送"></a>Java 实现消息发送</h3><p>1、pom.xml 中引入依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、生产消息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</div><div class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendResult;</div><div class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">//创建消息生产者</span></div><div class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">"myproducer-group"</span>);</div><div class="line">        <span class="comment">//设置NameServer</span></div><div class="line">        producer.setNamesrvAddr(<span class="string">"192.168.248.129:9876"</span>);</div><div class="line">        <span class="comment">//启动生产者</span></div><div class="line">        producer.start();</div><div class="line">        <span class="comment">//构建消息对象</span></div><div class="line">        Message message = <span class="keyword">new</span> Message(<span class="string">"myTopic"</span>,<span class="string">"myTag"</span>,(<span class="string">"Test MQ"</span>).getBytes());</div><div class="line">        <span class="comment">//发送消息</span></div><div class="line">        SendResult result = producer.send(message, <span class="number">1000</span>);</div><div class="line">        System.out.println(result);</div><div class="line">        <span class="comment">//关闭生产者</span></div><div class="line">        producer.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、直接运行，如果报错 sendDefaultImpl call timeout，可以开放 10911 端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --zone=public --add-port=10911/tcp --permanent</div><div class="line">systemctl restart firewalld.service</div><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure>
<p>打开 RocketMQ 控制台，可查看消息。</p>
<h3 id="Java-实现消息消费"><a href="#Java-实现消息消费" class="headerlink" title="Java 实现消息消费"></a>Java 实现消息消费</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</div><div class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</div><div class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</div><div class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</div><div class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</div><div class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</div><div class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageExt;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="meta">@Slf</span>4j</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException </span>&#123;</div><div class="line">        <span class="comment">//创建消息消费者</span></div><div class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"myconsumer-group"</span>);</div><div class="line">        <span class="comment">//设置NameServer</span></div><div class="line">        consumer.setNamesrvAddr(<span class="string">"192.168.248.129:9876"</span>);</div><div class="line">        <span class="comment">//指定订阅的主题和标签</span></div><div class="line">        consumer.subscribe(<span class="string">"myTopic"</span>,<span class="string">"*"</span>);</div><div class="line">        <span class="comment">//回调函数</span></div><div class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> </span>&#123;</div><div class="line">                log.info(<span class="string">"Message=&gt;&#123;&#125;"</span>,list);</div><div class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//启动消费者</span></div><div class="line">        consumer.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Spring-Boot-整合-RocketMQ"><a href="#Spring-Boot-整合-RocketMQ" class="headerlink" title="Spring Boot 整合 RocketMQ"></a>Spring Boot 整合 RocketMQ</h3><blockquote>
<p>provider</p>
</blockquote>
<p>1、pom.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、application.yml</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">rocketmq:</span></div><div class="line"><span class="attr">  name-server:</span> <span class="number">192.168</span><span class="number">.248</span><span class="number">.129</span>:<span class="number">9876</span></div><div class="line"><span class="attr">  producer:</span></div><div class="line"><span class="attr">    group:</span> myprovider</div></pre></td></tr></table></figure>
<p>3、Order</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.entity;</div><div class="line"></div><div class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</div><div class="line"><span class="keyword">import</span> lombok.Data;</div><div class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="meta">@AllArgsConstructor</span></div><div class="line"><span class="meta">@NoArgsConstructor</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line">    <span class="keyword">private</span> String buyerName;</div><div class="line">    <span class="keyword">private</span> String buyerTel;</div><div class="line">    <span class="keyword">private</span> String address;</div><div class="line">    <span class="keyword">private</span> Date createDate;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4、Controller</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> RocketMQTemplate rocketMQTemplate;</div><div class="line"></div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/create"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Order <span class="title">create</span><span class="params">()</span></span>&#123;</div><div class="line">    Order order = <span class="keyword">new</span> Order(</div><div class="line">        <span class="number">1</span>,</div><div class="line">        <span class="string">"张三"</span>,</div><div class="line">        <span class="string">"123123"</span>,</div><div class="line">        <span class="string">"软件园"</span>,</div><div class="line">        <span class="keyword">new</span> Date()</div><div class="line">    );</div><div class="line">    <span class="keyword">this</span>.rocketMQTemplate.convertAndSend(<span class="string">"myTopic"</span>,order);</div><div class="line">    <span class="keyword">return</span> order;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>consumer</p>
</blockquote>
<p>1、pom.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、application.yml</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">rocketmq:</span></div><div class="line"><span class="attr">  name-server:</span> <span class="number">192.168</span><span class="number">.248</span><span class="number">.129</span>:<span class="number">9876</span></div></pre></td></tr></table></figure>
<p>3、Service</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Slf</span>4j</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="meta">@RocketMQMessageListener</span>(consumerGroup = <span class="string">"myConsumer"</span>,topic = <span class="string">"myTopic"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsService</span> <span class="keyword">implements</span> <span class="title">RocketMQListener</span>&lt;<span class="title">Order</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Order order)</span> </span>&#123;</div><div class="line">        log.info(<span class="string">"新订单&#123;&#125;,发短信"</span>,order);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;整合-RocketMQ&quot;&gt;&lt;a href=&quot;#整合-RocketMQ&quot; class=&quot;headerlink&quot; title=&quot;整合 RocketMQ&quot;&gt;&lt;/a&gt;整合 RocketMQ&lt;/h2&gt;&lt;h3 id=&quot;安装-RocketMQ&quot;&gt;&lt;a href=&quot;#安装-RocketMQ&quot; class=&quot;headerlink&quot; title=&quot;安装 RocketMQ&quot;&gt;&lt;/a&gt;安装 RocketMQ&lt;/h3&gt;&lt;p&gt;1、传入 Linux 服务器&lt;/p&gt;
&lt;p&gt;2、解压缩&lt;/p&gt;
    
    </summary>
    
      <category term="工作实践 学习笔记" scheme="http://yzy755.github.io/categories/%E5%B7%A5%E4%BD%9C%E5%AE%9E%E8%B7%B5-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="spring-cloud" scheme="http://yzy755.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud-alibaba操作手册之Sentinel 服务限流降级</title>
    <link href="http://yzy755.github.io/2020/03/04/spring-cloud-alibaba%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C%E4%B9%8BSentinel%20%E6%9C%8D%E5%8A%A1%E9%99%90%E6%B5%81%E9%99%8D%E7%BA%A7/"/>
    <id>http://yzy755.github.io/2020/03/04/spring-cloud-alibaba操作手册之Sentinel 服务限流降级/</id>
    <published>2020-03-04T07:20:21.000Z</published>
    <updated>2020-11-03T10:27:26.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sentinel-服务限流降级"><a href="#Sentinel-服务限流降级" class="headerlink" title="Sentinel 服务限流降级"></a>Sentinel 服务限流降级</h2><p>雪崩效应：有A服务的不可用导致的B、C…服务不可用的现象</p>
<p>解决方案</p>
<p>1、设置线程超时</p>
<p>2、设置限流</p>
<p>3、熔断器 Sentinel、Hystrix</p>
<a id="more"></a>
<p>1、pom.xml 引入依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、application 配置</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">management:</span></div><div class="line"><span class="attr">  endpoints:</span></div><div class="line"><span class="attr">    web:</span></div><div class="line"><span class="attr">      exposure:</span></div><div class="line"><span class="attr">        include:</span> <span class="string">'*'</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    sentinel:</span></div><div class="line"><span class="attr">      transport:</span></div><div class="line"><span class="attr">        dashboard:</span> localhost:<span class="number">8080</span></div></pre></td></tr></table></figure>
<p>3、下载 Sentinel 控制台，解压，启动。</p>
<h2 id="流控规则"><a href="#流控规则" class="headerlink" title="流控规则"></a>流控规则</h2><blockquote>
<p>直接限流</p>
<p>关联限流</p>
<p>链路限流</p>
</blockquote>
<p>1、pom.xml 添加依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-web-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、application.yml</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line">	cloud:</div><div class="line"><span class="attr">        sentinel:</span></div><div class="line"><span class="attr">          filter:</span></div><div class="line"><span class="attr">            enabled:</span> <span class="literal">false</span></div></pre></td></tr></table></figure>
<p>3、写配置类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.servlet.CommonFilter;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterConfiguration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">registrationBean</span><span class="params">()</span></span>&#123;</div><div class="line">        FilterRegistrationBean registrationBean = <span class="keyword">new</span> FilterRegistrationBean();</div><div class="line">        registrationBean.setFilter(<span class="keyword">new</span> CommonFilter());</div><div class="line">        registrationBean.addUrlPatterns(<span class="string">"/*"</span>);</div><div class="line">        registrationBean.addInitParameter(CommonFilter.WEB_CONTEXT_UNIFY,<span class="string">"false"</span>);</div><div class="line">        registrationBean.setName(<span class="string">"sentinelFilter"</span>);</div><div class="line">        <span class="keyword">return</span> registrationBean;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4、Service</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@SentinelResource</span>(<span class="string">"test"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"test"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5、Controller</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test1"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.helloService.test();</div><div class="line">    <span class="keyword">return</span> <span class="string">"test1"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test2"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.helloService.test();</div><div class="line">    <span class="keyword">return</span> <span class="string">"test2"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h2><blockquote>
<p>快速失败</p>
</blockquote>
<p>直接抛出异常</p>
<blockquote>
<p>Warm UP</p>
</blockquote>
<p>给系统一个预热的时间，预热时间段内单机阈值较低，预热时间过后单机阈值增加，预热时间内当前的单机阈值是设置的阈值的三分之一，预热时间过后单机阈值恢复设置的值。</p>
<blockquote>
<p>排队等待</p>
</blockquote>
<p>当请求调用失败之后，不会立即抛出异常，等待下一次调用，时间范围是超时时间，在时间范围内如果能请求成功则不抛出异常，如果请求则抛出异常。</p>
<h2 id="降级规则"><a href="#降级规则" class="headerlink" title="降级规则"></a>降级规则</h2><blockquote>
<p>RT</p>
</blockquote>
<p>单个请求的响应时间超过阈值，则进入准降级状态，接下来 1 S 内连续 5 个请求响应时间均超过阈值，就进行降级，持续时间为时间窗口的值。</p>
<blockquote>
<p>异常比例</p>
</blockquote>
<p>每秒异常数量占通过量的比例大于阈值，就进行降级处理，持续时间为时间窗口的值。</p>
<blockquote>
<p>异常数</p>
</blockquote>
<p>1 分钟内的异常数超过阈值就进行降级处理，时间窗口的值要大于 60S，否则刚结束熔断又进入下一次熔断了。</p>
<h2 id="热点规则"><a href="#热点规则" class="headerlink" title="热点规则"></a>热点规则</h2><p>热点规则是流控规则的更细粒度操作，可以具体到对某个热点参数的限流，设置限流之后，如果带着限流参数的请求量超过阈值，则进行限流，时间为统计窗口时长。</p>
<p>必须要添加 @SentinelResource，即对资源进行流控。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/hot"</span>)</div><div class="line"><span class="meta">@SentinelResource</span>(<span class="string">"hot"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hot</span><span class="params">(</span></span></div><div class="line">        @RequestParam(value = <span class="string">"num1"</span>,required = <span class="keyword">false</span>) Integer num1,</div><div class="line">        @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"num2"</span>,required = <span class="keyword">false</span>)</span> Integer num2)&#123;</div><div class="line">    <span class="keyword">return</span> num1+<span class="string">"-"</span>+num2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="授权规则"><a href="#授权规则" class="headerlink" title="授权规则"></a>授权规则</h2><p>给指定的资源设置流控应用（追加参数），可以对流控应用进行访问权限的设置，具体就是添加白名单和黑名单。</p>
<p>如何给请求指定流控应用，通过实现 RequestOriginParser 接口来完成，代码如下所示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.servlet.callback.RequestOriginParser;</div><div class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestOriginParserDefinition</span> <span class="keyword">implements</span> <span class="title">RequestOriginParser</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">parseOrigin</span><span class="params">(HttpServletRequest httpServletRequest)</span> </span>&#123;</div><div class="line">        String name = httpServletRequest.getParameter(<span class="string">"name"</span>);</div><div class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(name))&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"name is null"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要让 RequestOriginParserDefinition 生效，需要在配置类中进行配置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.servlet.callback.WebCallbackManager;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelConfiguration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">        WebCallbackManager.setRequestOriginParser(<span class="keyword">new</span> RequestOriginParserDefinition());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义规则异常返回"><a href="#自定义规则异常返回" class="headerlink" title="自定义规则异常返回"></a>自定义规则异常返回</h2><p>创建异常处理类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.handler;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.servlet.callback.UrlBlockHandler;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeException;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandler</span> <span class="keyword">implements</span> <span class="title">UrlBlockHandler</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">blocked</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, BlockException e)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        httpServletResponse.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</div><div class="line">        String msg = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> FlowException)&#123;</div><div class="line">            msg = <span class="string">"限流"</span>;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> DegradeException)&#123;</div><div class="line">            msg = <span class="string">"降级"</span>;</div><div class="line">        &#125;</div><div class="line">        httpServletResponse.getWriter().write(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>进行配置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelConfiguration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">        WebCallbackManager.setUrlBlockHandler(<span class="keyword">new</span> ExceptionHandler());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Sentinel-服务限流降级&quot;&gt;&lt;a href=&quot;#Sentinel-服务限流降级&quot; class=&quot;headerlink&quot; title=&quot;Sentinel 服务限流降级&quot;&gt;&lt;/a&gt;Sentinel 服务限流降级&lt;/h2&gt;&lt;p&gt;雪崩效应：有A服务的不可用导致的B、C…服务不可用的现象&lt;/p&gt;
&lt;p&gt;解决方案&lt;/p&gt;
&lt;p&gt;1、设置线程超时&lt;/p&gt;
&lt;p&gt;2、设置限流&lt;/p&gt;
&lt;p&gt;3、熔断器 Sentinel、Hystrix&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="spring-cloud" scheme="http://yzy755.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud-alibaba操作手册之Ribbon 负载均衡</title>
    <link href="http://yzy755.github.io/2020/03/03/spring-cloud-alibaba%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C%E4%B9%8BRibbon%20%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://yzy755.github.io/2020/03/03/spring-cloud-alibaba操作手册之Ribbon 负载均衡/</id>
    <published>2020-03-03T02:50:20.000Z</published>
    <updated>2020-11-03T10:27:12.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ribbon-负载均衡"><a href="#Ribbon-负载均衡" class="headerlink" title="Ribbon 负载均衡"></a>Ribbon 负载均衡</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@LoadBalanced</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/index"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"consumer远程调用provier："</span>+<span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://provider/index"</span>, String.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>随机</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8180</span></div><div class="line"><span class="attr">provider:</span></div><div class="line"><span class="attr">  ribbon:</span></div><div class="line"><span class="attr">    NFLoadBalancerRuleClassName:</span> com.netflix.loadbalancer.RandomRule</div></pre></td></tr></table></figure>
<blockquote>
<p>Nacos 权重</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Slf</span>4j</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosWeightedRule</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerRule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> NacosDiscoveryProperties nacosDiscoveryProperties;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWithNiwsConfig</span><span class="params">(IClientConfig iClientConfig)</span> </span>&#123;</div><div class="line">        <span class="comment">//读取配置文件</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        ILoadBalancer loadBalancer = <span class="keyword">this</span>.getLoadBalancer();</div><div class="line">        BaseLoadBalancer baseLoadBalancer = (BaseLoadBalancer) loadBalancer;</div><div class="line">        <span class="comment">//获取要请求的微服务名称</span></div><div class="line">        String name = baseLoadBalancer.getName();</div><div class="line">        <span class="comment">//获取服务发现的相关API</span></div><div class="line">        NamingService namingService = nacosDiscoveryProperties.namingServiceInstance();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Instance instance = namingService.selectOneHealthyInstance(name);</div><div class="line">            log.info(<span class="string">"选择的实例是port=&#123;&#125;,instance=&#123;&#125;"</span>,instance.getPort(),instance);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NacosServer(instance);</div><div class="line">        &#125; <span class="keyword">catch</span> (NacosException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8180</span></div><div class="line"><span class="attr">provider:</span></div><div class="line"><span class="attr">  ribbon:</span></div><div class="line"><span class="attr">    NFLoadBalancerRuleClassName:</span> com.southwind.configuration.NacosWeightedRule</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ribbon-负载均衡&quot;&gt;&lt;a href=&quot;#Ribbon-负载均衡&quot; class=&quot;headerlink&quot; title=&quot;Ribbon 负载均衡&quot;&gt;&lt;/a&gt;Ribbon 负载均衡&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConsumerConfig&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@LoadBalanced&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; RestTemplate &lt;span class=&quot;title&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RestTemplate();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="spring-cloud" scheme="http://yzy755.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud-alibaba操作手册之Nacos 服务发现与调用</title>
    <link href="http://yzy755.github.io/2020/03/03/spring-cloud-alibaba%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C%E4%B9%8BNacos%20%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B0%83%E7%94%A8/"/>
    <id>http://yzy755.github.io/2020/03/03/spring-cloud-alibaba操作手册之Nacos 服务发现与调用/</id>
    <published>2020-03-03T02:50:20.000Z</published>
    <updated>2020-11-03T10:27:02.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nacos-服务发现与调用"><a href="#Nacos-服务发现与调用" class="headerlink" title="Nacos 服务发现与调用"></a>Nacos 服务发现与调用</h2><p>pom.xml 添加 discovery，完成服务发现。</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过 discoveryClient 发现注册到 nacos 中的 provider 服务。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/instances"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;ServiceInstance&gt; <span class="title">instances</span><span class="params">()</span></span>&#123;</div><div class="line">        List&lt;ServiceInstance&gt; provider = discoveryClient.getInstances(<span class="string">"provider"</span>);</div><div class="line">        <span class="keyword">return</span> provider;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/index"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</div><div class="line">        List&lt;ServiceInstance&gt; provider = discoveryClient.getInstances(<span class="string">"provider"</span>);</div><div class="line">        <span class="keyword">int</span> index = ThreadLocalRandom.current().nextInt(provider.size());</div><div class="line">        String url = provider.get(index).getUri()+<span class="string">"/index"</span>;</div><div class="line">        <span class="keyword">return</span> <span class="string">"consumer随机远程调用provier："</span>+<span class="keyword">this</span>.restTemplate.getForObject(url, String.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Nacos-服务发现与调用&quot;&gt;&lt;a href=&quot;#Nacos-服务发现与调用&quot; class=&quot;headerlink&quot; title=&quot;Nacos 服务发现与调用&quot;&gt;&lt;/a&gt;Nacos 服务发现与调用&lt;/h2&gt;&lt;p&gt;pom.xml 添加 discovery，完成服务发现。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="spring-cloud" scheme="http://yzy755.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud-alibaba操作手册之Nacos 服务注册</title>
    <link href="http://yzy755.github.io/2020/03/03/spring-cloud-alibaba%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C%E4%B9%8BNacos%20%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C/"/>
    <id>http://yzy755.github.io/2020/03/03/spring-cloud-alibaba操作手册之Nacos 服务注册/</id>
    <published>2020-03-03T02:17:20.000Z</published>
    <updated>2020-11-03T10:26:50.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nacos-服务注册"><a href="#Nacos-服务注册" class="headerlink" title="Nacos 服务注册"></a>Nacos 服务注册</h2><p>解压，启动服务。</p>
<p>Nacos 搭建成功，接下来注册服务。</p>
<p>在父工程路径下创建子工程，让子工程继承父工程的环境依赖，pom.xml 中添加 nacos 发现组件。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>application.yml 中配置</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    nacos:</span></div><div class="line"><span class="attr">      discovery:</span></div><div class="line">        <span class="comment"># 指定nacos server地址</span></div><div class="line"><span class="attr">        server-addr:</span> localhost:<span class="number">8848</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> my-nacos</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Nacos-服务注册&quot;&gt;&lt;a href=&quot;#Nacos-服务注册&quot; class=&quot;headerlink&quot; title=&quot;Nacos 服务注册&quot;&gt;&lt;/a&gt;Nacos 服务注册&lt;/h2&gt;&lt;p&gt;解压，启动服务。&lt;/p&gt;
&lt;p&gt;Nacos 搭建成功，接下来注册服务。&lt;/p
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="spring-cloud" scheme="http://yzy755.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud-alibaba操作手册之创建父工程</title>
    <link href="http://yzy755.github.io/2020/03/02/spring-cloud-alibaba%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C%E4%B9%8B%E5%88%9B%E5%BB%BA%E7%88%B6%E5%B7%A5%E7%A8%8B/"/>
    <id>http://yzy755.github.io/2020/03/02/spring-cloud-alibaba操作手册之创建父工程/</id>
    <published>2020-03-02T09:17:53.000Z</published>
    <updated>2020-11-04T10:19:36.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建父工程"><a href="#创建父工程" class="headerlink" title="创建父工程"></a>创建父工程</h2><p>Spring Cloud Alibaba 的环境在父工程中创建，微服务的各个组件作为子工程，继承父工程的环境。</p>
<p>Spring Boot —》Spring Cloud —》Spring Cloud Alibaba</p>
<a id="more"></a>
<p>毕业版本</p>
<p><img src="/2020/03/02/spring-cloud-alibaba操作手册之创建父工程/1604394487849.png" alt="1604394487849"></p>
<p>pom.xml 中添加。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Spring Cloud Hoxton --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Spring Cloud Alibaba --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建父工程&quot;&gt;&lt;a href=&quot;#创建父工程&quot; class=&quot;headerlink&quot; title=&quot;创建父工程&quot;&gt;&lt;/a&gt;创建父工程&lt;/h2&gt;&lt;p&gt;Spring Cloud Alibaba 的环境在父工程中创建，微服务的各个组件作为子工程，继承父工程的环境。&lt;/p&gt;
&lt;p&gt;Spring Boot —》Spring Cloud —》Spring Cloud Alibaba&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="spring-cloud" scheme="http://yzy755.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>MQ业务解耦</title>
    <link href="http://yzy755.github.io/2018/09/03/MQ%E4%B8%9A%E5%8A%A1%E8%A7%A3%E8%80%A6/"/>
    <id>http://yzy755.github.io/2018/09/03/MQ业务解耦/</id>
    <published>2018-09-03T09:00:53.000Z</published>
    <updated>2018-09-04T09:18:26.738Z</updated>
    
    <content type="html"><![CDATA[<p>天使排班中有工时存欠的概念，意思是记录护士姐姐们相比一周的标准工时多或少工作的时长，作为统计工作情况的一个依据，存欠值守用户手动输入、实际排班时长、请假以及加班时长的影响，涉及到很多个业务模块，若让业务模块每次数据变更都去计算存欠值耦合就太过严重，所以用MQ解耦<br><a id="more"></a></p>
<p>业务模块每次数据变更，比如加班申请通过后发布加班时长增加的消息，存欠统计模块订阅需要的消息<br><img src="/2018/09/03/MQ业务解耦/图片1.png" alt="logo"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMqMsg</span><span class="params">(HcContext context, SchedulingOvertimeInfo schedulingOvertimeInfo, String type)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</div><div class="line">            GetWeekBeginEndVo weekBeginEnd = DateUtil.getWeekBeginEnd(dateFormat.parse(schedulingOvertimeInfo.getOvertimeDate()));</div><div class="line"></div><div class="line">            <span class="comment">// 消息内容</span></div><div class="line">            ChangedMqMsg changedMqMsg = <span class="keyword">new</span> ChangedMqMsg();</div><div class="line">            changedMqMsg.setBeginDate(weekBeginEnd.getBeginDate());</div><div class="line">            changedMqMsg.setEndDate(weekBeginEnd.getEndDate());</div><div class="line">            changedMqMsg.setDepartmentId(schedulingOvertimeInfo.getDepartmentId());</div><div class="line">            changedMqMsg.setuId(schedulingOvertimeInfo.getuId());</div><div class="line">            changedMqMsg.setOvertimeDuration(<span class="string">"minus"</span>.equals(type) ? <span class="number">0f</span> : schedulingOvertimeInfo.getOvertimeDuration());</div><div class="line"></div><div class="line">            <span class="comment">// 入队</span></div><div class="line">            ComponentCommonMsg cmsg = <span class="keyword">new</span> ComponentCommonMsg();</div><div class="line">            cmsg.setNotifyType(MqEnum.OVERTIME_DURATION_CHANGED.getId());</div><div class="line">            cmsg.setNotifyMsg(JSON.toJSONString(changedMqMsg));</div><div class="line">            commonTopicMsgProducer.sendMessage(cmsg);</div><div class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">            logger.error(<span class="string">"s:&#123;&#125; 日期转换失败:&#123;&#125;"</span>, context, CommonUtils.getStackTrace(e));</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;天使排班中有工时存欠的概念，意思是记录护士姐姐们相比一周的标准工时多或少工作的时长，作为统计工作情况的一个依据，存欠值守用户手动输入、实际排班时长、请假以及加班时长的影响，涉及到很多个业务模块，若让业务模块每次数据变更都去计算存欠值耦合就太过严重，所以用MQ解耦&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工作实践" scheme="http://yzy755.github.io/categories/%E5%B7%A5%E4%BD%9C%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="activityMQ" scheme="http://yzy755.github.io/tags/activityMQ/"/>
    
      <category term="海鹚" scheme="http://yzy755.github.io/tags/%E6%B5%B7%E9%B9%9A/"/>
    
  </entry>
  
  <entry>
    <title>shiro全面的权限方案</title>
    <link href="http://yzy755.github.io/2018/05/12/shiro%E5%85%A8%E9%9D%A2%E7%9A%84%E6%9D%83%E9%99%90%E6%96%B9%E6%A1%88/"/>
    <id>http://yzy755.github.io/2018/05/12/shiro全面的权限方案/</id>
    <published>2018-05-12T09:17:53.000Z</published>
    <updated>2018-09-04T09:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<p>天使排班基于微信的用户体系，在系统中用户的角色和权限全靠数据库查询和代码控制，没有一个强大简洁的权限控制框架实在不方便，于是引入了以前使用过的shiro，并在使用上进行了加强，集成了redis权限缓存以及基于redis的sessionDAO，全面支持分布式。<br><a id="more"></a></p>
<h1 id="1-认证"><a href="#1-认证" class="headerlink" title="1.认证"></a>1.认证</h1><p>认证通过微信或钉钉的认证，认证后在天使排版中只需在shiro中默认标记为认证通过即可</p>
<h1 id="2-授权"><a href="#2-授权" class="headerlink" title="2.授权"></a>2.授权</h1><h2 id="2-1权限控制"><a href="#2-1权限控制" class="headerlink" title="2.1权限控制"></a>2.1权限控制</h2><h3 id="2-1-1基于角色的访问控制"><a href="#2-1-1基于角色的访问控制" class="headerlink" title="2.1.1基于角色的访问控制"></a>2.1.1基于角色的访问控制</h3><pre><code>RBAC基于角色的访问控制（Role-Based Access Control）是以角色为中心进行访问控制，比如：主体的角色为管理员可以排班，查询成员信息等，访问控制流程如下：
</code></pre><p><img src="/2018/05/12/shiro全面的权限方案/图片1.png" alt="logo"></p>
<p>上图中的判断逻辑代码可以理解为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(主体.hasRole(<span class="string">"管理员角色id"</span>))&#123;</div><div class="line">	排班</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>缺点：以角色进行访问控制粒度较粗，如果上图中排班所需要的角色变化为创建者和管理员，此时就需要修改判断逻辑为“判断主体的角色是否是创建者或管理员”，系统可扩展性差。<br>修改代码如下：<br>if(主体.hasRole(“管理员角色id”) ||  主体.hasRole(“创建者角色id”)){<br>    排班<br>}</p>
<h3 id="2-1-2基于资源的访问控制"><a href="#2-1-2基于资源的访问控制" class="headerlink" title="2.1.2基于资源的访问控制"></a>2.1.2基于资源的访问控制</h3><pre><code>RBAC基于资源的访问控制（Resource-Based Access Control）是以资源为中心进行访问控制，比如：主体必须具有排班权限才可以排班等，访问控制流程如下：
</code></pre><p>上图中的判断逻辑代码可以理解为：<br>if(主体.hasPermission(“排班权限标识”)){<br>    排班<br>}</p>
<p>优点：系统设计时定义好排班的权限标识，即使排班所需要的角色变化为创建者和管理员也只需要将“排班权限”添加到“管理角色”的权限列表中，判断逻辑不用修改，系统可扩展性强。</p>
<h3 id="2-1-3基于url拦截"><a href="#2-1-3基于url拦截" class="headerlink" title="2.1.3基于url拦截"></a>2.1.3基于url拦截</h3><pre><code>基于url拦截是企业中常用的权限管理方法，实现思路是：将系统操作的每个url配置在权限表中，将权限对应到角色，将角色分配给用户，用户访问系统功能通过Filter进行过虑，过虑器获取到用户访问的url，只要访问的url是用户分配角色中的url则放行继续访问。
如下图：
</code></pre><p><img src="/2018/05/12/shiro全面的权限方案/图片2.png" alt="logo"></p>
<h2 id="2-2权限模型"><a href="#2-2权限模型" class="headerlink" title="2.2权限模型"></a>2.2权限模型</h2><p>对主体、资源、权限通过数据模型表示。</p>
<p>主体（账号、密码）<br>资源（资源名称、访问地址）<br>权限（权限名称、资源id）<br>角色（角色名称）<br>角色和权限关系（角色id、权限id）<br>主体和角色关系（主体id、角色id）</p>
<p>通常企业开发中将资源和权限表合并为一张权限表，如下：<br>资源（资源名称、访问地址）<br>权限（权限名称、资源id）<br>合并为：<br>权限（权限名称、资源名称、资源访问地址）<br>如下图：</p>
<p><img src="/2018/05/12/shiro全面的权限方案/图片3.png" alt="logo"></p>
<p>上图常被称为权限管理的通用模型，在开发中根据系统自身的特点还会对上图进行修改，字段可以个性化。</p>
<h1 id="3-Shiro"><a href="#3-Shiro" class="headerlink" title="3. Shiro"></a>3. Shiro</h1><h2 id="3-1-Shiro架构"><a href="#3-1-Shiro架构" class="headerlink" title="3.1 Shiro架构"></a>3.1 Shiro架构</h2><p><img src="/2018/05/12/shiro全面的权限方案/图片4.png" alt="logo"></p>
<h3 id="3-1-1-Subject"><a href="#3-1-1-Subject" class="headerlink" title="3.1.1 Subject"></a>3.1.1 Subject</h3><p>Subject即主体，外部应用与subject进行交互，subject记录了当前操作用户，将用户的概念理解为当前操作的主体，可能是一个通过浏览器请求的用户，也可能是一个运行的程序。    Subject在shiro中是一个接口，接口中定义了很多认证授相关的方法，外部程序通过subject进行认证授，而subject是通过SecurityManager安全管理器进行认证授权</p>
<h3 id="3-1-2-SecurityManager"><a href="#3-1-2-SecurityManager" class="headerlink" title="3.1.2 SecurityManager"></a>3.1.2 SecurityManager</h3><p>SecurityManager即安全管理器，对全部的subject进行安全管理，它是shiro的核心，负责对所有的subject进行安全管理。通过SecurityManager可以完成subject的认证、授权等，实质上SecurityManager是通过Authenticator进行认证，通过Authorizer进行授权，通过SessionManager进行会话管理等。<br>SecurityManager是一个接口，继承了Authenticator, Authorizer, SessionManager这三个接口。</p>
<h3 id="3-1-3-Authenticator"><a href="#3-1-3-Authenticator" class="headerlink" title="3.1.3 Authenticator"></a>3.1.3 Authenticator</h3><p>Authenticator即认证器，对用户身份进行认证，Authenticator是一个接口，shiro提供ModularRealmAuthenticator实现类，通过ModularRealmAuthenticator基本上可以满足大多数需求，也可以自定义认证器。</p>
<h3 id="3-1-4-Authorizer"><a href="#3-1-4-Authorizer" class="headerlink" title="3.1.4 Authorizer"></a>3.1.4 Authorizer</h3><p>Authorizer即授权器，用户通过认证器认证通过，在访问功能时需要通过授权器判断用户是否有此功能的操作权限。</p>
<h3 id="3-1-5-realm"><a href="#3-1-5-realm" class="headerlink" title="3.1.5 realm"></a>3.1.5 realm</h3><p>Realm即领域，相当于datasource数据源，securityManager进行安全认证需要通过Realm获取用户权限数据，比如：如果用户身份数据在数据库那么realm就需要从数据库获取用户身份信息。<br>注意：不要把realm理解成只是从数据源取数据，在realm中还有认证授权校验的相关的代码。<br>其中，最基础的是 Realm 接口，AuthenticationRealm 负责认证，AuthorizingRealm负责授权，通常自定义的 realm 继承AuthorizingRealm 。</p>
<h3 id="3-1-6-sessionManager"><a href="#3-1-6-sessionManager" class="headerlink" title="3.1.6 sessionManager"></a>3.1.6 sessionManager</h3><p>sessionManager即会话管理，shiro框架定义了一套会话管理，它不依赖web容器的session，所以shiro可以使用在非web应用上，也可以将分布式应用的会话集中在一点管理，此特性可使它实现单点登录。</p>
<h3 id="3-1-7-SessionDAO"><a href="#3-1-7-SessionDAO" class="headerlink" title="3.1.7 SessionDAO"></a>3.1.7 SessionDAO</h3><p>SessionDAO即会话dao，是对session会话操作的一套接口，比如要将session存储到数据库，可以通过jdbc将会话存储到数据库。<br>通过SessionDao管理session数据，针对个性化的session数据存储需要使用sessionDao</p>
<h3 id="3-1-8-CacheManager"><a href="#3-1-8-CacheManager" class="headerlink" title="3.1.8 CacheManager"></a>3.1.8 CacheManager</h3><p>CacheManager即缓存管理，将用户权限数据存储在缓存，这样可以提高性能。<br>Shiro有默认的cache实现，是通过自定义map实现的，可整合ehcache或者redis实现cache</p>
<h3 id="3-1-9-Cryptography"><a href="#3-1-9-Cryptography" class="headerlink" title="3.1.9 Cryptography"></a>3.1.9 Cryptography</h3><p>Cryptography即密码管理，shiro提供了一套加密/解密的组件，方便开发。比如提供常用的散列、加/解密等功能。</p>
<h2 id="3-2-shiro的jar包"><a href="#3-2-shiro的jar包" class="headerlink" title="3.2 shiro的jar包"></a>3.2 shiro的jar包</h2><p>与其它java开源框架类似，将shiro的jar包加入项目就可以使用shiro提供的功能了。shiro-core是核心包必须选用，还提供了与web整合的shiro-web、与spring整合的shiro-spring、与任务调度quartz整合的shiro-quartz等，下边是shiro各jar包的maven坐标。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">	&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.2.3&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;shiro-web&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.2.3&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.2.3&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;shiro-quartz&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.2.3&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">也可以通过引入shiro-all包括shiro所有的包：</div><div class="line">	&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;shiro-all&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.2.3&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<h2 id="3-3-shiro入口"><a href="#3-3-shiro入口" class="headerlink" title="3.3 shiro入口"></a>3.3 shiro入口</h2><p>Web.xml:<br><img src="/2018/05/12/shiro全面的权限方案/图片5.png" alt="logo"><br>Stringmvc:<br><img src="/2018/05/12/shiro全面的权限方案/图片6.png" alt="logo"></p>
<h2 id="3-4-shiro认证"><a href="#3-4-shiro认证" class="headerlink" title="3.4 shiro认证"></a>3.4 shiro认证</h2><p>认证流程<br><img src="/2018/05/12/shiro全面的权限方案/图片7.png" alt="logo"></p>
<h5 id="1、web初始化securityManager。"><a href="#1、web初始化securityManager。" class="headerlink" title="1、web初始化securityManager。"></a>1、web初始化securityManager。</h5><h5 id="2、调用subject-login方法主体提交认证，提交的token"><a href="#2、调用subject-login方法主体提交认证，提交的token" class="headerlink" title="2、调用subject.login方法主体提交认证，提交的token"></a>2、调用subject.login方法主体提交认证，提交的token</h5><h5 id="3、securityManager进行认证，securityManager最终由ModularRealmAuthenticator进行认证。"><a href="#3、securityManager进行认证，securityManager最终由ModularRealmAuthenticator进行认证。" class="headerlink" title="3、securityManager进行认证，securityManager最终由ModularRealmAuthenticator进行认证。"></a>3、securityManager进行认证，securityManager最终由ModularRealmAuthenticator进行认证。</h5><h5 id="4、ModularRealmAuthenticator给Realm传入token"><a href="#4、ModularRealmAuthenticator给Realm传入token" class="headerlink" title="4、ModularRealmAuthenticator给Realm传入token"></a>4、ModularRealmAuthenticator给Realm传入token</h5><h5 id="5、Realm根据输入的token（UsernamePasswordToken）调用doGetAuthenticationInfo从数据库查询用户信息，根据账号查询用户信息（账号和密码）"><a href="#5、Realm根据输入的token（UsernamePasswordToken）调用doGetAuthenticationInfo从数据库查询用户信息，根据账号查询用户信息（账号和密码）" class="headerlink" title="5、Realm根据输入的token（UsernamePasswordToken）调用doGetAuthenticationInfo从数据库查询用户信息，根据账号查询用户信息（账号和密码）"></a>5、Realm根据输入的token（UsernamePasswordToken）调用doGetAuthenticationInfo从数据库查询用户信息，根据账号查询用户信息（账号和密码）</h5><pre><code>如果查询到用户信息，就给ModularRealmAuthenticator返回用户信息（账号和密码）
如果查询不到，就给ModularRealmAuthenticator返回null
</code></pre><h5 id="6、ModularRealmAuthenticator接收Realm返回Authentication认证信息"><a href="#6、ModularRealmAuthenticator接收Realm返回Authentication认证信息" class="headerlink" title="6、ModularRealmAuthenticator接收Realm返回Authentication认证信息"></a>6、ModularRealmAuthenticator接收Realm返回Authentication认证信息</h5><p>如果返回的认证信息是null，ModularRealmAuthenticator抛出异常（org.apache.shiro.authc.UnknownAccountException）</p>
<p>如果返回的认证信息不是null（说明数据库找到了用户），对Realm返回用户密码 和 token中的密码 进行对比，如果不一致抛出异常（org.apache.shiro.authc.IncorrectCredentialsException）</p>
<h2 id="3-5-shiro授权"><a href="#3-5-shiro授权" class="headerlink" title="3.5 shiro授权"></a>3.5 shiro授权</h2><p>授权流程<br><img src="/2018/05/12/shiro全面的权限方案/图片8.png" alt="logo"></p>
<h5 id="1、对subject进行授权，调用方法isPermitted（”permission串”）"><a href="#1、对subject进行授权，调用方法isPermitted（”permission串”）" class="headerlink" title="1、对subject进行授权，调用方法isPermitted（”permission串”）"></a>1、对subject进行授权，调用方法isPermitted（”permission串”）</h5><h5 id="2、SecurityManager执行授权，通过ModularRealmAuthorizer执行授权"><a href="#2、SecurityManager执行授权，通过ModularRealmAuthorizer执行授权" class="headerlink" title="2、SecurityManager执行授权，通过ModularRealmAuthorizer执行授权"></a>2、SecurityManager执行授权，通过ModularRealmAuthorizer执行授权</h5><h5 id="3、ModularRealmAuthorizer执行realm（从数据库查询权限数据"><a href="#3、ModularRealmAuthorizer执行realm（从数据库查询权限数据" class="headerlink" title="3、ModularRealmAuthorizer执行realm（从数据库查询权限数据"></a>3、ModularRealmAuthorizer执行realm（从数据库查询权限数据</h5><pre><code>调用realm的授权方法：doGetAuthorizationInfo
</code></pre><h5 id="4、realm从数据库查询权限数据，返回ModularRealmAuthorizer"><a href="#4、realm从数据库查询权限数据，返回ModularRealmAuthorizer" class="headerlink" title="4、realm从数据库查询权限数据，返回ModularRealmAuthorizer"></a>4、realm从数据库查询权限数据，返回ModularRealmAuthorizer</h5><h5 id="5、ModularRealmAuthorizer调用PermissionResolver进行权限串比对"><a href="#5、ModularRealmAuthorizer调用PermissionResolver进行权限串比对" class="headerlink" title="5、ModularRealmAuthorizer调用PermissionResolver进行权限串比对"></a>5、ModularRealmAuthorizer调用PermissionResolver进行权限串比对</h5><h5 id="6、如果比对后，isPermitted中”permission串”在realm查询到权限数据中，说明用户访问permission串有权限，否则-没有权限，抛出异常。"><a href="#6、如果比对后，isPermitted中”permission串”在realm查询到权限数据中，说明用户访问permission串有权限，否则-没有权限，抛出异常。" class="headerlink" title="6、如果比对后，isPermitted中”permission串”在realm查询到权限数据中，说明用户访问permission串有权限，否则 没有权限，抛出异常。"></a>6、如果比对后，isPermitted中”permission串”在realm查询到权限数据中，说明用户访问permission串有权限，否则 没有权限，抛出异常。</h5><h2 id="3-6自定义realm"><a href="#3-6自定义realm" class="headerlink" title="3.6自定义realm"></a>3.6自定义realm</h2><p>自定义realm继承AuthorizingRealm，其中两个最重要的方法doGetAuthenticationInfo认证方法、doGetAuthorizationInfo授权方法，重载两个方法，在自定义realm中注入角色和权限的service进行查询。</p>
<h3 id="3-6-1认证方法"><a href="#3-6-1认证方法" class="headerlink" title="3.6.1认证方法"></a>3.6.1认证方法</h3><p>根据shiro认证流程，在调用subject.login()方法后会进入认证方法，在该方法中将用户名和用户密码写入shiro认证信息中。由于天使排班没有自己的账号密码模块，可以将用户id作为用户名，密码设置为空进行记录：</p>
<p>登陆：<br><img src="/2018/05/12/shiro全面的权限方案/图片9.png" alt="logo"><br>认证：<br><img src="/2018/05/12/shiro全面的权限方案/图片10.png" alt="logo"></p>
<h3 id="3-6-2授权方法"><a href="#3-6-2授权方法" class="headerlink" title="3.6.2授权方法"></a>3.6.2授权方法</h3><p>授权方法触发的方式有很多，简单的方式可以在认证方法中显式调用，正常的方式是在用户访问受保护的资源时进行授权，这个前提是在shiro的配置中配置哪些资源是需要权限访问的，配置有两种方式，第一种方式：在shiroFilter总过滤器中，配置url对应需要的角色或权限比如：<br><img src="/2018/05/12/shiro全面的权限方案/图片11.png" alt="logo"><br>第二种方式：在方法上添加注解，方法可以使service方法，也可以是controller，建议在controller方法上加，service方法由于复用的关系，加权限控制不适合，比如：<br><img src="/2018/05/12/shiro全面的权限方案/图片12.png" alt="logo"><br><img src="/2018/05/12/shiro全面的权限方案/图片13.png" alt="logo"><br>授权方法实现：<br><img src="/2018/05/12/shiro全面的权限方案/图片14.png" alt="logo"><br><img src="/2018/05/12/shiro全面的权限方案/图片15.png" alt="logo"></p>
<h1 id="4-扩展shiro"><a href="#4-扩展shiro" class="headerlink" title="4.扩展shiro"></a>4.扩展shiro</h1><h2 id="4-1需求"><a href="#4-1需求" class="headerlink" title="4.1需求"></a>4.1需求</h2><p>在线修改用户角色或权限实时生效</p>
<h2 id="4-2为什么要扩展"><a href="#4-2为什么要扩展" class="headerlink" title="4.2为什么要扩展"></a>4.2为什么要扩展</h2><p>在用户认证和授权完成后，为了提高性能，使用了cacheManage组件缓存了用户的角色权限信息，在用户退出登录之前不会再次请求授权方法，需要在适当的时机清除指定用户的权限缓存，指定用户在缓存清空后访问受保护的资源之前重新进行授权。</p>
<h2 id="4-3怎么做"><a href="#4-3怎么做" class="headerlink" title="4.3怎么做"></a>4.3怎么做</h2><p>在shiroFilter核心过滤器中，提供了filters参数，这个参数记录了能够控制资源访问的权限过滤器链，初始化过程中shiro会注册默认的filter，shiro默认提供如下过滤器：<br><img src="/2018/05/12/shiro全面的权限方案/图片16.png" alt="logo"></p>
<p>在这基础上自定义自己的过滤器，这里选择继承AccessControlFilter，重载两个方法：<br>isAccessAllowed：即是否允许访问，返回 true 表示允许；<br>    onAccessDenied：表示访问拒绝时是否自己处理，如果返回 true 表示自己不处理且继续拦截器链执行，返回 false 表示自己已经处理了（比如重定向到另一个页面）。</p>
<p>isAccessAllowed方法默认返回false不允许访问，随后就进入onAccessDenied方法，然后就可以自己处理当前用户了，判断当前用户session中是否被标记为修改了权限，如果被标记了的话，就清除当前用户的缓存，最后返回true，如下：<br><img src="/2018/05/12/shiro全面的权限方案/图片17.png" alt="logo"><br>配置如下：<br><img src="/2018/05/12/shiro全面的权限方案/图片18.png" alt="logo"></p>
<p>如何标记用户，在管理员修改用户的角色权限逻辑中，根据被修改的用户id，找到其对应的session并标记，这里需要在修改的service中注入sessionDao对象，从而获取想要的session。</p>
<h1 id="5-数据库设计"><a href="#5-数据库设计" class="headerlink" title="5.数据库设计"></a>5.数据库设计</h1><p>权限表<br><img src="/2018/05/12/shiro全面的权限方案/图片19.png" alt="logo"></p>
<p>角色权限关联表<br><img src="/2018/05/12/shiro全面的权限方案/图片20.png" alt="logo"></p>
<p>角色表、用户表、用户角色关联表沿用以前的设计</p>
<p>海鹚的session是重写的，sessionId和cookiename都是自定义的，与shiro的session不能通用，重写sessionDAO实现session同步，屏蔽公司的filter，自定义sessionId和cookiename</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;天使排班基于微信的用户体系，在系统中用户的角色和权限全靠数据库查询和代码控制，没有一个强大简洁的权限控制框架实在不方便，于是引入了以前使用过的shiro，并在使用上进行了加强，集成了redis权限缓存以及基于redis的sessionDAO，全面支持分布式。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工作实践" scheme="http://yzy755.github.io/categories/%E5%B7%A5%E4%BD%9C%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="海鹚" scheme="http://yzy755.github.io/tags/%E6%B5%B7%E9%B9%9A/"/>
    
      <category term="shiro" scheme="http://yzy755.github.io/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow的Python API</title>
    <link href="http://yzy755.github.io/2017/05/25/TensorFlow%E7%9A%84Python%20API/"/>
    <id>http://yzy755.github.io/2017/05/25/TensorFlow的Python API/</id>
    <published>2017-05-25T02:17:53.000Z</published>
    <updated>2017-05-25T02:04:39.900Z</updated>
    
    <content type="html"><![CDATA[<p>tensorflow的java api极限性还是很大，至今也是能找到linux和mac的库文件，再加上决定使用superset作为olap系统，正好可以在superset上集成Python版本的TensorFlow<br><a id="more"></a><br>继续想使用现成的图像识别模型做一个简单的demo，网上有现成的训练完的模型<br>源码：</p>
<pre><code># Copyright 2015 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

&quot;&quot;&quot;Simple image classification with Inception.

Run image classification with Inception trained on ImageNet 2012 Challenge data
set.

This program creates a graph from a saved GraphDef protocol buffer,
and runs inference on an input JPEG image. It outputs human readable
strings of the top 5 predictions along with their probabilities.

Change the --image_file argument to any jpg image to compute a
classification of that image.

Please see the tutorial and website for a detailed description of how
to use this script to perform image recognition.

https://tensorflow.org/tutorials/image_recognition/
&quot;&quot;&quot;

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import os.path
import re
import sys
import tarfile

import numpy as np
from six.moves import urllib
import tensorflow as tf

FLAGS = tf.app.flags.FLAGS

# classify_image_graph_def.pb:
#   Binary representation of the GraphDef protocol buffer.
# imagenet_synset_to_human_label_map.txt:
#   Map from synset ID to a human readable string.
# imagenet_2012_challenge_label_map_proto.pbtxt:
#   Text representation of a protocol buffer mapping a label to synset ID.
tf.app.flags.DEFINE_string(
    &apos;model_dir&apos;, &apos;/tmp/imagenet&apos;,
    &quot;&quot;&quot;Path to classify_image_graph_def.pb, &quot;&quot;&quot;
    &quot;&quot;&quot;imagenet_synset_to_human_label_map.txt, and &quot;&quot;&quot;
    &quot;&quot;&quot;imagenet_2012_challenge_label_map_proto.pbtxt.&quot;&quot;&quot;)
tf.app.flags.DEFINE_string(&apos;image_file&apos;, &apos;&apos;,
                           &quot;&quot;&quot;Absolute path to image file.&quot;&quot;&quot;)
tf.app.flags.DEFINE_integer(&apos;num_top_predictions&apos;, 5,
                            &quot;&quot;&quot;Display this many predictions.&quot;&quot;&quot;)

# pylint: disable=line-too-long
DATA_URL = &apos;http://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz&apos;
# pylint: enable=line-too-long


class NodeLookup(object):
  &quot;&quot;&quot;Converts integer node ID&apos;s to human readable labels.&quot;&quot;&quot;

  def __init__(self,
               label_lookup_path=None,
               uid_lookup_path=None):
    if not label_lookup_path:
      label_lookup_path = os.path.join(
          FLAGS.model_dir, &apos;imagenet_2012_challenge_label_map_proto.pbtxt&apos;)
    if not uid_lookup_path:
      uid_lookup_path = os.path.join(
          FLAGS.model_dir, &apos;imagenet_synset_to_human_label_map.txt&apos;)
    self.node_lookup = self.load(label_lookup_path, uid_lookup_path)

  def load(self, label_lookup_path, uid_lookup_path):
    &quot;&quot;&quot;Loads a human readable English name for each softmax node.

    Args:
      label_lookup_path: string UID to integer node ID.
      uid_lookup_path: string UID to human-readable string.

    Returns:
      dict from integer node ID to human-readable string.
    &quot;&quot;&quot;
    if not tf.gfile.Exists(uid_lookup_path):
      tf.logging.fatal(&apos;File does not exist %s&apos;, uid_lookup_path)
    if not tf.gfile.Exists(label_lookup_path):
      tf.logging.fatal(&apos;File does not exist %s&apos;, label_lookup_path)

    # Loads mapping from string UID to human-readable string
    proto_as_ascii_lines = tf.gfile.GFile(uid_lookup_path).readlines()
    uid_to_human = {}
    p = re.compile(r&apos;[n\d]*[ \S,]*&apos;)
    for line in proto_as_ascii_lines:
      parsed_items = p.findall(line)
      uid = parsed_items[0]
      human_string = parsed_items[2]
      uid_to_human[uid] = human_string

    # Loads mapping from string UID to integer node ID.
    node_id_to_uid = {}
    proto_as_ascii = tf.gfile.GFile(label_lookup_path).readlines()
    for line in proto_as_ascii:
      if line.startswith(&apos;  target_class:&apos;):
        target_class = int(line.split(&apos;: &apos;)[1])
      if line.startswith(&apos;  target_class_string:&apos;):
        target_class_string = line.split(&apos;: &apos;)[1]
        node_id_to_uid[target_class] = target_class_string[1:-2]

    # Loads the final mapping of integer node ID to human-readable string
    node_id_to_name = {}
    for key, val in node_id_to_uid.items():
      if val not in uid_to_human:
        tf.logging.fatal(&apos;Failed to locate: %s&apos;, val)
      name = uid_to_human[val]
      node_id_to_name[key] = name

    return node_id_to_name

  def id_to_string(self, node_id):
    if node_id not in self.node_lookup:
      return &apos;&apos;
    return self.node_lookup[node_id]


def create_graph():
  &quot;&quot;&quot;Creates a graph from saved GraphDef file and returns a saver.&quot;&quot;&quot;
  # Creates graph from saved graph_def.pb.
  with tf.gfile.FastGFile(os.path.join(
      FLAGS.model_dir, &apos;classify_image_graph_def.pb&apos;), &apos;rb&apos;) as f:
    graph_def = tf.GraphDef()
    graph_def.ParseFromString(f.read())
    _ = tf.import_graph_def(graph_def, name=&apos;&apos;)


def run_inference_on_image(image):
  &quot;&quot;&quot;Runs inference on an image.

  Args:
    image: Image file name.

  Returns:
    Nothing
  &quot;&quot;&quot;
  if not tf.gfile.Exists(image):
    tf.logging.fatal(&apos;File does not exist %s&apos;, image)
  image_data = tf.gfile.FastGFile(image, &apos;rb&apos;).read()

  # Creates graph from saved GraphDef.
  create_graph()

  with tf.Session() as sess:
    # Some useful tensors:
    # &apos;softmax:0&apos;: A tensor containing the normalized prediction across
    #   1000 labels.
    # &apos;pool_3:0&apos;: A tensor containing the next-to-last layer containing 2048
    #   float description of the image.
    # &apos;DecodeJpeg/contents:0&apos;: A tensor containing a string providing JPEG
    #   encoding of the image.
    # Runs the softmax tensor by feeding the image_data as input to the graph.
    softmax_tensor = sess.graph.get_tensor_by_name(&apos;softmax:0&apos;)
    predictions = sess.run(softmax_tensor,
                           {&apos;DecodeJpeg/contents:0&apos;: image_data})
    predictions = np.squeeze(predictions)

    # Creates node ID --&gt; English string lookup.
    node_lookup = NodeLookup()

    top_k = predictions.argsort()[-FLAGS.num_top_predictions:][::-1]
    for node_id in top_k:
      human_string = node_lookup.id_to_string(node_id)
      score = predictions[node_id]
      print(&apos;%s (score = %.5f)&apos; % (human_string, score))


def maybe_download_and_extract():
  &quot;&quot;&quot;Download and extract model tar file.&quot;&quot;&quot;
  dest_directory = FLAGS.model_dir
  if not os.path.exists(dest_directory):
    os.makedirs(dest_directory)
  filename = DATA_URL.split(&apos;/&apos;)[-1]
  filepath = os.path.join(dest_directory, filename)
  if not os.path.exists(filepath):
    def _progress(count, block_size, total_size):
      sys.stdout.write(&apos;\r&gt;&gt; Downloading %s %.1f%%&apos; % (
          filename, float(count * block_size) / float(total_size) * 100.0))
      sys.stdout.flush()
    filepath, _ = urllib.request.urlretrieve(DATA_URL, filepath, _progress)
    print()
    statinfo = os.stat(filepath)
    print(&apos;Succesfully downloaded&apos;, filename, statinfo.st_size, &apos;bytes.&apos;)
  tarfile.open(filepath, &apos;r:gz&apos;).extractall(dest_directory)


def main(_):
  maybe_download_and_extract()
  image = (FLAGS.image_file if FLAGS.image_file else
           os.path.join(FLAGS.model_dir, &apos;cropped_panda.jpg&apos;))
  run_inference_on_image(image)


if __name__ == &apos;__main__&apos;:
  tf.app.run()
</code></pre><p>这是个可以直接运行py文件：python classify_image.py 就可以识别cropped_panda.jpg为大熊猫，程序会下载训练好的pb模型文件和物品分类大全txt文件，然后在 <a href="https://github.com/airbnb/superset" target="_blank" rel="external">https://github.com/airbnb/superset</a> 下载superset源码，在view包的core.py中拓展一个文件上传功能，将上传的文件条用上面的识别方法，就可以做到简单的图形识别，整个流程下来问题主要还是算法模型的生成。。。<br>在部署superset过程中也遇到很多坑，官方文档上是说修改完源码后要重新对前端打包，基本可以参照 <a href="https://fangyeqing.github.io/2017/03/04/superset%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="external">https://fangyeqing.github.io/2017/03/04/superset%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</a> 这上面的教程，后台编译就比较简单了，在superset根目录下执行 python setup.py install 就行，然后参照前面写的superset搭建启动的方式即可</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tensorflow的java api极限性还是很大，至今也是能找到linux和mac的库文件，再加上决定使用superset作为olap系统，正好可以在superset上集成Python版本的TensorFlow&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://yzy755.github.io/tags/python/"/>
    
      <category term="AI" scheme="http://yzy755.github.io/tags/AI/"/>
    
      <category term="TensorFlow" scheme="http://yzy755.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow的java API</title>
    <link href="http://yzy755.github.io/2017/05/17/TensorFlow%E7%9A%84java%20API/"/>
    <id>http://yzy755.github.io/2017/05/17/TensorFlow的java API/</id>
    <published>2017-05-17T10:17:53.000Z</published>
    <updated>2017-05-25T02:04:38.674Z</updated>
    
    <content type="html"><![CDATA[<p>对数学不好的人来讲，阅读TensorFlow实在是一件让人头皮发麻的事情，现在接触的这个大数据分析项目是想将使用TensorFlow写的算法打包供外部使用以及外部系统以rest接口方式来调用算法得到结果，写算法和调用这两个工作肯定是要分离的，暂且不管TensorFlow本身如何使用，研究了下用java调用TensorFlow的方式。<br><a id="more"></a><br>从 <a href="https://codeload.github.com/tensorflow/tensorflow/zip/v1.1.0" target="_blank" rel="external">https://codeload.github.com/tensorflow/tensorflow/zip/v1.1.0</a> 下载源码<br>电脑上用不超过3.5版本（anaconda3 4.2版本）的Python： pip install tensorflow 直接安装<br>然后就发现了很奇怪的地方，<a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/java/README.md" target="_blank" rel="external">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/java/README.md</a> 上对TensorFlow for java的描述是说有linux、Mac、windows的库，但是在源码tensorflow-1.1.0\tensorflow\java目录下的readme文件中只给出了linux和mac的下载地址，无奈只能在先在linux虚拟机中尝试了，根据那个readme文件可以下载到.jar用于java调用TensorFlow api，还有一个.so文件用于底层调用native方法库，这样也不难理解，但是这样其实失去了java最强的跨平台特性。。。<br>建一个简单的java project，将下载的jar包加入classpath，写个main方法，一句话试下能不能用：System.out.println(TensorFlow.version());<br>报错：TensorFlow Java API methods will throw an UnsatisfiedLinkError unless native code shared libraries are loaded，意思是java的library中没有相应的库文件，执行System.out.println(System.getProperty(“java.library.path”));看下这台电脑的库路径是什么，将so文件放进去即可，或者是在该工程的jdk中加入自定义的库路径，然后就可以执行查看版本的方法了，</p>
<p>将源码中的tensorflow\java\src代码拷贝到工程中，其中test包中都可以执行尝试下，最符合我研究目标的一个类躲在tensorflow\java\src\main\java\org\tensorflow\examples包中，里边是一个调用模型去识别图片中的物体的类：LabelImage.java<br>    <a href="https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip" target="_blank" rel="external">https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip</a> 下载算法模型和物品种类列表解压到目录下，这里是：/tmp/graph/<br>    创建一个调用类，main方法就一句话：LabelImage.main(new String[] { “/tmp/graph/“, “/tmp/graph/plane.jpg” });当然要准备一张合适的图片，然后他就给你识别，这是一张战斗飞机的图片，而识别的结果为：BEST MATCH: airliner (45.18% likely) ，意思是班机，都是飞机，八九不十</p>
<p>源码中调用的是一个.pb文件，我的理解是该文件是用TensorFlow写好算法并训练完毕生成的模型，就以类似这种文件为界限，生成该文件的工作交给算法设计人员，调用该文件的工作交给技术人员，以后的算法打包也好，webservice调用也好都好理解。</p>
<p>其实使用java这种方法去调用TensorFlow，在不了解TensorFlow使用的情况下还是写不出来什么代码，只是可以规避现有的java技术人员重新学习Python和搭建python web服务的时间成本和风险罢了，有时间的话最好还是用Python接，没有异构的问题。</p>
<p>思考1：pb模型文件一旦产生如何提高学习的准确率，就像上面识别飞机也只有45.18%的概率，今日头条的推荐应该也是用这种训练学习的方式，你用得越多越久，它就越知道你想看什么，然后达到推荐的目的，如何保证持续学习训练。。。<br>    猜想：设置一个节点，无论是从时间维度还是数据量大小维度考虑，这个节点将获取的数据添加到训练集，重新训练得出模型</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对数学不好的人来讲，阅读TensorFlow实在是一件让人头皮发麻的事情，现在接触的这个大数据分析项目是想将使用TensorFlow写的算法打包供外部使用以及外部系统以rest接口方式来调用算法得到结果，写算法和调用这两个工作肯定是要分离的，暂且不管TensorFlow本身如何使用，研究了下用java调用TensorFlow的方式。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="AI" scheme="http://yzy755.github.io/tags/AI/"/>
    
      <category term="TensorFlow" scheme="http://yzy755.github.io/tags/TensorFlow/"/>
    
      <category term="java" scheme="http://yzy755.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>基于python+flask+mysql的web开发初探</title>
    <link href="http://yzy755.github.io/2017/05/12/%E5%9F%BA%E4%BA%8Epython+flask+mysql%E7%9A%84web%E5%BC%80%E5%8F%91%E5%88%9D%E6%8E%A2/"/>
    <id>http://yzy755.github.io/2017/05/12/基于python+flask+mysql的web开发初探/</id>
    <published>2017-05-12T07:40:53.000Z</published>
    <updated>2017-05-12T09:07:07.785Z</updated>
    
    <content type="html"><![CDATA[<p>由于用Python开发一个Web框架十分容易，所以Python有上百个开源的Web框架，当下流行的是Flask,Django等<br>Flask是一个使用 Python 编写的轻量级 Web 应用框架。其 WSGI 工具箱采用 Werkzeug ，模板引擎则使用 Jinja2 。<br><a id="more"></a><br>搭建的大致步骤和常见的问题：</p>
<p>1.安装anaconda，anaconda里面集成了很多关于python科学计算的第三方库，主要是安装方便，而python是一个编译器，如果不使用anaconda，那么安装起来会比较痛苦，各个库之间的依赖性就很难连接的很好</p>
<p>2.安装mysql</p>
<p>3.安装mysql-python，命令:pip install MySql-python</p>
<pre><code>错误1：Microsoft Visual C++ 14.0 is required. 
升级.NET Framework 版本到4.5.1
从错误提示的url下载，下载后安装visualcppbuildtools_full
</code></pre><p>3.安装mysql connector, 下载地址：<a href="https://dev.mysql.com/downloads/connector/python/" target="_blank" rel="external">https://dev.mysql.com/downloads/connector/python/</a><br>我的系统为64， 下载的是mysql-connector-python-2.1.5-py3.4-winx64，还是报错，后来注意到寻找的目录是Program Files (x86)，又下了个32位的安装。错误过去了。但是又来新的错误：</p>
<pre><code>LINK : error LNK2001: unresolved external symbol _DllMainCRTStartup
build\lib.win-amd64-3.5\_mysql.cp35-win_amd64.pyd : fatal error LNK1120: 56 unresolved externalserror: command &apos;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\BIN\\x86_amd64\\link.exe&apos; failed with exit status 1120
</code></pre><p>5.安装第三方包pymysql。下载地址：<a href="https://pypi.python.org/pypi/PyMySQL#downloads" target="_blank" rel="external">https://pypi.python.org/pypi/PyMySQL#downloads</a><br>下载PyMySQL-0.7.11-py2.py3-none-any.whl，使用pip install PyMySQL-0.7.11-py2.py3-none-any.whl 即可，再执行pip install MySql-python就成功了</p>
<p>python引入mysql方法：<br>import pymysql as MySQLdb</p>
<p>首次尝试python的web开发：<br>源码:</p>
<pre><code>db.py:

    host=&quot;127.0.0.1&quot;
    user=&quot;root&quot;
    password=&quot;123456&quot;
    charset=&quot;utf8&quot;
    database=&quot;test&quot;
    port=3306

service.py:

    import pymysql as MySQLdb
    import sys
    import db
    class AService(object):
        def getA(self,id):
            conn = MySQLdb.connect(host=db.host,user=db.user,passwd=db.password,port=db.port,db=db.database,charset=db.charset)
            result=[]
            try:
                cursor = conn.cursor()
                cursor.execute(&quot;select id,sname from student where id=&apos;%d&apos;&quot;%(id))
                result = cursor.fetchone()

            finally:
                cursor.close()
                conn.close()
            return result

hello.py:

    from flask import Flask, jsonify
    import service
    import sys

    app = Flask(__name__)

    @app.route(&apos;/service&apos;, methods=[&apos;GET&apos;])
    def getSerivice():
            mservice=service.AService()
            result = mservice.getA(1)
            json = &quot;&quot;
            json +=&quot;{&quot;
            json +=&quot;&apos;id&apos;:&quot;+str(result[0])+&quot;,&quot;
            json +=&quot;&apos;sname&apos;:&apos;&quot;+result[1]+&quot;&apos;&quot;
            json +=&quot;}&quot;
            return json;
    if __name__==&quot;__main__&quot;:
        app.run()
</code></pre><p>在cmd中执行 python hello.py<br>打开浏览器 <a href="http://localhost:5000" target="_blank" rel="external">http://localhost:5000</a><br>出现 {‘id’:1,’sname’:’yizeyuan’}<br>成功！</p>
<p>这个例子太简单，实际上可以像平时javaweb开发一样使用MVC模式，上面的hello.py是控制器，service.py是model,而view我们同样可以使用html，Flask使用jinja2渲染<br>使用方式：<br>    from flask import Flask, request, render_template #加上render_template<br>当请求处理完成返回一个模板以及变量<br>    return render_template(‘index.html’, message=’欢迎使用flask’, username=’yizeyuan’)<br>首页的html代码为：</p>
<pre><code>&lt;html&gt;
    &lt;head&gt;
      &lt;title&gt;index&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;h1 style=&quot;font-style:italic&quot;&gt;Home&lt;/h1&gt;
      {{message}}
      欢迎你，{{username}}
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>很像angularjs有木有！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于用Python开发一个Web框架十分容易，所以Python有上百个开源的Web框架，当下流行的是Flask,Django等&lt;br&gt;Flask是一个使用 Python 编写的轻量级 Web 应用框架。其 WSGI 工具箱采用 Werkzeug ，模板引擎则使用 Jinja2 。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://yzy755.github.io/tags/python/"/>
    
      <category term="web开发" scheme="http://yzy755.github.io/tags/web%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow搭建和TensorBoard可视化的使用</title>
    <link href="http://yzy755.github.io/2017/05/09/TensorFlow%E6%90%AD%E5%BB%BA%E5%92%8CTensorBoard%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yzy755.github.io/2017/05/09/TensorFlow搭建和TensorBoard可视化的使用/</id>
    <published>2017-05-09T10:17:53.000Z</published>
    <updated>2017-05-25T02:04:36.475Z</updated>
    
    <content type="html"><![CDATA[<p>TensorFlow™ 是一个采用数据流图（data flow graphs），用于数值计算的开源软件库。节点（Nodes）在图中表示数学操作，图中的线（edges）则表示在节点间相互联系的多维数据数组，即张量（tensor）。它灵活的架构让你可以在多种平台上展开计算，例如台式计算机中的一个或多个CPU（或GPU），服务器，移动设备等等。TensorFlow 最初由Google大脑小组（隶属于Google机器智能研究机构）的研究员和工程师们开发出来，用于机器学习和深度神经网络方面的研究，但这个系统的通用性使其也可广泛用于其他计算领域。<br><a id="more"></a><br>1.Centos6.x默认使用的Python版本为2.6.6，而TensorFlow需要的Python版本起步为2.7以上，首先升级Python版本，已2.7.3为例：</p>
<pre><code>#  wget https://www.python.org/ftp/python/2.7.3/Python-2.7.3.tgz
#  tar -xvjf Python-2.7.3.tar.bz2
#  mkdir /usr/local/python27
#  ./configure --prefix=/usr/local/python27
#  Make
#  make install
</code></pre><p>以上安装好了2.7.3，但此时没有覆盖老版本，再将原来/usr/bin/python链接改为别的名字：</p>
<pre><code># mv /usr/bin/python /usr/bin/python_old
</code></pre><p>再建立新版本python的软链接：</p>
<pre><code># ln -s /usr/local/python27/bin/python2.7 /usr/bin/python
</code></pre><p>再输入 </p>
<pre><code># python --version
</code></pre><p>会出现2.7.3则说明成功</p>
<p>但是，基于Python编写的yum不兼容2.7以上版本，所以修改yum命令指定的Python版本:</p>
<pre><code># vi /usr/bin/yum
</code></pre><p>将第一句</p>
<pre><code># !/usr/bin/python 改为 # !/usr/bin/python2.6 即可
</code></pre><p>安装setuptool,后续操作要运行很多py文件，没他不行</p>
<pre><code># wget --no-check-certificate https://pypi.python.org/packages/source/s/setuptools/setuptools-1.4.2.tar.gz
# tar -xvf setuptools-1.4.2.tar.gz
# cd setuptools-1.4.2
# python setup.py install
</code></pre><p>2.升级pip，Python Index Package。类似linux下的yum，安装并管理python软件包，Python升级了版本pip也要升级相应版本，下载pip9.0.1</p>
<pre><code>#  wget https://pypi.python.org/packages/11/b6/abcb525026a4be042b486df43905d6893fb04f05aac21c32c638e939e447/pip-9.0.1.tar.gz# md5=35f01da33009719497f01a4ba69d63c9
# tar zxvf pip-9.0.1.tar.gz
#  cd pip-9.0.1
#  python setup.py install
</code></pre><p>3.执行：</p>
<pre><code># pip install --upgrade https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.8.0-cp27-none-linux_x86_64.whl
</code></pre><p>正常情况下pip会自动下载依赖包并安装，但是也有可能会报依赖没有找到的情况，如果出现此情况见附录，在最后可能会报错，在执行一次就好了</p>
<p>4.然后输入命令：</p>
<pre><code># python
</code></pre><p>出现 &gt;&gt;&gt; 再输入：<br>improt ssl<br>再输入import tensorflow as tf 会出现/lib64/libc.so.6: version `GLIBC_2.15’ not found 的错误，这是由于tensorflow0.80版本编译的时候使用GLIBC_2.15，系统自带的是GLIBC_2.12，所以报错了。<br>安装gcc</p>
<pre><code># yum install gcc
</code></pre><p>下载c++库glibc</p>
<pre><code># wget http://ftp.gnu.org/pub/gnu/glibc/glibc-2.17.tar.xz
# xz -d glibc-2.17.tar.xz
# tar -xvf glibc-2.17.tar
# cd glibc-2.17
# mkdir build
# cd build
# ../configure --prefix=/usr --disable-profile --enable-add-ons         --with-headers=/usr/include --with-binutils=/usr/bin  
# make &amp;&amp; make install
</code></pre><p>输入strings /lib64/libc.so.6|grep GLIBC发现有我们的2.15版本</p>
<p>5.再执行第5步，发现报/usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.14’ not found的错误，输入命令strings /usr/lib64/libstdc++.so.6 | grep GLIBCXX 发现没有支持3.4.14版本，去csdn下载一个高版本的libstdc++.so.6，比如说libstdc++.so.6.0.20，网址：<a href="http://download.csdn.net/download/arackethis/8395651，将文件放到/usr/lib64/下，在该目录下执行命令：" target="_blank" rel="external">http://download.csdn.net/download/arackethis/8395651，将文件放到/usr/lib64/下，在该目录下执行命令：</a></p>
<pre><code># chmod +x libstdc++.so.6.0.20
# rm libstdc++.so.6
# ln -s libstdc++.so.6.0.20 libstdc++.so.6
# strings /usr/lib64/libstdc++.so.6 | grep GLIBCXX
</code></pre><p>发现支持了3.4.14版本<br> 再执行第五步发现没有报错了，就此TensorFlow搭建成功</p>
<p>Ps:第三步中依赖报错的解决方式<br>1.安装six</p>
<pre><code># wget     https://pypi.python.org/packages/c8/0a/b6723e1bc4c516cb687841499455a8505b446    07ab535    be01091c0f24f079/six-1.10.0-py2.py3-none-any.whl#md5=3ab558cf5d4f7a72611d5        9a81a31    5dc8  #下载指令
# pip install six-1.10.0-py2.py3-none-any.whl  #安装指令
</code></pre><p>2.安装numpy，下载地址：<a href="http://jaist.dl.sourceforge.net/project/numpy/NumPy/1.11.2rc1/，解压使用python安装" target="_blank" rel="external">http://jaist.dl.sourceforge.net/project/numpy/NumPy/1.11.2rc1/，解压使用python安装</a><br>3.安装protobuf</p>
<pre><code>#wget             https://pypi.python.org/packages/0f/53/e43b226f83a5a542c16695e9624b7bd2bde4ad016776c    7c3233901bcf5b4/protobuf-3.2.0-cp27-cp27mu-manylinux1_x86_64.whl#md5=a1a807fee3a        7df784e171837853cc29d  #下载指令

# pip install protobuf-3.2.0-cp27-cp27mu-manylinux1_x86_64.whl 
</code></pre><p>这一步可能会用pip安装　提示找不到ssl模块，参考<a href="http://blog.csdn.net/qq_25560423/article/details/62055497" target="_blank" rel="external">http://blog.csdn.net/qq_25560423/article/details/62055497</a></p>
<p>Ps:正文中第二步pip另外的安装方式：pip安装命令：yum install  python-pip python-devel</p>
<p>补充TensorFlow中TensorBorad可视化组件的使用：<br>如何更直观的观察数据在神经网络中的变化，或是已经构建的神经网络的结构，Tensorflow自带了可视化模块Tensorboard，并且能更直观的看见整个神经网络的结构。</p>
<p>TensorBoard的输入是tensorflow保存summary data的日志文件。日志文件名的形式如：events.out.tfevents.1467809796.lei-All-Series 或 events.out.tfevents.1467809800.lei-All-Series。TensorBoard可读的summary data有scalar，images，audio，histogram和graph。那么怎么把这些summary data保存在日志文件中呢？<br>数值如学习率，损失函数用scalar_summary函数。tf.scalar_summary(节点名称，获取的数据)<br>    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))<br>    tf.scalar_summary(‘accuracy’, accuracy)  </p>
<p>各层网络权重，偏置的分布，用histogram_summary函数<br>    preactivate = tf.matmul(input_tensor, weights) + biases<br>    tf.histogram_summary(layer_name + ‘/pre_activations’, preactivate) </p>
<p>其他几种summary data也是同样的方式获取，只是对应的获取函数名称换一下。这些获取summary data函数节点和graph是独立的，调用的时候也需要运行session。当需要获取的数据较多的时候，我们一个一个去保存获取到的数据，以及一个一个去运行会显得比较麻烦。tensorflow提供了一个简单的方法，就是合并所有的summary data的获取函数，保存和运行只对一个对象进行操作。比如，写入默认路径中，比如/tmp/mnist_logs (by default)<br>    merged = tf.merge_all_summaries()<br>    train_writer = tf.train.SummaryWriter(FLAGS.summaries_dir + ‘/train’, sess.graph)<br>    test_writer = tf.train.SummaryWriter(FLAGS.summaries_dir + ‘/test’)  </p>
<p>SummaryWriter从tensorflow获取summary data，然后保存到指定路径的日志文件中。以上是在建立graph的过程中，接下来执行，每隔一定step，写入网络参数到默认路径中，形成最开始的文件：events.out.tfevents.1467809796.lei-All-Series 或 events.out.tfevents.1467809800.lei-All-Series。<br>    for i in range(FLAGS.max_steps):<br>    if i % 10 == 0:  # Record summaries and test-set accuracy<br>    summary, acc = sess.run([merged, accuracy], feed_dict=feed_dict(False))<br>          test_writer.add<em>summary(summary, i)<br>          print(‘Accuracy at step %s: %s’ % (i, acc))<br>        else: # Record train set summarieis, and train<br>          summary, </em> = sess.run([merged, train_step], feed_dict=feed_dict(True))<br>          train_writer.add_summary(summary, i)  </p>
<p>源码：<br>    ‘’’<br>    Created on May 9, 2017</p>
<pre><code>@author: root
&apos;&apos;&apos;
# Copyright 2015 The TensorFlow Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the &apos;License&apos;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &apos;AS IS&apos; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================
&quot;&quot;&quot;A simple MNIST classifier which displays summaries in TensorBoard.
 This is an unimpressive MNIST model, but it is a good example of using
tf.name_scope to make a graph legible in the TensorBoard graph explorer, and of
naming summary tags so that they are grouped meaningfully in TensorBoard.
It demonstrates the functionality of every TensorBoard dashboard.
&quot;&quot;&quot;


import tensorflow as tf

from tensorflow.examples.tutorials.mnist import input_data

flags = tf.app.flags
FLAGS = flags.FLAGS
flags.DEFINE_boolean(&apos;fake_data&apos;, False, &apos;If true, uses fake data &apos;
                     &apos;for unit testing.&apos;)
flags.DEFINE_integer(&apos;max_steps&apos;, 1000, &apos;Number of steps to run trainer.&apos;)
flags.DEFINE_float(&apos;learning_rate&apos;, 0.001, &apos;Initial learning rate.&apos;)
flags.DEFINE_float(&apos;dropout&apos;, 0.9, &apos;Keep probability for training dropout.&apos;)
flags.DEFINE_string(&apos;data_dir&apos;, &apos;/tmp/data&apos;, &apos;Directory for storing data&apos;)
flags.DEFINE_string(&apos;summaries_dir&apos;, &apos;/tmp/mnist_logs&apos;, &apos;Summaries directory&apos;)


def train():
  # Import data
  mnist = input_data.read_data_sets(FLAGS.data_dir,
                                    one_hot=True,
                                    fake_data=FLAGS.fake_data)

  sess = tf.InteractiveSession()

  # Create a multilayer model.

  # Input placehoolders
  with tf.name_scope(&apos;input&apos;):
    x = tf.placeholder(tf.float32, [None, 784], name=&apos;x-input&apos;)
    y_ = tf.placeholder(tf.float32, [None, 10], name=&apos;y-input&apos;)

  with tf.name_scope(&apos;input_reshape&apos;):
    image_shaped_input = tf.reshape(x, [-1, 28, 28, 1])
    tf.image_summary(&apos;input&apos;, image_shaped_input, 10)

  # We can&apos;t initialize these variables to 0 - the network will get stuck.
  def weight_variable(shape):
    &quot;&quot;&quot;Create a weight variable with appropriate initialization.&quot;&quot;&quot;
    initial = tf.truncated_normal(shape, stddev=0.1)
    return tf.Variable(initial)

  def bias_variable(shape):
    &quot;&quot;&quot;Create a bias variable with appropriate initialization.&quot;&quot;&quot;
    initial = tf.constant(0.1, shape=shape)
    return tf.Variable(initial)

  def variable_summaries(var, name):
    &quot;&quot;&quot;Attach a lot of summaries to a Tensor.&quot;&quot;&quot;
    with tf.name_scope(&apos;summaries&apos;):
      mean = tf.reduce_mean(var)
      tf.scalar_summary(&apos;mean/&apos; + name, mean)
      with tf.name_scope(&apos;stddev&apos;):
        stddev = tf.sqrt(tf.reduce_sum(tf.square(var - mean)))
      tf.scalar_summary(&apos;sttdev/&apos; + name, stddev)
      tf.scalar_summary(&apos;max/&apos; + name, tf.reduce_max(var))
      tf.scalar_summary(&apos;min/&apos; + name, tf.reduce_min(var))
      tf.histogram_summary(name, var)

  def nn_layer(input_tensor, input_dim, output_dim, layer_name, act=tf.nn.relu):
    &quot;&quot;&quot;Reusable code for making a simple neural net layer.
    It does a matrix multiply, bias add, and then uses relu to nonlinearize.
    It also sets up name scoping so that the resultant graph is easy to read,
    and adds a number of summary ops.
    &quot;&quot;&quot;
    # Adding a name scope ensures logical grouping of the layers in the graph.
    with tf.name_scope(layer_name):
      # This Variable will hold the state of the weights for the layer
      with tf.name_scope(&apos;weights&apos;):
        weights = weight_variable([input_dim, output_dim])
        variable_summaries(weights, layer_name + &apos;/weights&apos;)
      with tf.name_scope(&apos;biases&apos;):
        biases = bias_variable([output_dim])
        variable_summaries(biases, layer_name + &apos;/biases&apos;)
      with tf.name_scope(&apos;Wx_plus_b&apos;):
        preactivate = tf.matmul(input_tensor, weights) + biases
        tf.histogram_summary(layer_name + &apos;/pre_activations&apos;, preactivate)
      activations = act(preactivate, &apos;activation&apos;)
      tf.histogram_summary(layer_name + &apos;/activations&apos;, activations)
      return activations

  hidden1 = nn_layer(x, 784, 500, &apos;layer1&apos;)

  with tf.name_scope(&apos;dropout&apos;):
    keep_prob = tf.placeholder(tf.float32)
    tf.scalar_summary(&apos;dropout_keep_probability&apos;, keep_prob)
    dropped = tf.nn.dropout(hidden1, keep_prob)

  y = nn_layer(dropped, 500, 10, &apos;layer2&apos;, act=tf.nn.softmax)

  with tf.name_scope(&apos;cross_entropy&apos;):
    diff = y_ * tf.log(y)
    with tf.name_scope(&apos;total&apos;):
      cross_entropy = -tf.reduce_mean(diff)
    tf.scalar_summary(&apos;cross entropy&apos;, cross_entropy)

  with tf.name_scope(&apos;train&apos;):
    train_step = tf.train.AdamOptimizer(FLAGS.learning_rate).minimize(
        cross_entropy)

  with tf.name_scope(&apos;accuracy&apos;):
    with tf.name_scope(&apos;correct_prediction&apos;):
      correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))
    with tf.name_scope(&apos;accuracy&apos;):
      accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
    tf.scalar_summary(&apos;accuracy&apos;, accuracy)

  # Merge all the summaries and write them out to /tmp/mnist_logs (by default)
  merged = tf.merge_all_summaries()
  train_writer = tf.train.SummaryWriter(FLAGS.summaries_dir + &apos;/train&apos;,
                                        sess.graph)
  test_writer = tf.train.SummaryWriter(FLAGS.summaries_dir + &apos;/test&apos;)
  tf.initialize_all_variables().run()

  # Train the model, and also write summaries.
  # Every 10th step, measure test-set accuracy, and write test summaries
  # All other steps, run train_step on training data, &amp; add training summaries

  def feed_dict(train):
    &quot;&quot;&quot;Make a TensorFlow feed_dict: maps data onto Tensor placeholders.&quot;&quot;&quot;
    if train or FLAGS.fake_data:
      xs, ys = mnist.train.next_batch(100, fake_data=FLAGS.fake_data)
      k = FLAGS.dropout
    else:
      xs, ys = mnist.test.images, mnist.test.labels
      k = 1.0
    return {x: xs, y_: ys, keep_prob: k}

  for i in range(FLAGS.max_steps):
    if i % 10 == 0:  # Record summaries and test-set accuracy
      summary, acc = sess.run([merged, accuracy], feed_dict=feed_dict(False))
      test_writer.add_summary(summary, i)
      print(&apos;Accuracy at step %s: %s&apos; % (i, acc))
    else:  # Record train set summaries, and train
      if i % 100 == 99:  # Record execution stats
        run_options = tf.RunOptions(trace_level=1)
        run_metadata = tf.RunMetadata()
        summary, _ = sess.run([merged, train_step],
                              feed_dict=feed_dict(True),
                              options=run_options,
                              run_metadata=run_metadata)
        train_writer.add_run_metadata(run_metadata, &apos;step%d&apos; % i)
        train_writer.add_summary(summary, i)
        print(&apos;Adding run metadata for&apos;, i)
      else:  # Record a summary
        summary, _ = sess.run([merged, train_step], feed_dict=feed_dict(True))
        train_writer.add_summary(summary, i)


def main(_):
  if tf.gfile.Exists(FLAGS.summaries_dir):
    tf.gfile.DeleteRecursively(FLAGS.summaries_dir)
  tf.gfile.MakeDirs(FLAGS.summaries_dir)
  train()


if __name__ == &apos;__main__&apos;:
  tf.app.run()
</code></pre><p>这段源码执行后会在/tmp目录下生成data目录和mnist_logs目录，data是需要分析的数据，mnist_logs是分析的日志，调用TensorBoard可视化运行结果<br>    tensorboard –logdir=/tmp/mnist_logs/train/ </p>
<p>打开链接 <a href="http://127.0.0.0:6006" target="_blank" rel="external">http://127.0.0.0:6006</a> 即可看到效果。参考 <a href="http://blog.csdn.net/helei001/article/details/51842531" target="_blank" rel="external">http://blog.csdn.net/helei001/article/details/51842531</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TensorFlow™ 是一个采用数据流图（data flow graphs），用于数值计算的开源软件库。节点（Nodes）在图中表示数学操作，图中的线（edges）则表示在节点间相互联系的多维数据数组，即张量（tensor）。它灵活的架构让你可以在多种平台上展开计算，例如台式计算机中的一个或多个CPU（或GPU），服务器，移动设备等等。TensorFlow 最初由Google大脑小组（隶属于Google机器智能研究机构）的研究员和工程师们开发出来，用于机器学习和深度神经网络方面的研究，但这个系统的通用性使其也可广泛用于其他计算领域。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://yzy755.github.io/tags/python/"/>
    
      <category term="AI" scheme="http://yzy755.github.io/tags/AI/"/>
    
      <category term="TensorFlow" scheme="http://yzy755.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>superset搭建和简单使用</title>
    <link href="http://yzy755.github.io/2017/05/09/superset%E6%90%AD%E5%BB%BA%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://yzy755.github.io/2017/05/09/superset搭建和简单使用/</id>
    <published>2017-05-09T09:25:53.000Z</published>
    <updated>2017-05-10T09:25:15.697Z</updated>
    
    <content type="html"><![CDATA[<p>Superset 是 Airbnb （知名在线房屋短租公司）开源的数据探查与可视化平台（曾用名 Panoramix、Caravel ），该工具在可视化、易用性和交互性上非常有特色，用户可以轻松对数据进行可视化分析。<br><a id="more"></a><br>可先直接执行第二步<br>1./usr/local/python27/bin/pip install –upgrade virtualenv<br>pip install –upgrade distribute<br>virtualenv myenv –distribute</p>
<p>2./usr/local/python27/bin/pip install –upgrade superset<br>提示command ‘gcc’ failed with exit status 1的错误</p>
<pre><code># yum install gcc-c++
# yum install postgresql-devel
# yum -y install gcc gcc-c++ kernel-devel
# yum -y install python-devel libxslt-devel libffi-devel openssl-devel
# yum install openssl-devel python-devel python-sphinx
</code></pre><p>3.安装MySQL-python-1.2.3.tar.gz<br>安装过程中会出现mysql config not found</p>
<pre><code># yum install mysql-devel
</code></pre><p>执行find / -name mysql_config在/usr/bin下就出现了这个配置文件，将这个文件复制到MySQL-python-1.2.3解压目录中，再安装即可,报错就执行</p>
<pre><code># yum install gcc-c++ python-devel.x86_64 cyrus-sasl-devel.x86_64
# pip install thrift_sasl
# pip install sasl
</code></pre><p>再安装即可</p>
<p>4.成功之后将Python的bin目录下的fabmanager、superset、gunicorn文件放到/usr/bin目录下或者建立软连接</p>
<pre><code># fabmanager create-admin --app superset
</code></pre><p>报错No module named _sqlite3或者No module named pysqlite2或者其他，需要安装sqlite-devel之后，<br>执行yum install sqlite-devel，重新编译安装Python即可。</p>
<pre><code># superset db upgrade

# superset load_examples

# superset init

# superset runserver -p 8088 -a 0.0.0.0
</code></pre><p>会报bash: gunicorn: command not found，执行find / -name gunicorn 查找一下这个命令放哪儿了，然后将它放到/usr/bin中去</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Superset 是 Airbnb （知名在线房屋短租公司）开源的数据探查与可视化平台（曾用名 Panoramix、Caravel ），该工具在可视化、易用性和交互性上非常有特色，用户可以轻松对数据进行可视化分析。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://yzy755.github.io/tags/python/"/>
    
      <category term="数据库分析" scheme="http://yzy755.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>使用开源软件快速搭建数据分析平台</title>
    <link href="http://yzy755.github.io/2017/05/02/%E4%BD%BF%E7%94%A8%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%B9%B3%E5%8F%B0/"/>
    <id>http://yzy755.github.io/2017/05/02/使用开源软件快速搭建数据分析平台/</id>
    <published>2017-05-02T08:38:20.000Z</published>
    <updated>2017-05-03T03:22:07.959Z</updated>
    
    <content type="html"><![CDATA[<p>部门成立了大数据项目组，技术选型已经由其项目组长完成，但是后台开发人员不足，请求我帮助搭建一个大数据分析平台</p>
<a id="more"></a>
<p>整篇文章都是来源于<a href="https://my.oschina.net/taogang/blog/630632" target="_blank" rel="external">https://my.oschina.net/taogang/blog/630632</a> ，感谢伟大的开源精神，也就是按照文章介绍的搭建步骤做一点总结，填了两个小坑</p>
<p>1.安装nodejs<br>2.安装git<br>3.安装bower，命令：npm install -g bower<br>4.安装Python环境，anaconda里面集成了很多关于python科学计算的第三方库，安装方便。下载地址：<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="external">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a><br>5.进入源码解压后的目录，进入package\static文件夹，创建名为bower_components的文件夹<br>6.打开cmd使用babel进行jsf的编译，依次执行命令：<br>    a)npm install -g babel-cli<br>    b)npm install babel-preset-es2015 –save<br>    c)npm install babel-preset-react –save<br>    d)babel –presets es2015,react –watch js/ –out-dir lib/<br>7.使用bower安装客户端的所有依赖,命令如下：<br>    a)bower install<br>8.回到package文件夹，执行命令：python main.py</p>
<p>Ps:拓展时若需要更多的开源js组件，可以打开bower.json，在dependency下增加相应的组件名和版本号，然后执行bower install即可。</p>
<p>为以后的大数据方向积累一丁点- -！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;部门成立了大数据项目组，技术选型已经由其项目组长完成，但是后台开发人员不足，请求我帮助搭建一个大数据分析平台&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://yzy755.github.io/tags/python/"/>
    
      <category term="数据分析" scheme="http://yzy755.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>抢购秒杀功能的并发设计</title>
    <link href="http://yzy755.github.io/2017/04/20/%E6%8A%A2%E8%B4%AD%E7%A7%92%E6%9D%80%E5%8A%9F%E8%83%BD%E7%9A%84%E5%B9%B6%E5%8F%91%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yzy755.github.io/2017/04/20/抢购秒杀功能的并发设计/</id>
    <published>2017-04-20T06:54:36.000Z</published>
    <updated>2018-09-04T09:19:14.904Z</updated>
    
    <content type="html"><![CDATA[<p>最近云课堂系统出现了购买商品出现并发数据错乱的问题，这是类似电商网站所不能接受的现象，果断重构该模块的业务代码刻不容缓- -！<br><a id="more"></a><br>其实说到底就是多线程并发请求的数据一致性的问题，当然也有很多处理方法，最先想到的肯定是锁（synchronized），可以明确的是加锁是肯定可以解决该问题的，但是所谓互联网项目，若有朝一日并发请求量有的突破，这种线程阻塞的访问方式肯定是体验糟糕的，所以我想试试其他方式。</p>
<p>首先想到的就是基于单线程，多路复用io（mutiplexing）模式的redis，结合我们的业务是关于众筹抢购的，用户占用众筹名额的记录用redis记录非常适用：<br>redis提供了 INCR key 方法，下面是该方法官方的解释：<br>    对存储在指定key的数值执行原子的加1操作。<br>    如果指定的key不存在，那么在执行incr操作之前，会先将它的值设定为0。<br>    如果指定的key中存储的值不是字符串类型（fix：）或者存储的字符串类型不能表示为一个整数，<br>    那么执行这个命令时服务器会返回一个错误(eq:(error) ERR value is not an integer or out of range)。<br>    这个操作仅限于64位的有符号整型数据。<br>注意看，是原子的加1操作，所以记录众筹的数量后，不管并发多少用户抢购众筹，众筹数都是原子加1，不会出现少加从而出现超卖的情况，加上我们业务控制到达限额数量后停止购买功能。<br>有个问题是用户抢占了名额后迟迟不付款，所以我利用了原先就有的检查未付款订单过期的任务，在检查到未支付的众筹订单过期后使用 DECRBY key decrement 做减操作，该方法官方的解释：<br>    将key对应的数字减decrement。如果key不存在，操作之前，key就会被置为0。如果key的value类型错误或者是个不能表示成数字的字符串，就返回错误。这个操作最多支持64位有符号的正型数字。<br>当热，值的添加和删除肯定也是要用到的，参考官方文档 <a href="http://www.redis.cn/" target="_blank" rel="external">http://www.redis.cn/</a><br>这样就释放的未支付抢占的名额，同样这是原子操作。这样整体就保持了高效和线程安全。</p>
<p>一些想法（一些摘抄- -）：<br>    1.Redis为什么使用单进程单线程方式也这么快？<br>        Redis采用的是基于内存的采用的是单进程单线程模型的KV数据库，由C语言编写。官方提供的数据是可以达到100000+的qps。这个数据不比采用单进程多线程的同样基于内存的KV数据库Memcached差。<br>        Redis快的主要原因是：</p>
<pre><code>        完全基于内存
        数据结构简单，对数据操作也简单
        使用多路 I/O 复用模型

        多路 I/O 复用模型是利用select、poll、epoll可以同时监察多个流的 I/O 事件的能力，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有I/O事件时，就从阻塞态中唤醒，于是程序就会轮询一遍所有的流（epoll是只轮询那些真正发出了事件的流），并且只依次顺序的处理就绪的流，这种做法就避免了大量的无用操作。这里“多路”指的是多个网络连接，“复用”指的是复用同一个线程。采用多路 I/O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络IO的时间消耗），且Redis在内存中操作数据的速度非常快（内存内的操作不会成为这里的性能瓶颈），主要以上两点造就了Redis具有很高的吞吐量。
2.volatile 容易掉的坑
    在众筹功能上，占用的众筹数是一个实体变量，我就想volatile关键字不是说是轻量级的synchronized吗，想直接用volatile修饰，其实不然，与 synchronized 块相比，volatile 变量所需的编码较少，并且运行时开销也较少，但是它所能实现的功能也仅是 synchronized的一部分

    锁提供了两种主要特性：互斥（mutual exclusion） 和可见性（visibility）。互斥即一次只允许一个线程持有某个特定的锁，因此可使用该特性实现对共享数据的协调访问协议，这样，一次就只有一个线程能够使用该共享数据。可见性要更加复杂一些，它必须确保释放锁之前对共享数据做出的更改对于随后获得该锁的另一个线程是可见的 —— 如果没有同步机制提供的这种可见性保证，线程看到的共享变量可能是修改前的值或不一致的值，这将引发许多严重问题

    Volatile 变量具有 synchronized 的可见性特性，但是不具备原子特性。这就是说线程能够自动发现 volatile 变量的最新值。Volatile 变量可用于提供线程安全，但是只能应用于非常有限的一组用例：多个变量之间或者某个变量的当前值与修改后值之间没有约束。因此，单独使用 volatile 还不足以实现计数器、互斥锁或任何具有与多个变量相关的不变式（Invariants）的类（例如 “start &lt;=end”）。

    出于简易性或可伸缩性的考虑，您可能倾向于使用 volatile 变量而不是锁。当使用 volatile 变量而非锁时，某些习惯用法（idiom）更加易于编码和阅读。此外，volatile 变量不会像锁那样造成线程阻塞，因此也很少造成可伸缩性问题。在某些情况下，如果读操作远远大于写操作，volatile 变量还可以提供优于锁的性能优势。

    要使 volatile 变量提供理想的线程安全，必须同时满足下面两个条件：
    1.对变量的写操作不依赖于当前值。
    2.该变量没有包含在具有其他变量的不变式中。

    实际上，这些条件表明，可以被写入 volatile 变量的这些有效值独立于任何程序的状态，包括变量的当前状态。
    第一个条件的限制使 volatile 变量不能用作线程安全计数器。虽然增量操作（x++）看上去类似一个单独操作，实际上它是一个由读取－修改－写入操作序列组成的组合操作，必须以原子方式执行，而 volatile 不能提供必须的原子特性。实现正确的操作需要使 x 的值在操作期间保持不变，而 volatile 变量无法实现这点。（然而，如果将值调整为只从单个线程写入，那么可以忽略第一个条件。）
    大多数编程情形都会与这两个条件的其中之一冲突，使得 volatile 变量不能像 synchronized 那样普遍适用于实现线程安全。清单 1 显示了一个非线程安全的数值范围类。它包含了一个不变式 —— 下界总是小于或等于上界。

    所以，还是离volatile远点吧，要始终牢记使用 volatile 的限制 —— 只有在状态真正独立于程序内其他内容时才能使用 volatile。

    贴一段我的测试代码

    @Test
    public void setSynchronizedValue() {
        final Jedis superjedis = getJedis();
        superjedis.set(&quot;age&quot;, &quot;1&quot;);
        for (int i = 0; i &lt; 50; i++) {
            new Thread(new Runnable() {
                Jedis jedis = getJedis();
                @Override
                public void run() {
                    System.out.println(jedis.incr(&quot;age&quot;));
                }
            }).start();
        }

    }

    @Test
    public void setNormalValue() {
        for (int i = 0; i &lt; 50; i++) {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    // TODO Auto-generated method stub
                    int currAge = age; // age 使用volatile static全局定义
                    System.out.println(++ currAge);
                    testInt = currAge;
                }
            }).start();
        }
    }

    运行后可以看出，程序运行的结果是不确定的，这说明了++ currAge并不是原子级别的操作。

    原因是声明为volatile的变量若与自身相关，如以下的声明方式：n=n+1,n++等，那么声明为volatile的变量就不起作用，也就是说关键字volatile无效。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近云课堂系统出现了购买商品出现并发数据错乱的问题，这是类似电商网站所不能接受的现象，果断重构该模块的业务代码刻不容缓- -！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工作实践" scheme="http://yzy755.github.io/categories/%E5%B7%A5%E4%BD%9C%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="redis" scheme="http://yzy755.github.io/tags/redis/"/>
    
      <category term="线程安全" scheme="http://yzy755.github.io/tags/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>redis启动错误</title>
    <link href="http://yzy755.github.io/2017/04/18/redis%E5%90%AF%E5%8A%A8%E9%94%99%E8%AF%AF/"/>
    <id>http://yzy755.github.io/2017/04/18/redis启动错误/</id>
    <published>2017-04-18T03:11:36.000Z</published>
    <updated>2017-04-18T03:36:59.796Z</updated>
    
    <content type="html"><![CDATA[<p>Creating Server TCP listening socket *:6379: bind:Unknown error<br><a id="more"></a><br>今天遇到的问题，摘抄下网上的解决方案<br>按顺序输入如下命令就可以连接成功</p>
<ol>
<li>redis-cli.exe</li>
<li>shutdown</li>
<li>exit</li>
<li>redis-server.exe redis.windows.conf</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Creating Server TCP listening socket *:6379: bind:Unknown error&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="redis" scheme="http://yzy755.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>第三方快捷登录开发后对oauth的认识</title>
    <link href="http://yzy755.github.io/2017/04/13/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BF%AB%E6%8D%B7%E7%99%BB%E5%BD%95%E5%BC%80%E5%8F%91%E5%90%8E%E5%AF%B9oauth%E7%9A%84%E8%AE%A4%E8%AF%86/"/>
    <id>http://yzy755.github.io/2017/04/13/第三方快捷登录开发后对oauth的认识/</id>
    <published>2017-04-13T06:17:53.000Z</published>
    <updated>2017-04-13T03:56:09.779Z</updated>
    
    <content type="html"><![CDATA[<p>公司用户中心系统不仅需要传统的注册登录，主流的快捷登录肯定也必不可少，第三方快捷登录的流程和相应系统数据表的设计就先不记录了，主要摘抄一下网上对oauth的介绍和自己的理解<br><a id="more"></a><br>OAuth是一个关于授权（authorization）的开放网络标准—-&gt;open authorization </p>
<p>应用场景：</p>
<p>有一个”云冲印”的网站，可以将用户储存在Google的照片，冲印出来。用户为了使用该服务，必须让”云冲印”读取自己储存在Google上的照片。</p>
<p>问题是只有得到用户的授权，Google才会同意”云冲印”读取这些照片。那么，”云冲印”怎样获得用户的授权呢？<br>传统方法是，用户将自己的Google用户名和密码，告诉”云冲印”，后者就可以读取用户的照片了。这样的做法有以下几个严重的缺点。<br>（1）”云冲印”为了后续的服务，会保存用户的密码，这样很不安全。<br>（2）Google不得不部署密码登录，而我们知道，单纯的密码登录并不安全。<br>（3）”云冲印”拥有了获取用户储存在Google所有资料的权力，用户没法限制”云冲印”获得授权的范围和有效期。<br>（4）用户只有修改密码，才能收回赋予”云冲印”的权力。但是这样做，会使得其他所有获得用户授权的第三方应用程序全部失效。<br>（5）只要有一个第三方应用程序被破解，就会导致用户密码泄漏，以及所有被密码保护的数据泄漏。<br>OAuth就是为了解决上面这些问题而诞生的。<br>原理：<br>OAuth在”客户端”与”服务提供商”之间，设置了一个授权层（authorization layer）。”客户端”不能直接登录”服务提供商”，只能登录授权层，以此将用户与客户端区分开来。”客户端”登录授权层所用的令牌（token），与用户的密码不同。用户可以在登录的时候，指定授权层令牌的权限范围和有效期。<br>“客户端”登录授权层以后，”服务提供商”根据令牌的权限范围和有效期，向”客户端”开放用户储存的资料。</p>
<p>客户端的授权模式<br>客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。OAuth 2.0定义了四种授权方式。<br>授权码模式（authorization code）<br>简化模式（implicit）<br>密码模式（resource owner password credentials）<br>客户端模式（client credentials）</p>
<p>授权码模式<br>授权码模式（authorization code）是功能最完整、流程最严密的授权模式。它的特点就是通过客户端的后台服务器，与”服务提供商”的认证服务器进行互动。令牌对访问者是不可见的，后台是由httpclient获取令牌和所需信息的。<br><img src="/2017/04/13/第三方快捷登录开发后对oauth的认识/oauth1.png" alt="logo"></p>
<p>（A）用户访问客户端，后者将前者导向认证服务器。<br>（B）用户选择是否给予客户端授权。<br>（C）假设用户给予授权，认证服务器将用户导向客户端事先指定的”重定向URI”（redirection URI），同时附上一个授权码。<br>（D）客户端收到授权码，附上早先的”重定向URI”，向认证服务器申请令牌。这一步是在客户端的后台的服务器上完成的，对用户不可见。<br>（E）认证服务器核对了授权码和重定向URI，确认无误后，向客户端发送访问令牌（access token）和更新令牌（refresh token）。<br>……</p>
<p>A步骤中，客户端申请认证的URI，包含以下参数：<br>response_type：表示授权类型，必选项，此处的值固定为”code”<br>client_id：表示客户端的ID，必选项<br>redirect_uri：表示重定向URI，必选项<br>scope：表示申请的权限范围，可选项<br>state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。<br>示例url：<a href="http://openapi.qzone.qq.com/oauth/show?which=Login&amp;display=pc&amp;response_type=code&amp;client_id=101188868&amp;redirect_uri=account.booway.com.cn&amp;state=qqdenglu__http://yun.booway.com.cn/index.xhtml&amp;scope=get_user_info,get_info,add_t%20del_t%20add_pic_t,get_repost_list,get_other_info%20get_fanslist,get_idollist%20add_idol%20del_idol" target="_blank" rel="external">http://openapi.qzone.qq.com/oauth/show?which=Login&amp;display=pc&amp;response_type=code&amp;client_id=101188868&amp;redirect_uri=account.booway.com.cn&amp;state=qqdenglu__http://yun.booway.com.cn/index.xhtml&amp;scope=get_user_info,get_info,add_t%20del_t%20add_pic_t,get_repost_list,get_other_info%20get_fanslist,get_idollist%20add_idol%20del_idol</a><br>C步骤中，服务器回应客户端的URI，包含以下参数：<br>code：表示授权码，必选项。该码的有效期应该很短，通常设为10分钟，客户端只能使用该码一次，否则会被授权服务器拒绝。该码与客户端ID和重定向URI，是一一对应关系。<br>state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。<br>D步骤中，客户端向认证服务器申请令牌的HTTP请求，包含以下参数：<br>grant_type：表示使用的授权模式，必选项，此处的值固定为”authorization_code”。<br>code：表示上一步获得的授权码，必选项。<br>redirect_uri：表示重定向URI，必选项，且必须与A步骤中的该参数值保持一致。<br>client_id：表示客户端ID，必选项。<br>E步骤中，认证服务器发送的HTTP回复，包含以下参数：<br>access_token：表示访问令牌，必选项。<br>token_type：表示令牌类型，该值大小写不敏感，必选项，可以是bearer类型或mac类型。<br>expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。<br>refresh_token：表示更新令牌，用来获取下一次的访问令牌，可选项。<br>scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。<br><img src="/2017/04/13/第三方快捷登录开发后对oauth的认识/oauth2.png" alt="logo"><br>云计算应用实例：QQ第三方登录</p>
<p>简化模式<br>简化模式（implicit grant type）不通过第三方应用程序的服务器，直接在浏览器中向认证服务器申请令牌，跳过了”授权码”这个步骤，因此得名。所有步骤在浏览器中完成，令牌对访问者是可见的，且客户端不需要认证。<br><img src="/2017/04/13/第三方快捷登录开发后对oauth的认识/oauth3.png" alt="logo"></p>
<p>步骤如下：<br>（A）客户端将用户导向认证服务器。<br>（B）用户决定是否给于客户端授权。<br>（C）假设用户给予授权，认证服务器将用户导向客户端指定的”重定向URI”，并在URI的Hash部分包含了访问令牌。<br>（D）浏览器向资源服务器发出请求，其中不包括上一步收到的Hash值。<br>（E）资源服务器返回一个网页，其中包含的代码可以获取Hash值中的令牌。<br>（F）浏览器执行上一步获得的脚本，提取出令牌。<br>（G）浏览器将令牌发给客户端。<br>A步骤中，客户端发出的HTTP请求，包含以下参数：<br>response_type：表示授权类型，此处的值固定为”token”，必选项。<br>client_id：表示客户端的ID，必选项。<br>redirect_uri：表示重定向的URI，必选项。<br>scope：表示权限范围，可选项。<br>state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。<br>示例url：localhost:8080/booway_uums/openapi/oauth2/authorize-implicit?client_id=123&amp;response_type=token&amp;redirect_uri=oob<br>C步骤中，认证服务器回应客户端的URI，包含以下参数：<br>access_token：表示访问令牌，必选项。<br>token_type：表示令牌类型，该值大小写不敏感，必选项。可以是bearer类型或mac类型。<br>expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。<br>scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。<br>state：如果客户端的请求中包含这个参数，认证服务器的回应也必须一模一样包含这个参数。<br>示例url：<a href="http://localhost:8080/booway_uums/index/success.html#access_token=cb1617c64f1d6c2937c64b3599f2dd2&amp;state=null&amp;token_type=bearer&amp;expires_in=604800000&amp;scope=readCalendar" target="_blank" rel="external">http://localhost:8080/booway_uums/index/success.html#access_token=cb1617c64f1d6c2937c64b3599f2dd2&amp;state=null&amp;token_type=bearer&amp;expires_in=604800000&amp;scope=readCalendar</a><br><img src="/2017/04/13/第三方快捷登录开发后对oauth的认识/oauth4.png" alt="logo"></p>
<p>Access Token 类型介绍<br>OAuth2.0支持Bearer和MAC两种类型的Access Token。其中MAC类型只适用于API2.0接口：<br>Bearer 介绍<br>优点：<br>调用简单，不需要对请求进行签名。<br>缺点：<br>请求API需要使用https协议保证信息传输安全。<br>Access Token有效期一个月，过期后需要使用Refresh Token进行刷新。<br>MAC 介绍<br>优点：<br>不依赖https协议，无协议加密带来的性能开销。<br>Access Token长期有效，无需使用Refresh Token刷新。<br>缺点：<br>需要进行MAC计算。<br>默认情况下，会获得Bearer类型的Access Token。如果开发者想要获得MAC类型的Access Token，需要在获取token时指定’token_type’参数为’mac’。</p>
<p>MAC计算<br>标准化字符串<br>标准化的请求字符串，就是用指定的请求属性按照某个规则拼接而成的字符串。在这里，其实标准化请求字符串，就是将 时间戳 + 随机码 + http方法 + uri + 主机 + 端口 + 其他参数的请求参数，以换行符(即：\n)为连接符，合并起来得到的字符串。即使不需要其他参数也请在最后增加\n。</p>
<p>如果用户访问的时候，客户端的”访问令牌”已经过期，则需要使用”更新令牌”申请一个新的访问令牌。<br>客户端发出更新令牌的HTTP请求，包含以下参数：<br>granttype：表示使用的授权模式，此处的值固定为”refreshtoken”，必选项。<br>refresh_token：表示早前收到的更新令牌，必选项。<br>scope：表示申请的授权范围，不可以超出上一次申请的范围，如果省略该参数，则表示与上一次一致。</p>
<p>计算expires_in到期时间的方法：7776000<br>long longTime = System.currentTimeMillis() + Long.parseLong(“604800000”) * 1000;<br>        System.out.println(longTime);<br>        Date date = new Date(longTime);<br>        System.out.println(date);</p>
<p>密码模式<br>密码模式（Resource Owner Password Credentials Grant）中，用户向客户端提供自己的用户名和密码。客户端使用这些信息，向”服务商提供商”索要授权。<br>在这种模式中，用户必须把自己的密码给客户端，但是客户端不得储存密码。这通常用在用户对客户端高度信任的情况下，比如客户端是操作系统的一部分，或者由一个著名公司出品。而认证服务器只有在其他授权模式无法执行的情况下，才能考虑使用这种模式。<br>客户端模式<br>客户端模式（Client Credentials Grant）指客户端以自己的名义，而不是以用户的名义，向”服务提供商”进行认证。严格地说，客户端模式并不属于OAuth框架所要解决的问题。在这种模式中，用户直接向客户端注册，客户端以自己的名义要求”服务提供商”提供服务，其实不存在授权问题。</p>
<p>搭建OAuth<br>框架：<br>Spring Security for OAuth ?<br>Apis Authorization Server<br>Restlet Framework<br>Apache CXF</p>
<p>Shiro oauth??</p>
<p>一个OAuth2.0服务器端的实现 </p>
<p>数据库简单设计:<br>(可以不用数据库,access_token是临时的,放在内存中即可) </p>
<p>create table access_token (<br>id bigint,<br>access_token varchar(255) NOT NULL,<br>token_type varchar(255),<br>expires varchar(255),<br>refresh_token varchar(255),<br>username varchar(255),<br>client_id varchar(255),<br>createdtime datetime,<br>modifiedtime datetime<br>); </p>
<p>create table user (<br>uid bigint,<br>username varchar(255) NOT NULL,<br>password varchar(255) NOT NULL<br>); </p>
<p>create table client (<br>id bigint,<br>client_id varchar(255) NOT NULL,<br>client_secret varchar(255)<br>); </p>
<p>OAuth2.0协议主要是用access_token代替密码.<br>授权服务器保管用户密码并向第三方应用发放access_token,第三方应用接触不到用户<br>的密码.<br>资源服务器保管需要授权才能访问的资源(其实就是服务器提供的API),第三方应用凭<br>access_token访问资源服务器.(资源服务器还要问一下授权服务器这个access_token是<br>不是真的) </p>
<p>授权服务器做两件事: </p>
<ol>
<li>发放access_token的servlet </li>
<li>向资源服务器提供一个验证access_token真伪的WebService </li>
</ol>
<p>四种获取access token的方式<br>1    “Authorization Code” Grant<br>2    “Implicit” Grant<br>3    “Resource Owner Password Credentials” Grant<br>4    “Client Credentials” Grant  </p>
<ul>
<li>Refreshing an Access Token </li>
</ul>
<p>(在第一种方式里面要分两步获取access_token.) </p>
<p>class TokenServlet extends HttpServlet<br>{<br>     void doGet()<br>     {<br>         String response_type = request.getParameter(“response_type”);<br>         if (response_type.equals(“token”))<br>         {<br>              // TODO 第二种:”Implicit方式”;<br>         }<br>     } </p>
<pre><code>void doPost() 
{ 
    // TODO Filter Authorization: Basic base64(appkey:appsecret)  
// 验证 appkey appsecret

    String grant_type = request.getParameter(&quot;grant_type&quot;);     

    if (grant_type.equals(&quot;authorization_code&quot;)) 
    {             
        // TODO 第一种:&quot;Authorization Code方式&quot;;             
        return ; 
    } 

    if (grant_type.equals(&quot;password&quot;)) 
    {             
        // TODO 第三种:&quot;Password方式&quot;;             
        return ; 
    } 

    if (grant_type.equals(&quot;client_credentials&quot;)) 
    {             
        // TODO 第四种:&quot;Client Credentials方式&quot;;             
        return ; 
    } 

    if (grant_type.equals(&quot;refresh_token&quot;)) 
    {             
        // TODO 第五种:&quot;RefreshToken方式&quot;;             
        return ; 
    } 

} 
</code></pre><p>} </p>
<p>OAuth2.0存在的安全问题：</p>
<p>场景一：见demo—-&gt;访问信任页面A，授权后产生cookie，<br>在未退出或者未关闭浏览器的情况下携带A页面的cookie访问危险网站B<br>B站中要求访问页面A，A并不知道这是用户的请求还是跨站请求所以会同意访问，B达到了模拟用户操作的目的。</p>
<p>场景二：<br>通过Authorization code方式绑定QQ账号<br>（1）用户甲到第三方网站A登录后，到了绑定页面。此时还没绑定微博。<br>（2）绑定页面提供一个按钮：“绑定QQ”（地址a：<a href="http://aaa.com/index.xhtml?m=user_3rd_bind_qq）" target="_blank" rel="external">http://aaa.com/index.xhtml?m=user_3rd_bind_qq）</a><br>（3）用户甲点击地址a，程序生成如下地址b：<br><a href="https://api.weibo.com/oauth2/authorize?client_id=【9999999】&amp;redirect_uri=【http://aaa.comindex.xhtml?m=user_3rd_bind_qq_callback】&amp;response_type=【code】" target="_blank" rel="external">https://api.weibo.com/oauth2/authorize?client_id=【9999999】&amp;redirect_uri=【http://aaa.comindex.xhtml?m=user_3rd_bind_qq_callback】&amp;response_type=【code】</a><br>（4）用户甲浏览器定向到地址b，授权该应用。<br>（5）授权服务器根据传递的redirect_uri参数，组合认证参数code生成地址c：<br><a href="http://aaa.comindex.xhtml?m=user_3rd_bind_qq_callback&amp;code=【809ui0asduve】" target="_blank" rel="external">http://aaa.comindex.xhtml?m=user_3rd_bind_qq_callback&amp;code=【809ui0asduve】</a><br>（6）用户甲浏览器返回到地址c，完成绑定。<br>第5步中返回地址所带的code 与当前用户的关系。。。<br>两用户同时进行QQ绑定若没有各自特定的标识参数的后果。。。<br>可以在第五步做手脚交换二者的code 就可以形成交叉绑定</p>
<p>state: RECOMMENDED. An opaque value used by the client to maintain state between the request and callback.  The authorization server includes this value when redirecting the user-agent back to the client.  The parameter SHOULD be used for preventing cross-site request forgery as described in Section 10.12. </p>
<p>使用state参数用于请求阶段和回调阶段之间的状态保持可防止CSRF攻击和防止错误绑定<br>记录请求之前state，返回后比对—–&gt;安全<br>返回的state只能匹配固定几种url头部才通过验证—–&gt;方便</p>
<p>Spring Security for OAuth 是针对OAuth2基于Security 的实现，token存放于内存</p>
<p>Shiro的1.2版本提供接入oauth2，实现可以用Apache Oltu，有整合资料</p>
<p>Apache Oltu是OAuth协议的Java语言实现。<br>现在实现了oauth2.0标准的Java版本有：<br>1、Spring Security for OAuth<br>2、Apache Oltu(Apache Amber)<br>3、Apis Authorization Server<br>4、Restlet Framework<br>5、Apache CXF</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司用户中心系统不仅需要传统的注册登录，主流的快捷登录肯定也必不可少，第三方快捷登录的流程和相应系统数据表的设计就先不记录了，主要摘抄一下网上对oauth的介绍和自己的理解&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="第三方快捷登录" scheme="http://yzy755.github.io/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BF%AB%E6%8D%B7%E7%99%BB%E5%BD%95/"/>
    
      <category term="oauth2.0" scheme="http://yzy755.github.io/tags/oauth2-0/"/>
    
  </entry>
  
  <entry>
    <title>基于shiro拓展并发登录人数控制</title>
    <link href="http://yzy755.github.io/2017/04/11/%E5%9F%BA%E4%BA%8Eshiro%E6%8B%93%E5%B1%95%E5%B9%B6%E5%8F%91%E7%99%BB%E5%BD%95%E4%BA%BA%E6%95%B0%E6%8E%A7%E5%88%B6/"/>
    <id>http://yzy755.github.io/2017/04/11/基于shiro拓展并发登录人数控制/</id>
    <published>2017-04-11T09:17:53.000Z</published>
    <updated>2018-09-04T09:19:03.766Z</updated>
    
    <content type="html"><![CDATA[<p>在公司做了个视频网站，当然视频是需要购买的，就像爱奇艺那样，所以同一用户就要有一个客户端登录个数的控制，不然一个用户买了，能让一个公司的人看- -！<a id="more"></a><br>spring security就直接提供了相应的功能；我的项目使用的权限框架是apach的shiro，Shiro的话没有提供默认实现，不过可以很容易的在Shiro中加入这个功能<br>我们来看下shiro拦截机制中filter的关系图<br><img src="/2017/04/11/基于shiro拓展并发登录人数控制/filter.png" alt="logo"><br>这里只介绍AccessControlFilter：<br>    AccessControlFilter提供了访问控制的基础功能；比如是否允许访问/当访问拒绝时如何处理等：<br>        abstract boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception;<br>        boolean onAccessDenied(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception;<br>        abstract boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception;</p>
<pre><code>    isAccessAllowed：表示是否允许访问；mappedValue就是[urls]配置中拦截器参数部分，如果允许访问返回true，否则false；
    onAccessDenied：表示当访问拒绝时是否已经处理了；如果返回true表示需要继续处理；如果返回false表示该拦截器实例已经处理了，将直接返回即可。

onPreHandle会自动调用这两个方法决定是否继续处理：
    boolean onPreHandle(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception {  
        return isAccessAllowed(request, response, mappedValue) || onAccessDenied(request, response, mappedValue);  
    }   

另外AccessControlFilter还提供了如下方法用于处理如登录成功后/重定向到上一个请求： 
    void setLoginUrl(String loginUrl) //身份验证时使用，默认/login.jsp  
    String getLoginUrl()  
    Subject getSubject(ServletRequest request, ServletResponse response) //获取Subject实例  
    boolean isLoginRequest(ServletRequest request, ServletResponse response)//当前请求是否是登录请求  
    void saveRequestAndRedirectToLogin(ServletRequest request, ServletResponse response) throws IOException //将当前请求保存起来并重定向到登录页面  
    void saveRequest(ServletRequest request) //将请求保存起来，如登录成功后再重定向回该请求  
    void redirectToLogin(ServletRequest request, ServletResponse response) //重定向到登录页面 
    比如基于表单的身份验证就需要使用这些功能。
</code></pre><p>如果我们想进行访问访问的控制就可以继承AccessControlFilter；如果我们要添加一些通用数据我们可以直接继承PathMatchingFilter。所以定义一个类继承AccessControlFilter重写onAccessDenied方法，isAccessAllowed方法直接返回false，使程序进入拒绝访问的处理过程，也就是onAccessDenied方法，在这个方法中，我们的思路就是<br>    1.使用链表记录同一用户的登录sessionid，用shiro提供的cache记录用户和session的映射关系，用户名为key,链表为value<br>    2.用户登录后使用subject拿到用户名，以用户名取出当前服务器存储的sessionid链表，判断链表中有无当前登录的sessionid，无则push<br>    3.判断链表的的长度，若大于系统允许的登录数，链表进行移除操作，获得移除的session并标记为被踢出（移除的顺序可配置为踢前者或者后者）<br>    4.被移除的session（客户端）再次访问系统页面时，走完上述过程发现自己有被踢出的标记，调用subject.logout()方法，并重定向到踢出的提示页面<br>帖一波代码：</p>
<pre><code>public class KickoutSessionControlFilter extends AccessControlFilter
{
    private Logger logger = LoggerFactory.getLogger(KickoutSessionControlFilter.class);
    private String kickoutUrl; // 踢出后到的地址
    private boolean kickoutAfter; // 踢出之前登录的或之后登录的用户 (在配置文件中配)
    private int maxSession = 1; // 同一个帐号最大会话数 默认1

    private SessionManager sessionManager;

    private Cache&lt;String, Deque&lt;Serializable&gt;&gt; cache;
    @Override
    protected boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception
    {
        return false;
    }

    @Override
    protected boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception
    {
        Subject subject = getSubject(request, response);
        if (!subject.isAuthenticated() &amp;&amp; !subject.isRemembered())
        {
            // 如果没有登录，直接进行之后的流程
            return true;
        }

        Session session = subject.getSession();
        String username = (String) subject.getPrincipal();
        Serializable sessionId = session.getId();

        // 同步控制
        Deque&lt;Serializable&gt; deque = cache.get(username);
        if (deque == null)
        {
            deque = new LinkedList&lt;Serializable&gt;();
        }

        // 如果队列里没有此sessionId，且用户没有被踢出；放入队列
        if (!deque.contains(sessionId) &amp;&amp; session.getAttribute(&quot;kickout&quot;) == null)
        {
            deque.push(sessionId);
        }

        // 如果队列里的sessionId数超出最大会话数，开始踢人
        while (deque.size() &gt; maxSession)
        {
            Serializable kickoutSessionId = null;
            if (kickoutAfter)
            { // 如果踢出后者
                kickoutSessionId = deque.removeFirst();
            }
            else
            { // 否则踢出前者
                kickoutSessionId = deque.removeLast();
            }
            try
            {
                Session kickoutSession = sessionManager.getSession(new DefaultSessionKey(kickoutSessionId));
                if (kickoutSession != null)
                {
                    // 设置会话的kickout属性表示踢出了
                    kickoutSession.setAttribute(&quot;kickout&quot;, true);
                }
            }
            catch (Exception e)
            {
                e.printStackTrace();
                logger.error(e.getMessage(), e);
            }
        }
        cache.put(username, deque);

        // 如果被踢出了，直接退出，重定向到踢出后的地址
        if (session.getAttribute(&quot;kickout&quot;) != null)
        {
            try
            {
                subject.logout();
            }
            catch (Exception e)
            {
                e.printStackTrace();
                logger.error(e.getMessage(), e);
            }
            saveRequest(request);
            WebUtils.issueRedirect(request, response, kickoutUrl);
            return false;
        }
        return true;
    }

    public void setKickoutUrl(String kickoutUrl)
    {
        this.kickoutUrl = kickoutUrl;
    }

    public void setKickoutAfter(boolean kickoutAfter)
    {
        this.kickoutAfter = kickoutAfter;
    }

    public void setMaxSession(int maxSession)
    {
        this.maxSession = maxSession;
    }

    public void setSessionManager(SessionManager sessionManager)
    {
        this.sessionManager = sessionManager;
    }

    public void setCacheManager(CacheManager cacheManager)
    {
        this.cache = cacheManager.getCache(&quot;shiro-kickout-session&quot;);
    }
}
</code></pre><p>当然上述的实现离不开shiro的正确配置，帖一波配置：</p>
<pre><code>&lt;bean id=&quot;securityManager&quot; class=&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;&gt;
    &lt;property name=&quot;realms&quot;&gt;
        &lt;util:list id=&quot;beanList&quot;&gt;
            &lt;ref bean=&quot;myCasRealm&quot; /&gt;
            &lt;ref bean=&quot;myLoginRealm&quot; /&gt;
        &lt;/util:list&gt;
    &lt;/property&gt;
    &lt;!-- &lt;property name=&quot;realm&quot; ref=&quot;myCasRealm&quot; /&gt; --&gt;
    &lt;property name=&quot;subjectFactory&quot; ref=&quot;casSubjectFactory&quot; /&gt;
    &lt;property name=&quot;cacheManager&quot; ref=&quot;cacheManager&quot; /&gt;
    &lt;property name=&quot;sessionManager&quot; ref=&quot;sessionManager&quot; /&gt;
&lt;/bean&gt;

&lt;!-- 如果要实现cas的remember me的功能，需要用到下面这个bean，并设置到securityManager的subjectFactory中 --&gt;
&lt;bean id=&quot;casSubjectFactory&quot; class=&quot;org.apache.shiro.cas.CasSubjectFactory&quot; /&gt;

&lt;!-- 項目自定义的Realm --&gt;
&lt;bean id=&quot;myCasRealm&quot; class=&quot;com.booway.shiro.MyCasRealm&quot;&gt;
    &lt;property name=&quot;cacheManager&quot; ref=&quot;cacheManager&quot; /&gt;
    &lt;property name=&quot;casServerUrlPrefix&quot; value=&quot;${cas.server.url}&quot; /&gt;
    &lt;!-- 客户端的回调地址设置，必须和下面的shiro-cas过滤器拦截的地址一致 --&gt;
    &lt;property name=&quot;casService&quot; value=&quot;/cas&quot; /&gt;
&lt;/bean&gt;

&lt;!-- 項目自定义的Realm --&gt;
&lt;bean id=&quot;myLoginRealm&quot; class=&quot;com.booway.shiro.MyLoginRealm&quot;&gt;
    &lt;property name=&quot;cacheManager&quot; ref=&quot;cacheManager&quot; /&gt;
    &lt;property name=&quot;casServerUrlPrefix&quot; value=&quot;${cas.server.url}&quot; /&gt;
    &lt;!-- 客户端的回调地址设置，必须和下面的shiro-cas过滤器拦截的地址一致 --&gt;
    &lt;property name=&quot;casService&quot; value=&quot;/cas&quot; /&gt;
&lt;/bean&gt;

&lt;!-- 用户授权信息Cache --&gt;
&lt;bean id=&quot;cacheManager&quot; class=&quot;org.apache.shiro.cache.MemoryConstrainedCacheManager&quot; /&gt;

&lt;!-- 会话ID生成器 --&gt;
&lt;bean id=&quot;sessionIdGenerator&quot; class=&quot;org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator&quot;/&gt;

&lt;!-- 会话DAO --&gt;
&lt;bean id=&quot;sessionDAO&quot; class=&quot;org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO&quot;&gt;
    &lt;property name=&quot;activeSessionsCacheName&quot; value=&quot;shiro-activeSessionCache&quot;/&gt;
    &lt;property name=&quot;sessionIdGenerator&quot; ref=&quot;sessionIdGenerator&quot;/&gt;
&lt;/bean&gt;

&lt;!-- 会话Cookie模板 --&gt;
&lt;bean id=&quot;sessionIdCookie&quot; class=&quot;org.apache.shiro.web.servlet.SimpleCookie&quot;&gt;
    &lt;constructor-arg value=&quot;sid&quot;/&gt;
    &lt;property name=&quot;httpOnly&quot; value=&quot;true&quot;/&gt;
    &lt;property name=&quot;maxAge&quot; value=&quot;3600&quot;/&gt;
&lt;/bean&gt;

&lt;!-- 会话管理器 --&gt;
&lt;bean id=&quot;sessionManager&quot; class=&quot;org.apache.shiro.web.session.mgt.DefaultWebSessionManager&quot;&gt;
    &lt;property name=&quot;cacheManager&quot; ref=&quot;cacheManager&quot; /&gt;
    &lt;property name=&quot;globalSessionTimeout&quot; value=&quot;1800000&quot;/&gt;
    &lt;property name=&quot;deleteInvalidSessions&quot; value=&quot;true&quot;/&gt;
    &lt;property name=&quot;sessionValidationSchedulerEnabled&quot; value=&quot;true&quot;/&gt;
    &lt;property name=&quot;sessionValidationScheduler&quot; ref=&quot;sessionValidationScheduler&quot;/&gt;
    &lt;property name=&quot;sessionDAO&quot; ref=&quot;sessionDAO&quot;/&gt;
    &lt;property name=&quot;sessionIdCookieEnabled&quot; value=&quot;true&quot;/&gt;
    &lt;property name=&quot;sessionIdCookie&quot; ref=&quot;sessionIdCookie&quot;/&gt;
&lt;/bean&gt;

&lt;!-- 会话验证调度器 --&gt;
&lt;bean id=&quot;sessionValidationScheduler&quot; class=&quot;org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler&quot;&gt;
    &lt;property name=&quot;sessionValidationInterval&quot; value=&quot;1800000&quot;/&gt;
    &lt;property name=&quot;sessionManager&quot; ref=&quot;sessionManager&quot;/&gt;
&lt;/bean&gt;

&lt;bean id=&quot;kickoutSessionControlFilter&quot;
    class=&quot;com.booway.shiro.KickoutSessionControlFilter&quot;&gt;
    &lt;property name=&quot;cacheManager&quot; ref=&quot;cacheManager&quot; /&gt;
    &lt;property name=&quot;sessionManager&quot; ref=&quot;sessionManager&quot; /&gt;

    &lt;property name=&quot;kickoutAfter&quot; value=&quot;false&quot; /&gt;
    &lt;property name=&quot;maxSession&quot; value=&quot;1&quot; /&gt;
    &lt;property name=&quot;kickoutUrl&quot; value=&quot;/kickout.xhtml&quot; /&gt;
&lt;/bean&gt;

&lt;!-- Shiro Filter --&gt;
&lt;bean id=&quot;shiroFilter&quot; class=&quot;com.booway.shiro.ShiroFilterFactoryBean&quot;&gt;
    &lt;property name=&quot;securityManager&quot; ref=&quot;securityManager&quot; /&gt;
    &lt;!-- 用于调用Controller --&gt;
    &lt;property name=&quot;service&quot; value=&quot;${uam.login.failurl}&quot; /&gt;
    &lt;property name=&quot;loginUrl&quot; value=&quot;${cas.server.login.url}?service=&quot; /&gt;
    &lt;!-- 用户访问未授权页面后跳转的错误信息页面 --&gt;
    &lt;property name=&quot;unauthorizedUrl&quot; value=&quot;/401.html&quot;&gt;&lt;/property&gt;

    &lt;!-- 自己实现的formAuthcFilter，加入key type --&gt;
    &lt;property name=&quot;filters&quot;&gt;
        &lt;util:map&gt;
            &lt;entry key=&quot;casFilter&quot; value-ref=&quot;casFilter&quot;&gt;
            &lt;/entry&gt;
            &lt;entry key=&quot;singleSignOutFilter&quot; value-ref=&quot;singleSignOutFilter&quot;&gt;
            &lt;/entry&gt;
            &lt;entry key=&quot;roles&quot; value-ref=&quot;roleFilter&quot;&gt;
            &lt;/entry&gt;
            &lt;entry key=&quot;kickout&quot; value-ref=&quot;kickoutSessionControlFilter&quot;&gt;
            &lt;/entry&gt;
        &lt;/util:map&gt;
    &lt;/property&gt;

    &lt;property name=&quot;filterChainDefinitions&quot;&gt;
        &lt;value&gt;
            /** = singleSignOutFilter,casFilter,kickout

        &lt;/value&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;bean id=&quot;casFilter&quot; class=&quot;com.booway.shiro.MyCasFilter&quot;&gt;
    &lt;!-- 配置验证错误时的失败页面 --&gt;
    &lt;property name=&quot;failureUrl&quot; value=&quot;${uam.login.failurl}&quot; /&gt;
    &lt;property name=&quot;successUrl&quot; value=&quot;/index.xhtml&quot; /&gt;
    &lt;property name=&quot;casLoginUrl&quot; value=&quot;${cas.server.login.url}&quot; /&gt;
    &lt;property name=&quot;interceptUrlPrefix&quot;&gt;
        &lt;list&gt;

        &lt;/list&gt;
    &lt;/property&gt;

    &lt;property name=&quot;loginUrls&quot;&gt;
        &lt;list&gt;
            &lt;value&gt;/index/login.xhtml&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
    &lt;!-- &lt;property name=&quot;excludeUrls&quot;&gt; &lt;list&gt; &lt;value&gt;/index.xhtml&lt;/value&gt; &lt;/list&gt; 
        &lt;/property&gt; --&gt;
&lt;/bean&gt;

&lt;bean id=&quot;userFilter&quot; class=&quot;com.booway.shiro.MyUserFilter&quot;&gt;
    &lt;!-- 配置验证错误时的失败页面 --&gt;
    &lt;property name=&quot;failureUrl&quot; value=&quot;${uam.login.failurl}&quot; /&gt;

&lt;/bean&gt;

&lt;bean id=&quot;logoutFilter&quot; class=&quot;com.booway.shiro.MyLogoutFilter&quot;&gt;
&lt;/bean&gt;

&lt;bean id=&quot;roleFilter&quot; class=&quot;com.booway.shiro.RolesAuthorizationFilter&quot;&gt;
&lt;/bean&gt;

&lt;!-- 退出过滤器 --&gt;
&lt;bean id=&quot;singleSignOutFilter&quot; class=&quot;com.booway.shiro.CustomSingleSignOutFilter&quot;&gt;
&lt;/bean&gt;

&lt;!-- 保证实现了Shiro内部lifecycle函数的bean执行 --&gt;
&lt;bean id=&quot;lifecycleBeanPostProcessor&quot; class=&quot;org.apache.shiro.spring.LifecycleBeanPostProcessor&quot; /&gt;

&lt;!-- AOP式方法级权限检查 --&gt;
&lt;bean
    class=&quot;org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator&quot;
    depends-on=&quot;lifecycleBeanPostProcessor&quot;&gt;
    &lt;property name=&quot;proxyTargetClass&quot; value=&quot;true&quot; /&gt;
&lt;/bean&gt;

&lt;bean
    class=&quot;org.springframework.beans.factory.config.MethodInvokingFactoryBean&quot;&gt;
    &lt;property name=&quot;staticMethod&quot;
        value=&quot;org.apache.shiro.SecurityUtils.setSecurityManager&quot; /&gt;
    &lt;property name=&quot;arguments&quot; ref=&quot;securityManager&quot; /&gt;
&lt;/bean&gt;

&lt;!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions), 需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 --&gt;
&lt;bean
    class=&quot;org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor&quot;&gt;
    &lt;property name=&quot;securityManager&quot; ref=&quot;securityManager&quot; /&gt;
&lt;/bean&gt;
</code></pre><p>这样一个shiro的拓展就完成啦！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在公司做了个视频网站，当然视频是需要购买的，就像爱奇艺那样，所以同一用户就要有一个客户端登录个数的控制，不然一个用户买了，能让一个公司的人看- -！&lt;/p&gt;
    
    </summary>
    
      <category term="工作实践" scheme="http://yzy755.github.io/categories/%E5%B7%A5%E4%BD%9C%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="shiro" scheme="http://yzy755.github.io/tags/shiro/"/>
    
  </entry>
  
</feed>
