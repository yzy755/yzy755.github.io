<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>易泽源的博客</title>
  <subtitle>一天进步一点 程序员由入门到放弃</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yzy755.github.io/"/>
  <updated>2020-12-07T09:39:41.701Z</updated>
  <id>http://yzy755.github.io/</id>
  
  <author>
    <name>易泽源</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ElasticSearch缓存引发的问题</title>
    <link href="http://yzy755.github.io/2020/12/02/ElasticSearch%E7%BC%93%E5%AD%98%E5%BC%95%E5%8F%91%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yzy755.github.io/2020/12/02/ElasticSearch缓存引发的问题/</id>
    <published>2020-12-02T09:43:11.000Z</published>
    <updated>2020-12-07T09:39:41.701Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现小程序社区模块的搜索偶发性地出现搜索异常：<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">globalSearch==&gt; post content search exception:ElasticsearchStatusException[Elasticsearch exception [type=circuit_breaking_exception, reason=[parent] Data too large, data for [&lt;http_request&gt;] would be [247822678/236.3mb], which is larger than the limit of [246546432/235.1mb], real usage: [247821032/236.3mb], new bytes reserved: [1646/1.6kb], usages [request=0/0b, fielddata=227362/222kb, in_flight_requests=1646/1.6kb, accounting=28514116/27.1mb]]]</div><div class="line">        at org.elasticsearch.rest.BytesRestResponse.errorFromXContent(BytesRestResponse.java:177)</div><div class="line">        at org.elasticsearch.client.RestHighLevelClient.parseEntity(RestHighLevelClient.java:1727)</div><div class="line">        at org.elasticsearch.client.RestHighLevelClient.parseResponseException(RestHighLevelClient.java:1704)</div><div class="line">        at org.elasticsearch.client.RestHighLevelClient.internalPerformRequest(RestHighLevelClient.java:1467)</div><div class="line">        at org.elasticsearch.client.RestHighLevelClient.performRequest(RestHighLevelClient.java:1424)</div><div class="line">        at org.elasticsearch.client.RestHighLevelClient.performRequestAndParseEntity(RestHighLevelClient.java:1394)</div><div class="line">        at org.elasticsearch.client.RestHighLevelClient.search(RestHighLevelClient.java:930)</div></pre></td></tr></table></figure>
<p>以及</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Suppressed: org.elasticsearch.client.ResponseException: method [POST], host [http://192.168.11.113:29201], URI [/post_content_4/_search?typed_keys=true&amp;ignore_unavailable=false&amp;expand_wildcards=open&amp;allow_no_indices=true&amp;ignore_throttled=true&amp;search_type=query_then_fetch&amp;batched_reduce_size=512&amp;ccs_minimize_roundtrips=true], status line [HTTP/1.1 429 Too Many Requests]</div></pre></td></tr></table></figure>
<p>具体的报错json串如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">"error"</span>: &#123;</div><div class="line">		<span class="attr">"root_cause"</span>: [&#123;</div><div class="line">			<span class="attr">"type"</span>: <span class="string">"circuit_breaking_exception"</span>,</div><div class="line">			<span class="attr">"reason"</span>: <span class="string">"[parent] Data too large, data for [&lt;http_request&gt;] would be [247995634/236.5mb], which is larger than the limit of [246546432/235.1mb], real usage: [247994080/236.5mb], new bytes reserved: [1554/1.5kb], usages [request=0/0b, fielddata=227362/222kb, in_flight_requests=1554/1.5kb, accounting=28514116/27.1mb]"</span>,</div><div class="line">			<span class="attr">"bytes_wanted"</span>: <span class="number">247995634</span>,</div><div class="line">			<span class="attr">"bytes_limit"</span>: <span class="number">246546432</span>,</div><div class="line">			<span class="attr">"durability"</span>: <span class="string">"PERMANENT"</span></div><div class="line">		&#125;],</div><div class="line">		<span class="attr">"type"</span>: <span class="string">"circuit_breaking_exception"</span>,</div><div class="line">		<span class="attr">"reason"</span>: <span class="string">"[parent] Data too large, data for [&lt;http_request&gt;] would be [247995634/236.5mb], which is larger than the limit of [246546432/235.1mb], real usage: [247994080/236.5mb], new bytes reserved: [1554/1.5kb], usages [request=0/0b, fielddata=227362/222kb, in_flight_requests=1554/1.5kb, accounting=28514116/27.1mb]"</span>,</div><div class="line">		<span class="attr">"bytes_wanted"</span>: <span class="number">247995634</span>,</div><div class="line">		<span class="attr">"bytes_limit"</span>: <span class="number">246546432</span>,</div><div class="line">		<span class="attr">"durability"</span>: <span class="string">"PERMANENT"</span></div><div class="line">	&#125;,</div><div class="line">	<span class="attr">"status"</span>: <span class="number">429</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从报错的意思来看是某项配置的内存不够导致，用关键字“circuit_breaking_exception”搜索得知这跟es的三种缓存有关，将相关概念记录一下</p>
<blockquote>
<p> Query Cache</p>
</blockquote>
<p>Query Cache也称为Filter Cache，顾名思义它的作用就是对一个查询中包含的过滤器执行结果进行缓存。</p>
<p>比如我们常用的term，terms，range过滤器都会在满足某种条件后被缓存，注意，这里的bool过滤器是不会被缓存的，但bool过滤器包含的子query clause会被缓存，我们可以用下面的命令来查询Query Cache的情况。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://192.168.0.109:9200/_stats/query_cache?pretty&amp;human</div></pre></td></tr></table></figure>
<blockquote>
<p>Request Cache</p>
</blockquote>
<p>当一个查询发送到ES集群的某个节点上时，这个节点会把该查询扩散到其他节点并在相应分片上执行，我们姑且把在分片上执行的结果叫“本地结果集“，这些本地结果集最终会汇集到最初请求到达的那个协调节点，这些“分片级”的结果集会合并成“全局”结果集返回给调用端。</p>
<p>Request Cache模块就是为了缓存这些“分片级”的本地结果集，但是目前只会缓存查询中参数size=0的请求，所以就不会缓存hits 而是缓存 hits.total，aggregations和suggestions</p>
<p>Request Cache是非常智能的，它能够保证和在近实时搜索中的非缓存查询结果一致。这句话读起来很难懂，简单解释下。</p>
<p>我们都知道ES是一个“near real-time”（近实时）搜索引擎，为什么是近实时搜索呢，那是因为当我们向ES发送一个索引文档请求到这个文档变成Searchable（可搜索）默认的时间是1秒，我们可以通过index.refresh_interval参数来设置刷新时间间隔，也就是说我们在执行一个搜索请求时实际上数据是有延迟的。回到刚才的问题，刚才那句话其实指的就是：ES能保证在使用Request Cache的情况下的搜索结果和不使用Request Cache的近实时搜索结果相同，那ES是如何保证两者结果相同的呢？继续……</p>
<p>Request Cache缓存失效是自动的，当索引refresh时就会失效，也就是说在默认情况下Request Cache是每1秒钟失效一次（注意：分片在这段时间内确实有改变才会失效）。也就是说当一个文档被索引到该文档变成Searchable之前的这段时间内，不管是否有请求命中缓存该文档都不会被返回，正是是因为如此ES才能保证在使用Request Cache的情况下执行的搜索和在非缓存近实时搜索的结果一致。如果我们把索引刷新时间设置得越长那么缓存失效的时间越长，如果缓存被写满将采用LRU策略清除。当然我们也可以手动设置参数indices.request.cache.expire指定失效时间，但是基本上我们没必要去这样做，因为缓存在每次索引refresh时都会自动失效。</p>
<p> 在默认情况下Request Cache是关闭的，我们需要手动开启 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -XPUT localhost:9200/my_index/_settings -d&apos;</div><div class="line">&#123; &quot;index.requests.cache.enable&quot;: true &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Fielddata</p>
</blockquote>
<p>一谈到Fielddata我们不得不提到doc_values，这两者的作用都是一样：能够让我们在inverted index（倒排索引）的基础之上做aggregation、sort或者在查询中通过script访问doc属性，这里我们不讨论doc_values，主要讲下Fielddata，doc values相关知识请戳：<a href="http://blog.csdn.net/chennanymy/article/details/52555055" target="_blank" rel="external">http://blog.csdn.net/chennanymy/article/details/52555055</a></p>
<p>想必大家都知道倒排索引这种结构，如果我们仅仅依靠倒排是很难在查询中做到排序和统计的，因为它并不是像关系型数据库那样采用“列式存储”，而是基于一个“词”到“文档”的倒排。</p>
<p>Fielddata是专门针对分词的字段在query-time（查询期间）的数据结构的缓存。当我们第一次在一个分词的字段上执行聚合、排序或通过脚本访问的时候就会触发该字段Fielddata Cache的加载，这种缓存是“segment”级别的，当有新的segment打开时旧的缓存不会重新加载，而是直接把新的segement对应的Fielddata Cache加载到内存。</p>
<p>加载Fielddata Cache是一个非常昂贵的操作，一旦Fielddata被加载到内存，那么在该Fielddata Cache对应的Segement生命周期范围内都会驻留在内存中。也就是说当段合并时会触发合并后更大段的Fielddata Cache加载。</p>
<p>Fielddata会消耗大部分的JVM堆内存，特别是当加载“高基数”的分词字段时（那些分词后存在大量不同词的字段），针对这种字段的聚合排序其实是非常没有意义的，我们更多的要去考虑是否能用not_analyzed代替（这样就可以使用doc_values实现聚合、排序）。</p>
<p>默认情况下Fielddate Cache是默认开启的，我们可以通过下面的设置来关闭，关闭后就无法对分词字段执行聚合、排序操作了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">PUT my_index</div><div class="line">&#123;</div><div class="line">  &quot;mappings&quot;: &#123;</div><div class="line">    &quot;my_type&quot;: &#123;</div><div class="line">      &quot;properties&quot;: &#123;</div><div class="line">        &quot;text&quot;: &#123;</div><div class="line">          &quot;type&quot;: &quot;string&quot;,</div><div class="line">          &quot;fielddata&quot;: &#123;</div><div class="line">            &quot;format&quot;: &quot;disabled&quot; </div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>FieldData<br>ES配置中提到的FieldData指的是字段数据。当排序（sort），统计（aggs）时，ES把涉及到的字段数据全部读取到内存（JVM Heap）中进行操作。相当于进行了数据缓存，提升查询效率。 </li>
<li>Cache配置</li>
</ul>
<p>indices.fielddata.cache.size 配置fieldData的Cache大小，可以配百分比也可以配一个准确的数值。cache到达约定的内存大小时会自动清理，驱逐一部分FieldData数据以便容纳新数据。默认值为unbounded无限。<br>indices.fielddata.cache.expire用于约定多久没有访问到的数据会被驱逐，默认值为-1，即无限。expire配置不推荐使用，按时间驱逐数据会大量消耗性能。而且这个设置在不久之后的版本中将会废弃。</p>
<p> 看来，Data too large异常就是由于fielddata.cache的默认值为unbounded导致的了。 </p>
<p>在mapping中，我们可以这样设置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"tag"</span>: &#123;</div><div class="line">        <span class="string">"type"</span>:      <span class="string">"string"</span>,</div><div class="line">        <span class="string">"fielddata"</span>: &#123;</div><div class="line">            <span class="string">"format"</span>: <span class="string">"fst"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者在不改配置的情况下定时清除fielddata缓存也可解决：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 清空指定索引的缓存</div><div class="line">     * <span class="doctag">@param</span> indexName 索引名</div><div class="line">     * <span class="doctag">@return</span>  清空结果</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">clearIndicesCache</span><span class="params">(String indexName)</span></span>&#123;</div><div class="line">        ClearIndicesCacheResponse response = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            response = client.indices()</div><div class="line">                    .clearCache(<span class="keyword">new</span> ClearIndicesCacheRequest(indexName)</div><div class="line">                            .fieldDataCache(<span class="keyword">true</span>),RequestOptions.DEFAULT</div><div class="line">                    );</div><div class="line">            log.info(<span class="string">"清理es&#123;&#125;帖子缓存, response:&#123;&#125;"</span>, indexName, response);</div><div class="line">            <span class="keyword">if</span> (response.getFailedShards()&gt;<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近发现小程序社区模块的搜索偶发性地出现搜索异常：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工作实践" scheme="http://yzy755.github.io/categories/%E5%B7%A5%E4%BD%9C%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="ElasticSearch" scheme="http://yzy755.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud 手脚架搭建遇到的坑</title>
    <link href="http://yzy755.github.io/2020/11/23/spring-cloud-%E6%89%8B%E8%84%9A%E6%9E%B6%E6%90%AD%E5%BB%BA%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://yzy755.github.io/2020/11/23/spring-cloud-手脚架搭建遇到的坑/</id>
    <published>2020-11-23T02:49:05.000Z</published>
    <updated>2020-11-28T04:20:26.434Z</updated>
    
    <content type="html"><![CDATA[<p>新技术总是能遇到各种各样的坑<br><a id="more"></a></p>
<p>openfeign的坑</p>
<p>因为spring-cloud调用服务是基于http协议的，所有需要定义没个接口的url，然后前端调用我们的web服务有需要一套url，如果定义两套url就显得非常麻烦，按照以前的习惯，接到需求后后台进行模块拆分，比如商品模块，订单模块，拆分后对应到代码就是controller的拆分，定义好controller和所有接口的url、入参、出参，开始编写接口文档…使用spring-cloud之后也希望能这样，所有对每个模块抽象出一个共用的api</p>
<p>调用示例：</p>
<p>封装接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserApi</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = &#123; <span class="string">"/getbyid"</span> &#125;, method = &#123; RequestMethod.GET &#125;)</div><div class="line">    <span class="function">ApiResult&lt;UserVo&gt; <span class="title">getUserById</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = &#123; <span class="string">"/saveuser"</span> &#125;, method = &#123; RequestMethod.POST &#125;)</div><div class="line">    <span class="function">ApiResult&lt;Boolean&gt; <span class="title">saveUser</span><span class="params">(@RequestBody ApiParam&lt;UserVo&gt; param)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后多了一步就是定义一个FeignClient接口来继承我们封装的api接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FeignClient</span>(<span class="string">"hwuser-center"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserFacade</span> <span class="keyword">extends</span> <span class="title">UserApi</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后service中定义controller对外提供服务</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">implements</span> <span class="title">UserApi</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(UserController.class);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ApiResult&lt;UserVo&gt; <span class="title">getUserById</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ApiResult.success(<span class="keyword">new</span> UserVo());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ApiResult&lt;Boolean&gt; <span class="title">saveUser</span><span class="params">(ApiParam&lt;UserVo&gt; param)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiResult(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> ApiResult&lt;PageInfo&lt;UserVo&gt;&gt; saveUser11(ApiParam&lt;UserVo&gt; param) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiResult(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后就是controller来实现我们封装的api接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBizController</span> <span class="keyword">implements</span> <span class="title">UserApi</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(UserBizController.class);</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    UserFacade userFacade;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ApiResult <span class="title">getById</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            LOG.info(<span class="string">"enter"</span>);</div><div class="line">            UserVo vo = <span class="keyword">new</span> UserVo();</div><div class="line">            vo.setId(id);</div><div class="line">            ApiParam&lt;UserVo&gt; apiParam = ApiParam.newApiParam(vo, <span class="keyword">new</span> HcContext());</div><div class="line">            ApiResult&lt;UserVo&gt; apiResult = userFacade.getUserById();</div><div class="line">            <span class="keyword">return</span> apiResult;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            LOG.error(<span class="string">"getById异常：&#123;&#125;"</span>, e.getMessage(), e);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ApiResult(-<span class="number">1</span>, e.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>感觉大功告成，但是一启动报错了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Caused by: java.lang.IllegalStateException: Ambiguous mapping. Cannot map <span class="string">'com.gzhc365.hw.user.facade.UserFacade'</span> method </div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> com.gzhc365.cloud.commons.api.ApiResult&lt;com.gzhc365.hw.user.vo.UserVo&gt; com.gzhc365.hw.user.api.UserApi.getUserById()</div><div class="line">to &#123;[/api/user/getbyid],methods=[GET]&#125;: There is already <span class="string">'userController'</span> bean method</div><div class="line"><span class="keyword">public</span> com.gzhc365.cloud.commons.api.ApiResult&lt;com.gzhc365.hw.user.vo.UserVo&gt; com.gzhc365.hw.user.web.controller.UserController.getUserById() mapped.</div><div class="line">	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping$MappingRegistry.assertUniqueMethodMapping(AbstractHandlerMethodMapping.java:<span class="number">581</span>)</div></pre></td></tr></table></figure>
<p>这里我让@RequestMapping(“/api/user”)直接修饰userApi接口，用来暴露出去统一前缀，然后FeignClient继承了这个Mapping，spring加载会动态代理出FeignClient的实现类来模拟userApi中定义的mapping，然后我们的service中对外暴露的controller也实现了userApi，所有spring加载了两套一模一样url的mapping就报错了。解决的办法就是将userApi接口上的@RequestMapping(“/api/user”)去掉，将完整的url写在每个接口上，但是这样有个问题就是没法给暴露出去的api做统一前缀了。 </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新技术总是能遇到各种各样的坑&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工作实践" scheme="http://yzy755.github.io/categories/%E5%B7%A5%E4%BD%9C%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="spring-cloud" scheme="http://yzy755.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud 手脚架搭建</title>
    <link href="http://yzy755.github.io/2020/11/20/spring-cloud-%E6%89%8B%E8%84%9A%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
    <id>http://yzy755.github.io/2020/11/20/spring-cloud-手脚架搭建/</id>
    <published>2020-11-20T03:48:05.000Z</published>
    <updated>2020-11-28T04:17:40.906Z</updated>
    
    <content type="html"><![CDATA[<p>公司一直都是dubbo架构微服务，在外面如火如荼的spring-cloud技术面前显得有些落后，所以决定慢慢将团队的架构往spring-cloud架构迁移，那手脚架必不可少。<br><a id="more"></a></p>
<p>dubbo架构的项目图如下：</p>
<p><img src="/2020/11/20/spring-cloud-手脚架搭建/1606461618965.png" alt="1606461618965"></p>
<p>每个模块都会拆分为两个module，取名hc-facade-xxx、hc-service-xxx，</p>
<ul>
<li>facade中存放DTO,VO,enum等对外依赖的类，最重要的是存放dubbo对外暴露的facade接口</li>
<li>service中主要是放数据库entity，dao，service，facade实现，所有的配置文件包括dubbo生产者消费者配置，spring，数据库等都会放在service中</li>
</ul>
<p>简单的项目依赖如下：</p>
<p><img src="/2020/11/20/spring-cloud-手脚架搭建/1606465156054.png" alt=""></p>
<p>搭建手脚架也同样采用相同的项目结构和依赖关系，项目图如下：</p>
<p><img src="/2020/11/20/spring-cloud-手脚架搭建/1606466001746.png" alt="1606466001746"></p>
<p>spring-cloud(Finchley.SR2) 使用以下组件</p>
<ul>
<li><p>注册中心：Eureka</p>
</li>
<li><p>配置中心：Apollo</p>
</li>
<li><p>接口调用：OpenFeign</p>
</li>
<li><p>网关：zuul</p>
<p>注册中心用的是公司选择的Eureka而非alibaba的nacos，有点遗憾，不过大同小异了，使用上差不多，nacos多了配置中心的功能，而配置中心沿用了之前的技术选型Apollo，配置的转移工作量大，左右没有上config，OpenFeign 是为了调用service接口尽量像dubbo一样调用本地方法一样</p>
</li>
</ul>
<blockquote>
<p>搭建注册中心服务端</p>
</blockquote>
<p> 引入pom依赖 </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka- server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 配置文件 </p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr"> server:</span></div><div class="line"> <span class="comment"># eureka缓存，true开启缓存，false关闭，生产环境建议为true</span></div><div class="line"><span class="attr"> enable-self-preservation:</span> <span class="literal">true</span></div><div class="line"><span class="attr"> client:</span></div><div class="line"><span class="attr"> register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 是否注册中心注册自己 true为是，可以在注册中心列表找到自己</span></div><div class="line"><span class="attr"> service-url:</span></div><div class="line"> <span class="comment"># Eureka客户端与Eureka服务端进行交互的地址</span></div><div class="line"><span class="attr"> defaultZone:</span> http://localhost:$&#123;server.port&#125;/eureka/</div><div class="line"> <span class="comment"># 是否从Eureka中获取服务信息</span></div><div class="line"><span class="attr"> fetch-registry:</span> <span class="literal">false</span></div><div class="line"> <span class="comment"># 多个注册中心集群</span></div><div class="line"> <span class="comment"># defaultZone: http://localhost:8761/eureka/,http://localhost:8080/eureka/</span></div></pre></td></tr></table></figure>
<p> 启动类添加注解 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableDiscoveryClient</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">        SpringApplication.run(UserServiceApplication.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p> 搭建注册中心客户端</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- eureka依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">eureka.client.service-url.defaultZone=http://localhost:8088/eureka/</div><div class="line">eureka.instance.prefer-ip-address=true</div><div class="line">eureka.instance.instance-id = $&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</div></pre></td></tr></table></figure>
<p>启动类添加注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product1Application</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Product1Application.class, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>openfeign搭建</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- feign依赖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>调用示例</p>
<ul>
<li>封装接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserApi</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = &#123; <span class="string">"/api/user/getbyid"</span> &#125;, method = &#123; RequestMethod.GET &#125;)</div><div class="line">    <span class="function">ApiResult&lt;UserVo&gt; <span class="title">getUserById</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = &#123; <span class="string">"/api/user/saveuser"</span> &#125;, method = &#123; RequestMethod.POST &#125;)</div><div class="line">    <span class="function">ApiResult&lt;Boolean&gt; <span class="title">saveUser</span><span class="params">(@RequestBody ApiParam&lt;UserVo&gt; param)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>FeignClient接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FeignClient</span>(<span class="string">"hwuser-center"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserFacade</span> <span class="keyword">extends</span> <span class="title">UserApi</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>service中的业务实现controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">implements</span> <span class="title">UserApi</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(UserController.class);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ApiResult&lt;UserVo&gt; <span class="title">getUserById</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> ApiResult.success(<span class="keyword">new</span> UserVo());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ApiResult&lt;Boolean&gt; <span class="title">saveUser</span><span class="params">(ApiParam&lt;UserVo&gt; param)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiResult(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> ApiResult&lt;PageInfo&lt;UserVo&gt;&gt; saveUser11(ApiParam&lt;UserVo&gt; param) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiResult(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>web controller</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBizController</span> <span class="keyword">implements</span> <span class="title">UserApi</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(UserBizController.class);</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    UserFacade userFacade;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ApiResult <span class="title">getById</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Long id)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            LOG.info(<span class="string">"enter"</span>);</div><div class="line">            UserVo vo = <span class="keyword">new</span> UserVo();</div><div class="line">            vo.setId(id);</div><div class="line">            ApiParam&lt;UserVo&gt; apiParam = ApiParam.newApiParam(vo, <span class="keyword">new</span> HcContext());</div><div class="line">            ApiResult&lt;UserVo&gt; apiResult = userFacade.getUserById();</div><div class="line">            <span class="keyword">return</span> apiResult;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            LOG.error(<span class="string">"getById异常：&#123;&#125;"</span>, e.getMessage(), e);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ApiResult(-<span class="number">1</span>, e.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司一直都是dubbo架构微服务，在外面如火如荼的spring-cloud技术面前显得有些落后，所以决定慢慢将团队的架构往spring-cloud架构迁移，那手脚架必不可少。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工作实践" scheme="http://yzy755.github.io/categories/%E5%B7%A5%E4%BD%9C%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="spring-cloud" scheme="http://yzy755.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>docker部署ElasticSearch</title>
    <link href="http://yzy755.github.io/2020/10/09/docker%E9%83%A8%E7%BD%B2ElasticSearch/"/>
    <id>http://yzy755.github.io/2020/10/09/docker部署ElasticSearch/</id>
    <published>2020-10-09T08:42:12.000Z</published>
    <updated>2020-12-07T09:39:09.111Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p> 单机版</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull elasticsearch</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>准备好容器数据卷目录和文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">1、mkdir /home/es/config</div><div class="line">2、touch es1.yml</div><div class="line">3、vi es.yml</div><div class="line">cluster.name: elasticsearch-cluster</div><div class="line">node.name: es-node1</div><div class="line">network.bind_host: 0.0.0.0</div><div class="line">network.publish_host: 192.168.103.230</div><div class="line">http.port: 9200</div><div class="line">transport.tcp.port: 9300</div><div class="line">http.cors.enabled: true</div><div class="line">http.cors.allow-origin: &quot;*&quot;</div><div class="line">node.master: true </div><div class="line">node.data: true  </div><div class="line">discovery.zen.ping.unicast.hosts: [&quot;192.168.103.230:9300&quot;]</div><div class="line">discovery.zen.minimum_master_nodes: 2</div></pre></td></tr></table></figure>
<p>调高jvm线程数限制 默认为65530</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/sysctl.conf</div></pre></td></tr></table></figure>
<p>在文件最后添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vm.max_map_count=262144</div></pre></td></tr></table></figure>
<p>重启虚拟机，或者启用配置:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sysctl -p</div></pre></td></tr></table></figure>
<p>启动命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -e ES_JAVA_OPTS=&quot;-Xms256m -Xmx256m&quot; -d -p 9200:9200 -p 9300:9300 -v /home/es/config/es1.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v /home/es/data1:/usr/share/elasticsearch/data --name ES01 elasticsearch:latest</div></pre></td></tr></table></figure>
<blockquote>
<p>集群</p>
</blockquote>
<p>在单机版的基础上容器数据卷步骤增加集群数量的es*.yml</p>
<p>es*.yml内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">cluster.name: elasticsearch-cluster</div><div class="line">node.name: es-node*</div><div class="line">network.bind_host: 0.0.0.0</div><div class="line">network.publish_host: 192.168.103.230</div><div class="line">http.port: 9201</div><div class="line">transport.tcp.port: 9301</div><div class="line">http.cors.enabled: true</div><div class="line">http.cors.allow-origin: &quot;*&quot;</div><div class="line">node.master: true </div><div class="line">node.data: true  </div><div class="line">discovery.zen.ping.unicast.hosts: [&quot;192.168.103.230:9300&quot;,&quot;192.168.103.230:9301&quot;,&quot;192.168.103.230:9302&quot;]</div><div class="line">discovery.zen.minimum_master_nodes: 2</div></pre></td></tr></table></figure>
<p>不同之处在于node.name和discovery.zen.ping.unicast.hosts的数量</p>
<p>启动命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker run -e ES_JAVA_OPTS=&quot;-Xms256m -Xmx256m&quot; -d -p 9200:9200 -p 9300:9300 -v /home/es/config/es1.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v /home/es/data1:/usr/share/elasticsearch/data --name ES01 elasticsearch:latest</div><div class="line"></div><div class="line">docker run -e ES_JAVA_OPTS=&quot;-Xms256m -Xmx256m&quot; -d -p 9201:9201 -p 9301:9301 -v /home/es/config/es2.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v /home/es/data2:/usr/share/elasticsearch/data --name ES01 elasticsearch:latest</div><div class="line"></div><div class="line">docker run -e ES_JAVA_OPTS=&quot;-Xms256m -Xmx256m&quot; -d -p 9201:9201 -p 9301:9301 -v /home/es/config/es3.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v /home/es/data3:/usr/share/elasticsearch/data --name ES01 elasticsearch:latest</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; 单机版&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;docker pull elasticsearch&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工作实践" scheme="http://yzy755.github.io/categories/%E5%B7%A5%E4%BD%9C%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="ElasticSearch" scheme="http://yzy755.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>docker学习笔记</title>
    <link href="http://yzy755.github.io/2020/09/22/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yzy755.github.io/2020/09/22/docker学习笔记/</id>
    <published>2020-09-22T12:48:05.000Z</published>
    <updated>2020-12-01T07:34:08.687Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p>
<h1 id="docker是什么"><a href="#docker是什么" class="headerlink" title="docker是什么"></a>docker是什么</h1><p>docker的思想来自于集装箱，将各式各样的服务打包装箱，集装箱与集装箱之间相互隔离，互不影响，这样的话这种不同的服务就都能在一艘船上打包运走而不需要正对不同的集装箱（服务）用不同的船（pc机）运走了，是一种容器化技术。</p>
<a id="more"></a>
<h1 id="docker为什么出现"><a href="#docker为什么出现" class="headerlink" title="docker为什么出现"></a>docker为什么出现</h1><p>传统的服务部署一般都在虚拟机上，代表有VMware、OpenStack等，在各个虚拟机上需要各自安装服务，如果集群规模很大的话需要重复部署N套环境，而且环境复杂切容易出现不一致的情况，即便是使用镜像也需要不断的备份和分发，运维工作十分痛苦。</p>
<p>docker也是虚拟化技术，属于轻量级的虚拟化，也叫容器化技术，docker不需要整套的操作系统环境，只需要必要的小规模环境，相遇虚拟机动辄几G十几G，docker镜像甚至只要M级别。docker对内存的利用率极高，因为他不需要想虚拟机一样固定分配一定的内存，docker就像是电脑上的一个进程，需要多少就分配多少。</p>
<p>总结一下docker与虚拟机的不同</p>
<ul>
<li>传统虚拟机，虚拟出一条硬件，运行一个完整的操作系统，然后在这个系统上安装和运行软件</li>
<li>容器内的应用直接运行在宿主机的内容，容器是没有自己的内核的，也没有虚拟我们的硬件，所以就轻便了</li>
<li>每个容器间是互相隔离，每个容器内都有一个属于自己的文件系统，互不影响</li>
</ul>
<h1 id="docker的构成"><a href="#docker的构成" class="headerlink" title="docker的构成"></a>docker的构成</h1><p><strong>镜像（image）：</strong></p>
<p>镜像好比java中类，java通过类来创建实例，docker通过镜像来创建一个或多个容器服务。</p>
<p><strong>容器（container）:</strong></p>
<p>利用容器独立运行一个或一组应用，是用过镜像来创建的。</p>
<p><strong>仓库（repository）：</strong></p>
<p>仓库是存放镜像的地方，需要什么环境的镜像就从仓库中直接拿，跟git类似分为公有仓库和私有仓库，docker hub、阿里云都有镜像服务器。</p>
<h1 id="docker的使用"><a href="#docker的使用" class="headerlink" title="docker的使用"></a>docker的使用</h1><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">#1.卸载旧版本</div><div class="line">yum remove docker \</div><div class="line">                  docker-client \</div><div class="line">                  docker-client-latest \</div><div class="line">                  docker-common \</div><div class="line">                  docker-latest \</div><div class="line">                  docker-latest-logrotate \</div><div class="line">                  docker-logrotate \</div><div class="line">                  docker-engine</div><div class="line">#2.需要的安装包</div><div class="line">yum install -y yum-utils</div><div class="line"></div><div class="line">#3.设置镜像的仓库</div><div class="line">yum-config-manager \</div><div class="line">    --add-repo \</div><div class="line">    https://download.docker.com/linux/centos/docker-ce.repo</div><div class="line">#上述方法默认是从国外的，不推荐</div><div class="line"></div><div class="line">#推荐使用国内的</div><div class="line">yum-config-manager \</div><div class="line">    --add-repo \</div><div class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</div><div class="line">    </div><div class="line">#更新yum软件包索引</div><div class="line">yum makecache fast</div><div class="line"></div><div class="line">#4.安装docker相关的 docker-ce 社区版 而ee是企业版</div><div class="line">yum install docker-ce docker-ce-cli containerd.io # 这里我们使用社区版即可</div><div class="line"></div><div class="line">#5.启动docker</div><div class="line">systemctl start docker</div><div class="line"></div><div class="line">#6. 使用docker version查看是否按照成功</div><div class="line">docker version</div><div class="line"></div><div class="line">#7. 测试</div><div class="line">docker run hello-world</div><div class="line">12345678910111213141516171819202122232425262728293031323334353637</div><div class="line">#8.查看已经下载的镜像(从这里可以查看已有镜像的id)</div><div class="line">[root@iz2zeak7sgj6i7hrb2g862z ~]# docker images</div><div class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">hello-world           latest              bf756fb1ae65        4 months ago      13.3kB</div><div class="line">1234</div></pre></td></tr></table></figure>
<h2 id="docker卸载"><a href="#docker卸载" class="headerlink" title="docker卸载"></a>docker卸载</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#1. 卸载依赖</div><div class="line">yum remove docker-ce docker-ce-cli containerd.io</div><div class="line">#2. 删除资源</div><div class="line">rm -rf /var/lib/docker</div></pre></td></tr></table></figure>
<h1 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">attach      Attach local standard input, output, and error streams to a running container</div><div class="line">  #当前shell下 attach连接指定运行的镜像</div><div class="line">  build       Build an image from a Dockerfile # 通过Dockerfile定制镜像</div><div class="line">  commit      Create a new image from a container&apos;s changes #提交当前容器为新的镜像</div><div class="line">  cp          Copy files/folders between a container and the local filesystem #拷贝文件</div><div class="line">  create      Create a new container #创建一个新的容器</div><div class="line">  diff        Inspect changes to files or directories on a container&apos;s filesystem #查看docker容器的变化</div><div class="line">  events      Get real time events from the server # 从服务获取容器实时时间</div><div class="line">  exec        Run a command in a running container # 在运行中的容器上运行命令</div><div class="line">  export      Export a container&apos;s filesystem as a tar archive #导出容器文件系统作为一个tar归档文件[对应import]</div><div class="line">  history     Show the history of an image # 展示一个镜像形成历史</div><div class="line">  images      List images #列出系统当前的镜像</div><div class="line">  import      Import the contents from a tarball to create a filesystem image #从tar包中导入内容创建一个文件系统镜像</div><div class="line">  info        Display system-wide information # 显示全系统信息</div><div class="line">  inspect     Return low-level information on Docker objects #查看容器详细信息</div><div class="line">  kill        Kill one or more running containers # kill指定docker容器</div><div class="line">  load        Load an image from a tar archive or STDIN #从一个tar包或标准输入中加载一个镜像[对应save]</div><div class="line">  login       Log in to a Docker registry # 注册或登录一个 docker 源服务器</div><div class="line">  logout      Log out from a Docker registry</div><div class="line">  logs        Fetch the logs of a container</div><div class="line">  pause       Pause all processes within one or more containers</div><div class="line">  port        List port mappings or a specific mapping for the container</div><div class="line">  ps          List containers</div><div class="line">  pull        Pull an image or a repository from a registry</div><div class="line">  push        Push an image or a repository to a registry</div><div class="line">  rename      Rename a container</div><div class="line">  restart     Restart one or more containers</div><div class="line">  rm          Remove one or more containers</div><div class="line">  rmi         Remove one or more images</div><div class="line">  run         Run a command in a new container</div><div class="line">  save        Save one or more images to a tar archive (streamed to STDOUT by default)</div><div class="line">  search      Search the Docker Hub for images</div><div class="line">  start       Start one or more stopped containers</div><div class="line">  stats       Display a live stream of container(s) resource usage statistics</div><div class="line">  stop        Stop one or more running containers</div><div class="line">  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE</div><div class="line">  top         Display the running processes of a container</div><div class="line">  unpause     Unpause all processes within one or more containers</div><div class="line">  update      Update configuration of one or more containers</div><div class="line">  version     Show the Docker version information</div><div class="line">  wait        Block until one or more containers stop, then print their exit codes</div></pre></td></tr></table></figure>
<h1 id="docker加载原理"><a href="#docker加载原理" class="headerlink" title="docker加载原理"></a>docker加载原理</h1><blockquote>
<p> 联合文件系统</p>
</blockquote>
<p>docker的镜像都是由一层一层的文件系统组成，docker利用文件版本管理来实现分层的复用，比如说镜像1依赖了centos层，docker下载完镜像1会在系统中记录centos的分层，镜像2页依赖了centos层，下载镜像2则不会再重复下载centos层，而是直接复用，简单来说每一层都是一条记录。</p>
<blockquote>
<p>加载原理分析</p>
</blockquote>
<p>平时用到的操作系统是基于 boot file system（bootfs），系统启动需要引导加载，加载内核，之后计算机内存的使用权由boot file system 转交给内核（kernel），boot file system 则被操作系统卸载，这个过程很慢，通常是分钟级别的，这个引导加载器是通用的。</p>
<p>root file system（rootfs），在bootfs之上，对应的操作系统不同的发行版，比如linux系统的centos、ubuntu。</p>
<p>虚拟机技术需要模拟这两种文件系统进行加载，所以系统很慢，而且体积庞大，而docker使用宿主机的内核，无需引导加载（无需boot file system），只需要提供root file system，可以自由精简命令和工具包，所以速度非常快，体积要小很多。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;docker是什么&quot;&gt;&lt;a href=&quot;#docker是什么&quot; class=&quot;headerlink&quot; title=&quot;docker是什么&quot;&gt;&lt;/a&gt;docker是什么&lt;/h1&gt;&lt;p&gt;docker的思想来自于集装箱，将各式各样的服务打包装箱，集装箱与集装箱之间相互隔离，互不影响，这样的话这种不同的服务就都能在一艘船上打包运走而不需要正对不同的集装箱（服务）用不同的船（pc机）运走了，是一种容器化技术。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="docker" scheme="http://yzy755.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud-alibaba操作手册之分布式事务</title>
    <link href="http://yzy755.github.io/2020/03/07/spring-cloud-alibaba%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <id>http://yzy755.github.io/2020/03/07/spring-cloud-alibaba操作手册之分布式事务/</id>
    <published>2020-03-07T08:55:54.000Z</published>
    <updated>2020-11-04T10:34:45.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h2><h2 id="模拟分布式事务异常"><a href="#模拟分布式事务异常" class="headerlink" title="模拟分布式事务异常"></a>模拟分布式事务异常</h2><p>1、创建两个工程 order、pay，pom.xml</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、建两个数据库 order、pay，两个微服务分别访问。</p>
<p>3、分别写两个服务的 application.yml</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8010</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> order</div><div class="line"><span class="attr">  datasource:</span></div><div class="line"><span class="attr">    driver-class-name:</span> com.mysql.cj.jdbc.Driver</div><div class="line"><span class="attr">    username:</span> root</div><div class="line"><span class="attr">    password:</span> <span class="number">123456</span></div><div class="line"><span class="attr">    url:</span> jdbc:mysql://localhost:<span class="number">3306</span>/order</div></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8020</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> pay</div><div class="line"><span class="attr">  datasource:</span></div><div class="line"><span class="attr">    driver-class-name:</span> com.mysql.cj.jdbc.Driver</div><div class="line"><span class="attr">    username:</span> root</div><div class="line"><span class="attr">    password:</span> <span class="number">123456</span></div><div class="line"><span class="attr">    url:</span> jdbc:mysql://localhost:<span class="number">3306</span>/pay</div></pre></td></tr></table></figure>
<p>4、分别写两个 Service</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderService</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate.update(<span class="string">"insert into orders(username) values ('张三')"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayService</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.jdbcTemplate.update(<span class="string">"insert into pay(username) values ('张三')"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5、控制器 Order 通过 RestTemplate 调用 Pay 的服务</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.southwind.service.OrderService;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</div><div class="line"></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> OrderService orderService;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/save"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//订单</span></div><div class="line">        <span class="keyword">this</span>.orderService.save();</div><div class="line">        <span class="keyword">int</span> i = <span class="number">10</span>/<span class="number">0</span>;</div><div class="line">        <span class="comment">//支付</span></div><div class="line">        <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://localhost:8020/save"</span>,String.class);</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.southwind.service.PayService;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> PayService payService;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/save"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.payService.save();</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>6、启动类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(OrderApplication.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(PayApplication.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分布式异常模拟结束，Order 存储完成之后，出现异常，会导致 Pay 无法存储，但是 Order 数据库不会进行回滚。</p>
<h2 id="Seata-解决"><a href="#Seata-解决" class="headerlink" title="Seata 解决"></a>Seata 解决</h2><p>1、下载</p>
<p>2、解压，修改两个文件</p>
<p><img src="/2020/03/07/spring-cloud-alibaba操作手册之分布式事务/1604485504222.png" alt="1604485504222"></p>
<p>regisry.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">registry &#123;</div><div class="line">  type = &quot;nacos&quot;</div><div class="line">  nacos &#123;</div><div class="line">    serverAddr = &quot;localhost&quot;</div><div class="line">    namespace = &quot;public&quot;</div><div class="line">    cluster = &quot;default&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">config &#123;</div><div class="line">  type = &quot;nacos&quot;</div><div class="line">  nacos &#123;</div><div class="line">    serverAddr = &quot;localhost&quot;</div><div class="line">    namespace = &quot;public&quot;</div><div class="line">    cluster = &quot;default&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>nacos-config.txt</p>
<p><img src="/2020/03/07/spring-cloud-alibaba操作手册之分布式事务/1604485606940.png" alt="1604485606940"></p>
<p>3、启动 Nacos，运行 nacos-config.sh 将 Seata 配置导入 Nacos</p>
<p>进入 conf，右键 Git Bash Here</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd conf</div><div class="line">sh nacos-config.sh 127.0.0.1</div></pre></td></tr></table></figure>
<p>执行成功，刷新 Nacos，配置加入</p>
<p><img src="/2020/03/07/spring-cloud-alibaba操作手册之分布式事务/1604485648382.png" alt="1604485648382"></p>
<p>nacos-config.txt 配置已生效</p>
<p><img src="/2020/03/07/spring-cloud-alibaba操作手册之分布式事务/1604485674195.png" alt="1604485674195"></p>
<p>4、启动 Seata Server，  <strong>JDK 8 以上环境无法启动</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd bin</div><div class="line">seata-server.bat -p 8090 -m file</div></pre></td></tr></table></figure>
<p><img src="/2020/03/07/spring-cloud-alibaba操作手册之分布式事务/1604485704673.png" alt="1604485704673"></p>
<p>启动成功，Nacos 注册成功。</p>
<p><img src="/2020/03/07/spring-cloud-alibaba操作手册之分布式事务/1604485730409.png" alt="1604485730409"></p>
<p>Seata 服务环境搭建完毕，接下来去应用中添加。</p>
<p>1、初始化数据库，在两个数据库中添加事务日志记录表，SQL Seata 已经提供。</p>
<p><img src="/2020/03/07/spring-cloud-alibaba操作手册之分布式事务/1604485763591.png" alt="1604485763591"></p>
<p>2、直接在两个数据库运行脚本。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`undo_log`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`branch_id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`xid`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`context`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`rollback_info`</span> longblob <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`log_status`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`log_created`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`log_modified`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">  <span class="string">`ext`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</div><div class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`ux_undo_log`</span> (<span class="string">`xid`</span>,<span class="string">`branch_id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>
<p>3、两个工程的 pom.xml 添加 Seata 组件和 Nacos Config 组件。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>4、给 JDBCTemplate 添加代理数据源</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.seata.rm.datasource.DataSourceProxy;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(OrderApplication.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">(DataSource dataSource)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(<span class="keyword">new</span> DataSourceProxy(dataSource));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.seata.rm.datasource.DataSourceProxy;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.sql.DataSource;</div><div class="line"></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(PayApplication.class, args);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">(DataSource dataSource)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(<span class="keyword">new</span> DataSourceProxy(dataSource));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5、将 registry.conf 复制到两个工程的 resources 下。</p>
<p>6、给两个工程添加 bootstrap.yml 读取 Nacos 配置。</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> order</div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    nacos:</span></div><div class="line"><span class="attr">      config:</span></div><div class="line"><span class="attr">        server-addr:</span> localhost:<span class="number">8848</span></div><div class="line"><span class="attr">        namespace:</span> public</div><div class="line"><span class="attr">        group:</span> SEATA_GROUP</div><div class="line"><span class="attr">    alibaba:</span></div><div class="line"><span class="attr">      seata:</span></div><div class="line"><span class="attr">        tx-service-group:</span> $&#123;spring.application.name&#125;</div></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> pay</div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    nacos:</span></div><div class="line"><span class="attr">      config:</span></div><div class="line"><span class="attr">        server-addr:</span> localhost:<span class="number">8848</span></div><div class="line"><span class="attr">        namespace:</span> public</div><div class="line"><span class="attr">        group:</span> SEATA_GROUP</div><div class="line"><span class="attr">    alibaba:</span></div><div class="line"><span class="attr">      seata:</span></div><div class="line"><span class="attr">        tx-service-group:</span> $&#123;spring.application.name&#125;</div></pre></td></tr></table></figure>
<p>tx-service-group 需要和 Nacos 配置中的名称一致。</p>
<p><img src="/2020/03/07/spring-cloud-alibaba操作手册之分布式事务/1604485804153.png" alt="1604485804153"></p>
<p>7、在 Order 调用 Pay 处添加注解 @GlobalTransactional</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.southwind.service.OrderService;</div><div class="line"><span class="keyword">import</span> io.seata.spring.annotation.GlobalTransactional;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</div><div class="line"></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> OrderService orderService;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/save"</span>)</div><div class="line">    <span class="meta">@GlobalTransactional</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//订单</span></div><div class="line">        <span class="keyword">this</span>.orderService.save();</div><div class="line">        <span class="keyword">int</span> i = <span class="number">10</span>/<span class="number">0</span>;</div><div class="line">        <span class="comment">//支付</span></div><div class="line">        <span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://localhost:8020/save"</span>,String.class);</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分布式事务&quot;&gt;&lt;a href=&quot;#分布式事务&quot; class=&quot;headerlink&quot; title=&quot;分布式事务&quot;&gt;&lt;/a&gt;分布式事务&lt;/h2&gt;&lt;h2 id=&quot;模拟分布式事务异常&quot;&gt;&lt;a href=&quot;#模拟分布式事务异常&quot; class=&quot;headerlink&quot; title=&quot;模拟分布式事务异常&quot;&gt;&lt;/a&gt;模拟分布式事务异常&lt;/h2&gt;&lt;p&gt;1、创建两个工程 order、pay，pom.xml&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="spring-cloud" scheme="http://yzy755.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud-alibaba操作手册之服务网关</title>
    <link href="http://yzy755.github.io/2020/03/06/spring-cloud-alibaba%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C%E4%B9%8B%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/"/>
    <id>http://yzy755.github.io/2020/03/06/spring-cloud-alibaba操作手册之服务网关/</id>
    <published>2020-03-06T03:17:22.000Z</published>
    <updated>2020-11-03T10:28:09.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h2><p>Spring Cloud Gateway 是基于 Netty，跟 Servlet 不兼容，所以你的工程中不能出现 Servlet 的组件 。</p>
<a id="more"></a>
<p>1、pom.xml</p>
<p>注意，一定不能出现 spring web 的依赖，因为 Gateway 与 Servlet 不兼容。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、application.yml</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8010</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> gateway</div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      discovery:</span></div><div class="line"><span class="attr">        locator:</span></div><div class="line"><span class="attr">          enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      routes:</span> </div><div class="line"><span class="attr">        - id:</span> provider_route   </div><div class="line"><span class="attr">          uri:</span> http://localhost:<span class="number">8081</span> </div><div class="line"><span class="attr">          predicates:</span> </div><div class="line"><span class="bullet">            -</span> Path=/provider/** </div><div class="line"><span class="attr">          filters:</span></div><div class="line"><span class="bullet">            -</span> StripPrefix=<span class="number">1</span></div></pre></td></tr></table></figure>
<p>上面这种做法其实没有用到 nacos ，现在我们让 gateway 直接去 nacos 中发现服务，配置更加简单了。</p>
<p>1、pom.xml 引入 nacos</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、application.yml</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8010</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> gateway</div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">      gateway:</span></div><div class="line"><span class="attr">        discovery:</span></div><div class="line"><span class="attr">          locator:</span></div><div class="line"><span class="attr">            enabled:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<h2 id="Gateway-限流"><a href="#Gateway-限流" class="headerlink" title="Gateway 限流"></a>Gateway 限流</h2><p>基于路由限流</p>
<p>1、pom.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-spring-cloud-gateway-adapter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、配置类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayFlowRule;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayRuleManager;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.SentinelGatewayFilter;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.callback.BlockRequestHandler;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.callback.GatewayCallbackManager;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.exception.SentinelGatewayBlockExceptionHandler;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.ObjectProvider;</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</div><div class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.http.codec.ServerCodecConfigurer;</div><div class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.BodyInserters;</div><div class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.ServerResponse;</div><div class="line"><span class="keyword">import</span> org.springframework.web.reactive.result.view.ViewResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</div><div class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayConfiguration</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ViewResolver&gt; viewResolvers;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerCodecConfigurer serverCodecConfigurer;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GatewayConfiguration</span><span class="params">(ObjectProvider&lt;List&lt;ViewResolver&gt;&gt; viewResolversProvider,</span></span></div><div class="line">                                ServerCodecConfigurer serverCodecConfigurer) &#123;</div><div class="line">        <span class="keyword">this</span>.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList);</div><div class="line">        <span class="keyword">this</span>.serverCodecConfigurer = serverCodecConfigurer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//配置限流的异常处理</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</div><div class="line">    <span class="function"><span class="keyword">public</span> SentinelGatewayBlockExceptionHandler <span class="title">sentinelGatewayBlockExceptionHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SentinelGatewayBlockExceptionHandler(viewResolvers, serverCodecConfigurer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//配置初始化的限流参数</span></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initGatewayRules</span><span class="params">()</span></span>&#123;</div><div class="line">        Set&lt;GatewayFlowRule&gt; rules = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">        rules.add(</div><div class="line">                <span class="keyword">new</span> GatewayFlowRule(<span class="string">"provider_route"</span>)</div><div class="line">                .setCount(<span class="number">1</span>)</div><div class="line">                .setIntervalSec(<span class="number">1</span>)</div><div class="line">        );</div><div class="line">        GatewayRuleManager.loadRules(rules);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//初始化限流过滤器</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</div><div class="line">    <span class="function"><span class="keyword">public</span> GlobalFilter <span class="title">sentinelGatewayFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SentinelGatewayFilter();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//自定义限流异常页面</span></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBlockHandlers</span><span class="params">()</span></span>&#123;</div><div class="line">        BlockRequestHandler blockRequestHandler = <span class="keyword">new</span> BlockRequestHandler() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">handleRequest</span><span class="params">(ServerWebExchange serverWebExchange, Throwable throwable)</span> </span>&#123;</div><div class="line">                Map map = <span class="keyword">new</span> HashMap();</div><div class="line">                map.put(<span class="string">"code"</span>,<span class="number">0</span>);</div><div class="line">                map.put(<span class="string">"msg"</span>,<span class="string">"被限流了"</span>);</div><div class="line">                <span class="keyword">return</span> ServerResponse.status(HttpStatus.OK)</div><div class="line">                        .contentType(MediaType.APPLICATION_JSON)</div><div class="line">                        .body(BodyInserters.fromObject(map));</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        GatewayCallbackManager.setBlockHandler(blockRequestHandler);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、application.yml</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8010</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> gateway</div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      discovery:</span></div><div class="line"><span class="attr">        locator:</span></div><div class="line"><span class="attr">          enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      routes:</span></div><div class="line"><span class="attr">        - id:</span> provider_route</div><div class="line"><span class="attr">          uri:</span> http://localhost:<span class="number">8081</span></div><div class="line"><span class="attr">          predicates:</span></div><div class="line"><span class="bullet">            -</span> Path=/provider/**</div><div class="line"><span class="attr">          filters:</span></div><div class="line"><span class="bullet">            -</span> StripPrefix=<span class="number">1</span></div></pre></td></tr></table></figure>
<p>基于 API 分组限流</p>
<p>1、修改配置类，添加基于 API 分组限流的方法，修改初始化的限流参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.SentinelGatewayConstants;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.api.ApiDefinition;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.api.ApiPathPredicateItem;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.api.ApiPredicateItem;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.api.GatewayApiDefinitionManager;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayFlowRule;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.common.rule.GatewayRuleManager;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.SentinelGatewayFilter;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.callback.BlockRequestHandler;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.callback.GatewayCallbackManager;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.gateway.sc.exception.SentinelGatewayBlockExceptionHandler;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.ObjectProvider;</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</div><div class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</div><div class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</div><div class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</div><div class="line"><span class="keyword">import</span> org.springframework.http.codec.ServerCodecConfigurer;</div><div class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.BodyInserters;</div><div class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.ServerResponse;</div><div class="line"><span class="keyword">import</span> org.springframework.web.reactive.result.view.ViewResolver;</div><div class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</div><div class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayConfiguration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ViewResolver&gt; viewResolvers;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerCodecConfigurer serverCodecConfigurer;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GatewayConfiguration</span><span class="params">(ObjectProvider&lt;List&lt;ViewResolver&gt;&gt; viewResolversProvider,</span></span></div><div class="line">                                ServerCodecConfigurer serverCodecConfigurer) &#123;</div><div class="line">        <span class="keyword">this</span>.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList);</div><div class="line">        <span class="keyword">this</span>.serverCodecConfigurer = serverCodecConfigurer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//配置限流的异常处理</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</div><div class="line">    <span class="function"><span class="keyword">public</span> SentinelGatewayBlockExceptionHandler <span class="title">sentinelGatewayBlockExceptionHandler</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SentinelGatewayBlockExceptionHandler(viewResolvers, serverCodecConfigurer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//配置初始化的限流参数</span></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initGatewayRules</span><span class="params">()</span></span>&#123;</div><div class="line">        Set&lt;GatewayFlowRule&gt; rules = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">        rules.add(<span class="keyword">new</span> GatewayFlowRule(<span class="string">"provider_api1"</span>).setCount(<span class="number">1</span>).setIntervalSec(<span class="number">1</span>));</div><div class="line">        rules.add(<span class="keyword">new</span> GatewayFlowRule(<span class="string">"provider_api2"</span>).setCount(<span class="number">1</span>).setIntervalSec(<span class="number">1</span>));</div><div class="line">        GatewayRuleManager.loadRules(rules);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//初始化限流过滤器</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</div><div class="line">    <span class="function"><span class="keyword">public</span> GlobalFilter <span class="title">sentinelGatewayFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SentinelGatewayFilter();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//自定义限流异常页面</span></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBlockHandlers</span><span class="params">()</span></span>&#123;</div><div class="line">        BlockRequestHandler blockRequestHandler = <span class="keyword">new</span> BlockRequestHandler() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">handleRequest</span><span class="params">(ServerWebExchange serverWebExchange, Throwable throwable)</span> </span>&#123;</div><div class="line">                Map map = <span class="keyword">new</span> HashMap();</div><div class="line">                map.put(<span class="string">"code"</span>,<span class="number">0</span>);</div><div class="line">                map.put(<span class="string">"msg"</span>,<span class="string">"被限流了"</span>);</div><div class="line">                <span class="keyword">return</span> ServerResponse.status(HttpStatus.OK)</div><div class="line">                        .contentType(MediaType.APPLICATION_JSON)</div><div class="line">                        .body(BodyInserters.fromObject(map));</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        GatewayCallbackManager.setBlockHandler(blockRequestHandler);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//自定义API分组</span></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initCustomizedApis</span><span class="params">()</span></span>&#123;</div><div class="line">        Set&lt;ApiDefinition&gt; definitions = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">        ApiDefinition api1 = <span class="keyword">new</span> ApiDefinition(<span class="string">"provider_api1"</span>)</div><div class="line">                .setPredicateItems(<span class="keyword">new</span> HashSet&lt;ApiPredicateItem&gt;()&#123;&#123;</div><div class="line">                    add(<span class="keyword">new</span> ApiPathPredicateItem().setPattern(<span class="string">"/provider/api1/**"</span>)</div><div class="line">                            .setMatchStrategy(SentinelGatewayConstants.URL_MATCH_STRATEGY_PREFIX));</div><div class="line">                &#125;&#125;);</div><div class="line">        ApiDefinition api2 = <span class="keyword">new</span> ApiDefinition(<span class="string">"provider_api2"</span>)</div><div class="line">                .setPredicateItems(<span class="keyword">new</span> HashSet&lt;ApiPredicateItem&gt;()&#123;&#123;</div><div class="line">                    add(<span class="keyword">new</span> ApiPathPredicateItem().setPattern(<span class="string">"/provider/api2/demo1"</span>));</div><div class="line">                &#125;&#125;);</div><div class="line">        definitions.add(api1);</div><div class="line">        definitions.add(api2);</div><div class="line">        GatewayApiDefinitionManager.loadApiDefinitions(definitions);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、Controller 添加方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/api1/demo1"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"demo"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/api1/demo2"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo2</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"demo"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/api2/demo1"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo3</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"demo"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/api2/demo2"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo4</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"demo"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以基于 Nacos 服务发现组件进行限流</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8010</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> gateway</div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    gateway:</span></div><div class="line"><span class="attr">      discovery:</span></div><div class="line"><span class="attr">        locator:</span></div><div class="line"><span class="attr">          enabled:</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>API 分组代码修改，改为 discovery 中的服务名。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ApiDefinition api2 = <span class="keyword">new</span> ApiDefinition(<span class="string">"provider_api2"</span>)</div><div class="line">        .setPredicateItems(<span class="keyword">new</span> HashSet&lt;ApiPredicateItem&gt;()&#123;&#123;</div><div class="line">            add(<span class="keyword">new</span> ApiPathPredicateItem().setPattern(<span class="string">"/p1/api2/demo1"</span>));</div><div class="line">        &#125;&#125;);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;服务网关&quot;&gt;&lt;a href=&quot;#服务网关&quot; class=&quot;headerlink&quot; title=&quot;服务网关&quot;&gt;&lt;/a&gt;服务网关&lt;/h2&gt;&lt;p&gt;Spring Cloud Gateway 是基于 Netty，跟 Servlet 不兼容，所以你的工程中不能出现 Servlet 的组件 。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="spring-cloud" scheme="http://yzy755.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud-alibaba操作手册之整合 RocketMQ</title>
    <link href="http://yzy755.github.io/2020/03/05/spring-cloud-alibaba%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C%E4%B9%8B%E6%95%B4%E5%90%88%20RocketMQ/"/>
    <id>http://yzy755.github.io/2020/03/05/spring-cloud-alibaba操作手册之整合 RocketMQ/</id>
    <published>2020-03-05T09:23:40.000Z</published>
    <updated>2020-11-04T10:41:37.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整合-RocketMQ"><a href="#整合-RocketMQ" class="headerlink" title="整合 RocketMQ"></a>整合 RocketMQ</h2><h3 id="安装-RocketMQ"><a href="#安装-RocketMQ" class="headerlink" title="安装 RocketMQ"></a>安装 RocketMQ</h3><p>1、传入 Linux 服务器</p>
<p>2、解压缩</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unzip rocketmq-all-4.7.1-bin-release.zip</div></pre></td></tr></table></figure>
<p>3、启动 NameServer</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup ./bin/mqnamesrv &amp;</div></pre></td></tr></table></figure>
<p>4、检查是否启动成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -an | grep 9876</div></pre></td></tr></table></figure>
<p><img src="/2020/03/05/spring-cloud-alibaba操作手册之整合 RocketMQ/1604486306694.png" alt="1604486306694"></p>
<p>5、启动 Broker</p>
<p>启动之前需要编辑配置文件，修改 JVM 内存设置，默认给的内存 4 GB，超过我们的 JVM 了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd bin</div><div class="line">vim runserver.sh</div></pre></td></tr></table></figure>
<p><img src="/2020/03/05/spring-cloud-alibaba操作手册之整合 RocketMQ/1604486343246.png" alt="1604486343246"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim runbroker.sh</div></pre></td></tr></table></figure>
<p><img src="/2020/03/05/spring-cloud-alibaba操作手册之整合 RocketMQ/1604486364259.png" alt="1604486364259"></p>
<p>启动 Broker</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup ./mqbroker -n localhost:9876 &amp;</div></pre></td></tr></table></figure>
<p>可以查看日志</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail -f ~/logs/rocketmqlogs/broker.log</div></pre></td></tr></table></figure>
<p><img src="/2020/03/05/spring-cloud-alibaba操作手册之整合 RocketMQ/1604486386015.png" alt="1604486386015"></p>
<p>启动成功</p>
<p>6、测试 RocketMQ</p>
<p>消息发送</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd bin</div><div class="line">export NAMESRV_ADDR=localhost:9876</div><div class="line">./tools.sh org.apache.rocketmq.example.quickstart.Producer</div></pre></td></tr></table></figure>
<p>消息接收</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd bin</div><div class="line">export NAMESRV_ADDR=localhost:9876</div><div class="line">./tools.sh org.apache.rocketmq.example.quickstart.Consumer</div></pre></td></tr></table></figure>
<p>7、关闭 RocketMQ</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd bin</div><div class="line">./mqshutdown broker</div><div class="line">./mqshutdown namesrv</div></pre></td></tr></table></figure>
<h3 id="安装-RocketMQ-控制台"><a href="#安装-RocketMQ-控制台" class="headerlink" title="安装 RocketMQ 控制台"></a>安装 RocketMQ 控制台</h3><p>1、解压缩，修改配置，打包</p>
<p><img src="/2020/03/05/spring-cloud-alibaba操作手册之整合 RocketMQ/1604486413542.png" alt="1604486413542"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn clean package -Dmaven.test.skip=true</div></pre></td></tr></table></figure>
<p><img src="/2020/03/05/spring-cloud-alibaba操作手册之整合 RocketMQ/1604486431359.png" alt="1604486431359"></p>
<p>2、进入 target 启动 jar</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar rocketmq-console-ng-1.0.0.jar</div></pre></td></tr></table></figure>
<p><img src="/2020/03/05/spring-cloud-alibaba操作手册之整合 RocketMQ/1604486448601.png" alt="1604486448601"></p>
<p>打开浏览器访问 localhost:9877，如果报错</p>
<p><img src="/2020/03/05/spring-cloud-alibaba操作手册之整合 RocketMQ/1604486464540.png" alt="1604486464540"></p>
<p>这是因为我们的 RocketMQ 安装在 Linux 中，控制台在 windows，Linux 需要开放端口才能访问，开放 10909 和 9876 端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --zone=public --add-port=10909/tcp --permanent</div><div class="line">firewall-cmd --zone=public --add-port=9876/tcp --permanent</div><div class="line">systemctl restart firewalld.service</div><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure>
<p>重新启动控制台项目</p>
<p><img src="/2020/03/05/spring-cloud-alibaba操作手册之整合 RocketMQ/1604486483836.png" alt="1604486483836"></p>
<h3 id="Java-实现消息发送"><a href="#Java-实现消息发送" class="headerlink" title="Java 实现消息发送"></a>Java 实现消息发送</h3><p>1、pom.xml 中引入依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、生产消息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.DefaultMQProducer;</div><div class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendResult;</div><div class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.Message;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">//创建消息生产者</span></div><div class="line">        DefaultMQProducer producer = <span class="keyword">new</span> DefaultMQProducer(<span class="string">"myproducer-group"</span>);</div><div class="line">        <span class="comment">//设置NameServer</span></div><div class="line">        producer.setNamesrvAddr(<span class="string">"192.168.248.129:9876"</span>);</div><div class="line">        <span class="comment">//启动生产者</span></div><div class="line">        producer.start();</div><div class="line">        <span class="comment">//构建消息对象</span></div><div class="line">        Message message = <span class="keyword">new</span> Message(<span class="string">"myTopic"</span>,<span class="string">"myTag"</span>,(<span class="string">"Test MQ"</span>).getBytes());</div><div class="line">        <span class="comment">//发送消息</span></div><div class="line">        SendResult result = producer.send(message, <span class="number">1000</span>);</div><div class="line">        System.out.println(result);</div><div class="line">        <span class="comment">//关闭生产者</span></div><div class="line">        producer.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、直接运行，如果报错 sendDefaultImpl call timeout，可以开放 10911 端口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --zone=public --add-port=10911/tcp --permanent</div><div class="line">systemctl restart firewalld.service</div><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure>
<p>打开 RocketMQ 控制台，可查看消息。</p>
<h3 id="Java-实现消息消费"><a href="#Java-实现消息消费" class="headerlink" title="Java 实现消息消费"></a>Java 实现消息消费</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</div><div class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;</div><div class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;</div><div class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;</div><div class="line"><span class="keyword">import</span> org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;</div><div class="line"><span class="keyword">import</span> org.apache.rocketmq.client.exception.MQClientException;</div><div class="line"><span class="keyword">import</span> org.apache.rocketmq.common.message.MessageExt;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="meta">@Slf</span>4j</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MQClientException </span>&#123;</div><div class="line">        <span class="comment">//创建消息消费者</span></div><div class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"myconsumer-group"</span>);</div><div class="line">        <span class="comment">//设置NameServer</span></div><div class="line">        consumer.setNamesrvAddr(<span class="string">"192.168.248.129:9876"</span>);</div><div class="line">        <span class="comment">//指定订阅的主题和标签</span></div><div class="line">        consumer.subscribe(<span class="string">"myTopic"</span>,<span class="string">"*"</span>);</div><div class="line">        <span class="comment">//回调函数</span></div><div class="line">        consumer.registerMessageListener(<span class="keyword">new</span> MessageListenerConcurrently() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> ConsumeConcurrentlyStatus <span class="title">consumeMessage</span><span class="params">(List&lt;MessageExt&gt; list, ConsumeConcurrentlyContext consumeConcurrentlyContext)</span> </span>&#123;</div><div class="line">                log.info(<span class="string">"Message=&gt;&#123;&#125;"</span>,list);</div><div class="line">                <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">//启动消费者</span></div><div class="line">        consumer.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Spring-Boot-整合-RocketMQ"><a href="#Spring-Boot-整合-RocketMQ" class="headerlink" title="Spring Boot 整合 RocketMQ"></a>Spring Boot 整合 RocketMQ</h3><blockquote>
<p>provider</p>
</blockquote>
<p>1、pom.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、application.yml</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">rocketmq:</span></div><div class="line"><span class="attr">  name-server:</span> <span class="number">192.168</span><span class="number">.248</span><span class="number">.129</span>:<span class="number">9876</span></div><div class="line"><span class="attr">  producer:</span></div><div class="line"><span class="attr">    group:</span> myprovider</div></pre></td></tr></table></figure>
<p>3、Order</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.entity;</div><div class="line"></div><div class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</div><div class="line"><span class="keyword">import</span> lombok.Data;</div><div class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"></div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="meta">@AllArgsConstructor</span></div><div class="line"><span class="meta">@NoArgsConstructor</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line">    <span class="keyword">private</span> String buyerName;</div><div class="line">    <span class="keyword">private</span> String buyerTel;</div><div class="line">    <span class="keyword">private</span> String address;</div><div class="line">    <span class="keyword">private</span> Date createDate;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4、Controller</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> RocketMQTemplate rocketMQTemplate;</div><div class="line"></div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/create"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> Order <span class="title">create</span><span class="params">()</span></span>&#123;</div><div class="line">    Order order = <span class="keyword">new</span> Order(</div><div class="line">        <span class="number">1</span>,</div><div class="line">        <span class="string">"张三"</span>,</div><div class="line">        <span class="string">"123123"</span>,</div><div class="line">        <span class="string">"软件园"</span>,</div><div class="line">        <span class="keyword">new</span> Date()</div><div class="line">    );</div><div class="line">    <span class="keyword">this</span>.rocketMQTemplate.convertAndSend(<span class="string">"myTopic"</span>,order);</div><div class="line">    <span class="keyword">return</span> order;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>consumer</p>
</blockquote>
<p>1、pom.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、application.yml</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">rocketmq:</span></div><div class="line"><span class="attr">  name-server:</span> <span class="number">192.168</span><span class="number">.248</span><span class="number">.129</span>:<span class="number">9876</span></div></pre></td></tr></table></figure>
<p>3、Service</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Slf</span>4j</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="meta">@RocketMQMessageListener</span>(consumerGroup = <span class="string">"myConsumer"</span>,topic = <span class="string">"myTopic"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsService</span> <span class="keyword">implements</span> <span class="title">RocketMQListener</span>&lt;<span class="title">Order</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Order order)</span> </span>&#123;</div><div class="line">        log.info(<span class="string">"新订单&#123;&#125;,发短信"</span>,order);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;整合-RocketMQ&quot;&gt;&lt;a href=&quot;#整合-RocketMQ&quot; class=&quot;headerlink&quot; title=&quot;整合 RocketMQ&quot;&gt;&lt;/a&gt;整合 RocketMQ&lt;/h2&gt;&lt;h3 id=&quot;安装-RocketMQ&quot;&gt;&lt;a href=&quot;#安装-RocketMQ&quot; class=&quot;headerlink&quot; title=&quot;安装 RocketMQ&quot;&gt;&lt;/a&gt;安装 RocketMQ&lt;/h3&gt;&lt;p&gt;1、传入 Linux 服务器&lt;/p&gt;
&lt;p&gt;2、解压缩&lt;/p&gt;
    
    </summary>
    
      <category term="工作实践 学习笔记" scheme="http://yzy755.github.io/categories/%E5%B7%A5%E4%BD%9C%E5%AE%9E%E8%B7%B5-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="spring-cloud" scheme="http://yzy755.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud-alibaba操作手册之Sentinel 服务限流降级</title>
    <link href="http://yzy755.github.io/2020/03/04/spring-cloud-alibaba%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C%E4%B9%8BSentinel%20%E6%9C%8D%E5%8A%A1%E9%99%90%E6%B5%81%E9%99%8D%E7%BA%A7/"/>
    <id>http://yzy755.github.io/2020/03/04/spring-cloud-alibaba操作手册之Sentinel 服务限流降级/</id>
    <published>2020-03-04T07:20:21.000Z</published>
    <updated>2020-11-03T10:27:26.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sentinel-服务限流降级"><a href="#Sentinel-服务限流降级" class="headerlink" title="Sentinel 服务限流降级"></a>Sentinel 服务限流降级</h2><p>雪崩效应：有A服务的不可用导致的B、C…服务不可用的现象</p>
<p>解决方案</p>
<p>1、设置线程超时</p>
<p>2、设置限流</p>
<p>3、熔断器 Sentinel、Hystrix</p>
<a id="more"></a>
<p>1、pom.xml 引入依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、application 配置</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">management:</span></div><div class="line"><span class="attr">  endpoints:</span></div><div class="line"><span class="attr">    web:</span></div><div class="line"><span class="attr">      exposure:</span></div><div class="line"><span class="attr">        include:</span> <span class="string">'*'</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    sentinel:</span></div><div class="line"><span class="attr">      transport:</span></div><div class="line"><span class="attr">        dashboard:</span> localhost:<span class="number">8080</span></div></pre></td></tr></table></figure>
<p>3、下载 Sentinel 控制台，解压，启动。</p>
<h2 id="流控规则"><a href="#流控规则" class="headerlink" title="流控规则"></a>流控规则</h2><blockquote>
<p>直接限流</p>
<p>关联限流</p>
<p>链路限流</p>
</blockquote>
<p>1、pom.xml 添加依赖</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-web-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>2、application.yml</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line">	cloud:</div><div class="line"><span class="attr">        sentinel:</span></div><div class="line"><span class="attr">          filter:</span></div><div class="line"><span class="attr">            enabled:</span> <span class="literal">false</span></div></pre></td></tr></table></figure>
<p>3、写配置类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.servlet.CommonFilter;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterConfiguration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">registrationBean</span><span class="params">()</span></span>&#123;</div><div class="line">        FilterRegistrationBean registrationBean = <span class="keyword">new</span> FilterRegistrationBean();</div><div class="line">        registrationBean.setFilter(<span class="keyword">new</span> CommonFilter());</div><div class="line">        registrationBean.addUrlPatterns(<span class="string">"/*"</span>);</div><div class="line">        registrationBean.addInitParameter(CommonFilter.WEB_CONTEXT_UNIFY,<span class="string">"false"</span>);</div><div class="line">        registrationBean.setName(<span class="string">"sentinelFilter"</span>);</div><div class="line">        <span class="keyword">return</span> registrationBean;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>4、Service</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@SentinelResource</span>(<span class="string">"test"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"test"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5、Controller</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test1"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.helloService.test();</div><div class="line">    <span class="keyword">return</span> <span class="string">"test1"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test2"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.helloService.test();</div><div class="line">    <span class="keyword">return</span> <span class="string">"test2"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h2><blockquote>
<p>快速失败</p>
</blockquote>
<p>直接抛出异常</p>
<blockquote>
<p>Warm UP</p>
</blockquote>
<p>给系统一个预热的时间，预热时间段内单机阈值较低，预热时间过后单机阈值增加，预热时间内当前的单机阈值是设置的阈值的三分之一，预热时间过后单机阈值恢复设置的值。</p>
<blockquote>
<p>排队等待</p>
</blockquote>
<p>当请求调用失败之后，不会立即抛出异常，等待下一次调用，时间范围是超时时间，在时间范围内如果能请求成功则不抛出异常，如果请求则抛出异常。</p>
<h2 id="降级规则"><a href="#降级规则" class="headerlink" title="降级规则"></a>降级规则</h2><blockquote>
<p>RT</p>
</blockquote>
<p>单个请求的响应时间超过阈值，则进入准降级状态，接下来 1 S 内连续 5 个请求响应时间均超过阈值，就进行降级，持续时间为时间窗口的值。</p>
<blockquote>
<p>异常比例</p>
</blockquote>
<p>每秒异常数量占通过量的比例大于阈值，就进行降级处理，持续时间为时间窗口的值。</p>
<blockquote>
<p>异常数</p>
</blockquote>
<p>1 分钟内的异常数超过阈值就进行降级处理，时间窗口的值要大于 60S，否则刚结束熔断又进入下一次熔断了。</p>
<h2 id="热点规则"><a href="#热点规则" class="headerlink" title="热点规则"></a>热点规则</h2><p>热点规则是流控规则的更细粒度操作，可以具体到对某个热点参数的限流，设置限流之后，如果带着限流参数的请求量超过阈值，则进行限流，时间为统计窗口时长。</p>
<p>必须要添加 @SentinelResource，即对资源进行流控。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/hot"</span>)</div><div class="line"><span class="meta">@SentinelResource</span>(<span class="string">"hot"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hot</span><span class="params">(</span></span></div><div class="line">        @RequestParam(value = <span class="string">"num1"</span>,required = <span class="keyword">false</span>) Integer num1,</div><div class="line">        @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"num2"</span>,required = <span class="keyword">false</span>)</span> Integer num2)&#123;</div><div class="line">    <span class="keyword">return</span> num1+<span class="string">"-"</span>+num2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="授权规则"><a href="#授权规则" class="headerlink" title="授权规则"></a>授权规则</h2><p>给指定的资源设置流控应用（追加参数），可以对流控应用进行访问权限的设置，具体就是添加白名单和黑名单。</p>
<p>如何给请求指定流控应用，通过实现 RequestOriginParser 接口来完成，代码如下所示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.servlet.callback.RequestOriginParser;</div><div class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestOriginParserDefinition</span> <span class="keyword">implements</span> <span class="title">RequestOriginParser</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">parseOrigin</span><span class="params">(HttpServletRequest httpServletRequest)</span> </span>&#123;</div><div class="line">        String name = httpServletRequest.getParameter(<span class="string">"name"</span>);</div><div class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(name))&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"name is null"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要让 RequestOriginParserDefinition 生效，需要在配置类中进行配置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.servlet.callback.WebCallbackManager;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelConfiguration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">        WebCallbackManager.setRequestOriginParser(<span class="keyword">new</span> RequestOriginParserDefinition());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自定义规则异常返回"><a href="#自定义规则异常返回" class="headerlink" title="自定义规则异常返回"></a>自定义规则异常返回</h2><p>创建异常处理类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.southwind.handler;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.servlet.callback.UrlBlockHandler;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeException;</div><div class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowException;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandler</span> <span class="keyword">implements</span> <span class="title">UrlBlockHandler</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">blocked</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, BlockException e)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        httpServletResponse.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</div><div class="line">        String msg = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> FlowException)&#123;</div><div class="line">            msg = <span class="string">"限流"</span>;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> DegradeException)&#123;</div><div class="line">            msg = <span class="string">"降级"</span>;</div><div class="line">        &#125;</div><div class="line">        httpServletResponse.getWriter().write(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>进行配置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SentinelConfiguration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">        WebCallbackManager.setUrlBlockHandler(<span class="keyword">new</span> ExceptionHandler());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Sentinel-服务限流降级&quot;&gt;&lt;a href=&quot;#Sentinel-服务限流降级&quot; class=&quot;headerlink&quot; title=&quot;Sentinel 服务限流降级&quot;&gt;&lt;/a&gt;Sentinel 服务限流降级&lt;/h2&gt;&lt;p&gt;雪崩效应：有A服务的不可用导致的B、C…服务不可用的现象&lt;/p&gt;
&lt;p&gt;解决方案&lt;/p&gt;
&lt;p&gt;1、设置线程超时&lt;/p&gt;
&lt;p&gt;2、设置限流&lt;/p&gt;
&lt;p&gt;3、熔断器 Sentinel、Hystrix&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="spring-cloud" scheme="http://yzy755.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud-alibaba操作手册之Ribbon 负载均衡</title>
    <link href="http://yzy755.github.io/2020/03/03/spring-cloud-alibaba%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C%E4%B9%8BRibbon%20%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://yzy755.github.io/2020/03/03/spring-cloud-alibaba操作手册之Ribbon 负载均衡/</id>
    <published>2020-03-03T02:50:20.000Z</published>
    <updated>2020-11-03T10:27:12.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ribbon-负载均衡"><a href="#Ribbon-负载均衡" class="headerlink" title="Ribbon 负载均衡"></a>Ribbon 负载均衡</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@LoadBalanced</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/index"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"consumer远程调用provier："</span>+<span class="keyword">this</span>.restTemplate.getForObject(<span class="string">"http://provider/index"</span>, String.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>随机</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8180</span></div><div class="line"><span class="attr">provider:</span></div><div class="line"><span class="attr">  ribbon:</span></div><div class="line"><span class="attr">    NFLoadBalancerRuleClassName:</span> com.netflix.loadbalancer.RandomRule</div></pre></td></tr></table></figure>
<blockquote>
<p>Nacos 权重</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Slf</span>4j</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosWeightedRule</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerRule</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> NacosDiscoveryProperties nacosDiscoveryProperties;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWithNiwsConfig</span><span class="params">(IClientConfig iClientConfig)</span> </span>&#123;</div><div class="line">        <span class="comment">//读取配置文件</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        ILoadBalancer loadBalancer = <span class="keyword">this</span>.getLoadBalancer();</div><div class="line">        BaseLoadBalancer baseLoadBalancer = (BaseLoadBalancer) loadBalancer;</div><div class="line">        <span class="comment">//获取要请求的微服务名称</span></div><div class="line">        String name = baseLoadBalancer.getName();</div><div class="line">        <span class="comment">//获取服务发现的相关API</span></div><div class="line">        NamingService namingService = nacosDiscoveryProperties.namingServiceInstance();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Instance instance = namingService.selectOneHealthyInstance(name);</div><div class="line">            log.info(<span class="string">"选择的实例是port=&#123;&#125;,instance=&#123;&#125;"</span>,instance.getPort(),instance);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NacosServer(instance);</div><div class="line">        &#125; <span class="keyword">catch</span> (NacosException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8180</span></div><div class="line"><span class="attr">provider:</span></div><div class="line"><span class="attr">  ribbon:</span></div><div class="line"><span class="attr">    NFLoadBalancerRuleClassName:</span> com.southwind.configuration.NacosWeightedRule</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ribbon-负载均衡&quot;&gt;&lt;a href=&quot;#Ribbon-负载均衡&quot; class=&quot;headerlink&quot; title=&quot;Ribbon 负载均衡&quot;&gt;&lt;/a&gt;Ribbon 负载均衡&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ConsumerConfig&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@LoadBalanced&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; RestTemplate &lt;span class=&quot;title&quot;&gt;restTemplate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RestTemplate();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="spring-cloud" scheme="http://yzy755.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud-alibaba操作手册之Nacos 服务发现与调用</title>
    <link href="http://yzy755.github.io/2020/03/03/spring-cloud-alibaba%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C%E4%B9%8BNacos%20%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B0%83%E7%94%A8/"/>
    <id>http://yzy755.github.io/2020/03/03/spring-cloud-alibaba操作手册之Nacos 服务发现与调用/</id>
    <published>2020-03-03T02:50:20.000Z</published>
    <updated>2020-11-03T10:27:02.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nacos-服务发现与调用"><a href="#Nacos-服务发现与调用" class="headerlink" title="Nacos 服务发现与调用"></a>Nacos 服务发现与调用</h2><p>pom.xml 添加 discovery，完成服务发现。</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过 discoveryClient 发现注册到 nacos 中的 provider 服务。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/instances"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;ServiceInstance&gt; <span class="title">instances</span><span class="params">()</span></span>&#123;</div><div class="line">        List&lt;ServiceInstance&gt; provider = discoveryClient.getInstances(<span class="string">"provider"</span>);</div><div class="line">        <span class="keyword">return</span> provider;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/index"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</div><div class="line">        List&lt;ServiceInstance&gt; provider = discoveryClient.getInstances(<span class="string">"provider"</span>);</div><div class="line">        <span class="keyword">int</span> index = ThreadLocalRandom.current().nextInt(provider.size());</div><div class="line">        String url = provider.get(index).getUri()+<span class="string">"/index"</span>;</div><div class="line">        <span class="keyword">return</span> <span class="string">"consumer随机远程调用provier："</span>+<span class="keyword">this</span>.restTemplate.getForObject(url, String.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Nacos-服务发现与调用&quot;&gt;&lt;a href=&quot;#Nacos-服务发现与调用&quot; class=&quot;headerlink&quot; title=&quot;Nacos 服务发现与调用&quot;&gt;&lt;/a&gt;Nacos 服务发现与调用&lt;/h2&gt;&lt;p&gt;pom.xml 添加 discovery，完成服务发现。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="spring-cloud" scheme="http://yzy755.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud-alibaba操作手册之Nacos 服务注册</title>
    <link href="http://yzy755.github.io/2020/03/03/spring-cloud-alibaba%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C%E4%B9%8BNacos%20%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C/"/>
    <id>http://yzy755.github.io/2020/03/03/spring-cloud-alibaba操作手册之Nacos 服务注册/</id>
    <published>2020-03-03T02:17:20.000Z</published>
    <updated>2020-11-03T10:26:50.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nacos-服务注册"><a href="#Nacos-服务注册" class="headerlink" title="Nacos 服务注册"></a>Nacos 服务注册</h2><p>解压，启动服务。</p>
<p>Nacos 搭建成功，接下来注册服务。</p>
<p>在父工程路径下创建子工程，让子工程继承父工程的环境依赖，pom.xml 中添加 nacos 发现组件。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>application.yml 中配置</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    nacos:</span></div><div class="line"><span class="attr">      discovery:</span></div><div class="line">        <span class="comment"># 指定nacos server地址</span></div><div class="line"><span class="attr">        server-addr:</span> localhost:<span class="number">8848</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> my-nacos</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Nacos-服务注册&quot;&gt;&lt;a href=&quot;#Nacos-服务注册&quot; class=&quot;headerlink&quot; title=&quot;Nacos 服务注册&quot;&gt;&lt;/a&gt;Nacos 服务注册&lt;/h2&gt;&lt;p&gt;解压，启动服务。&lt;/p&gt;
&lt;p&gt;Nacos 搭建成功，接下来注册服务。&lt;/p
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="spring-cloud" scheme="http://yzy755.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>spring-cloud-alibaba操作手册之创建父工程</title>
    <link href="http://yzy755.github.io/2020/03/02/spring-cloud-alibaba%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C%E4%B9%8B%E5%88%9B%E5%BB%BA%E7%88%B6%E5%B7%A5%E7%A8%8B/"/>
    <id>http://yzy755.github.io/2020/03/02/spring-cloud-alibaba操作手册之创建父工程/</id>
    <published>2020-03-02T09:17:53.000Z</published>
    <updated>2020-11-04T10:19:36.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建父工程"><a href="#创建父工程" class="headerlink" title="创建父工程"></a>创建父工程</h2><p>Spring Cloud Alibaba 的环境在父工程中创建，微服务的各个组件作为子工程，继承父工程的环境。</p>
<p>Spring Boot —》Spring Cloud —》Spring Cloud Alibaba</p>
<a id="more"></a>
<p>毕业版本</p>
<p><img src="/2020/03/02/spring-cloud-alibaba操作手册之创建父工程/1604394487849.png" alt="1604394487849"></p>
<p>pom.xml 中添加。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Spring Cloud Hoxton --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Spring Cloud Alibaba --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建父工程&quot;&gt;&lt;a href=&quot;#创建父工程&quot; class=&quot;headerlink&quot; title=&quot;创建父工程&quot;&gt;&lt;/a&gt;创建父工程&lt;/h2&gt;&lt;p&gt;Spring Cloud Alibaba 的环境在父工程中创建，微服务的各个组件作为子工程，继承父工程的环境。&lt;/p&gt;
&lt;p&gt;Spring Boot —》Spring Cloud —》Spring Cloud Alibaba&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="spring-cloud" scheme="http://yzy755.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>JAVA内存模型</title>
    <link href="http://yzy755.github.io/2019/06/05/JAVA%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yzy755.github.io/2019/06/05/JAVA内存模型/</id>
    <published>2019-06-05T13:22:51.000Z</published>
    <updated>2020-11-24T10:03:19.373Z</updated>
    
    <content type="html"><![CDATA[<p>JAVA内存模型 即 Java Memory Model 即 JMM，它定义了主存、工作内存抽象概念，底层对应着 CPU 寄存器、缓存、硬件内存、CPU 指令优化等。<br>JMM 体现在以下几个方面</p>
<pre><code>* 原子性 - 保证指令不会受到线程上下文切换的影响
* 可见性 - 保证指令不会受 cpu 缓存的影响
* 有序性 - 保证指令不会受 cpu 指令并行优化的影响
</code></pre><a id="more"></a>
<p>既然JMM需要规范这个三个方面，那么势必在某些情况下我们的java程序会因为这个三个方便产生问题咯，什么情况下呢，就是多线程并发使用共享资源的时候，我们一步一步来说</p>
<h1 id="原子性问题"><a href="#原子性问题" class="headerlink" title="原子性问题"></a>原子性问题</h1><p>如果一个语句执行一个单独不可分割的指令，那么它是原子的。严格的原子操作排除了任何抢占的可能性，更方便的理解是这个值永远是最新的 <strong>一个或多个操作，要么全部执行且在执行过程中不被任何因素打断</strong> </p>
<p>在学线程并发执行临界区代码时就容易发生非原子性操作，比如i++操作，保证原子性可以用synchronized、Lock独占锁解决，也可使用cas无锁机制解决</p>
<h1 id="可见性问题"><a href="#可见性问题" class="headerlink" title="可见性问题"></a>可见性问题</h1><h2 id="cpu缓存结构"><a href="#cpu缓存结构" class="headerlink" title="cpu缓存结构"></a>cpu缓存结构</h2><p>现在的cpu都是多核的（单核cpu不存在线程并发请求临界资源问题），而且运行速度非常块，然而我们的存储设备（内存，硬盘）得读取速度远远跟不上的运算速度，所有就有了多级缓存（还有寄存器也可以看作缓存）</p>
<p>结构如图：<img src="/2019/06/05/JAVA内存模型/1604914627101.png" alt="1604914627101"></p>
<p>不同线程在不同cpu核心上对临界资源进行读写就存在缓存一致性的问题，因为不同CPU核心上的线程如果缓存了同一份主存上的数据然后进行写操作，线程彼此之间是不可见的，最后更新主存值的时候就会不准确，解决这个问题的办法就是禁用CPU缓存，让线程每次都去主存上读写数据，java使用 volatile 关键字来确保变量的可见性，当然，使用synchronized关键字来修饰代码块也是可以保证的。</p>
<h1 id="有序性问题"><a href="#有序性问题" class="headerlink" title="有序性问题"></a>有序性问题</h1><p>JVM 会在不影响正确性的前提下，可以调整语句的执行顺序，来充分发挥CPU运算单元的效率，前提是要符合as-if-serial语义，操作与操作之间要符合 happens-before 规则</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">as-if-serial语义：不管怎么重排序，单线程程序的执行结果不能被改变。编译器、处理器都必须遵守as-if-serial语义</div><div class="line"></div><div class="line">happens-before 反映在以下几种情况：</div><div class="line">	1、线程解锁 m 之前对变量的写，对于接下来对 m 加锁的其它线程对该变量的读可见</div><div class="line">	2、线程对 volatile 变量的写，对接下来其它线程对该变量的读可见</div><div class="line">	3、线程结束前对变量的写，对其它线程得知它结束后的读可见（比如其它线程调用 t1.isAlive() 或t1.join()等待它结束）</div><div class="line">	4、线程 t1 打断 t2（interrupt）前对变量的写，对于其他线程得知 t2 被打断后对变量的读可见（通过t2.interrupted 或 t2.isInterrupted）</div><div class="line">	5、具有传递性，如果 x hb-&gt; y 并且 y hb-&gt; z 那么有 x hb-&gt; z</div></pre></td></tr></table></figure>
<p>在java中，使用volatile关键字修饰变量可以防止指令重排序来解决有序性问题。</p>
<h1 id="volatile原理"><a href="#volatile原理" class="headerlink" title="volatile原理"></a>volatile原理</h1><p>volatile 的底层是通过对变量增加内存屏障（Memory Fence），内存屏障包含两种：读屏障、写屏障，对 volatile 变量的写指令后会加入写屏障对 volatile 变量的读指令前会加入读屏障</p>
<h2 id="如何保证可见性"><a href="#如何保证可见性" class="headerlink" title="如何保证可见性"></a>如何保证可见性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">读屏障：保证在该屏障之后，对共享变量的读取加载的是主存中的最新数据</div><div class="line">写屏障：保证在该屏障之前，对贡献变量的改动都同不到主存中去</div></pre></td></tr></table></figure>
<p>可以理解为被volatile修饰的共享变量的读写跳过CPU缓存，直接操作主存，而且有意思的是在写屏障之前的非volatile修饰的共享变量也能保证可见性</p>
<h2 id="如何保证有序性"><a href="#如何保证有序性" class="headerlink" title="如何保证有序性"></a>如何保证有序性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">* 写屏障会确保指令重排序时，不会将写屏障之前的代码排在写屏障之后</div><div class="line">* 读屏障会确保指令重排序时，不会将读屏障之后的代码排在读屏障之前</div></pre></td></tr></table></figure>
<h2 id="为什么不能保证原子性"><a href="#为什么不能保证原子性" class="headerlink" title="为什么不能保证原子性"></a>为什么不能保证原子性</h2><p>最重要的一点就是不能解决指令交错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">* 写屏障仅仅是保证之后的读能够读到最新的结果，但不能保证多线程下读跑到它前面去</div><div class="line">* 而有序性的保证也只是保证了本线程内相关代码不被重排序</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JAVA内存模型 即 Java Memory Model 即 JMM，它定义了主存、工作内存抽象概念，底层对应着 CPU 寄存器、缓存、硬件内存、CPU 指令优化等。&lt;br&gt;JMM 体现在以下几个方面&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* 原子性 - 保证指令不会受到线程上下文切换的影响
* 可见性 - 保证指令不会受 cpu 缓存的影响
* 有序性 - 保证指令不会受 cpu 指令并行优化的影响
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JMM" scheme="http://yzy755.github.io/tags/JMM/"/>
    
  </entry>
  
  <entry>
    <title>JAVA内存结构</title>
    <link href="http://yzy755.github.io/2019/05/02/JAVA%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/"/>
    <id>http://yzy755.github.io/2019/05/02/JAVA内存结构/</id>
    <published>2019-05-02T12:17:53.000Z</published>
    <updated>2020-11-24T10:00:08.649Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>程序计数器</li>
<li>虚拟机栈</li>
<li>本地方法栈</li>
<li>堆</li>
<li>方法区  </li>
<li>直接内存（jdk1.8后）</li>
</ol>
<a id="more"></a>
<p><img src="/2019/05/02/JAVA内存结构/1606208091766.png" alt="1606208091766"></p>
<blockquote>
<p>程序计数器</p>
</blockquote>
<p>Program Counter Register 程序计数器（寄存器）</p>
<ul>
<li>作用，是记住下一条jvm指令的执行地址</li>
<li>特点<ul>
<li>是线程私有的</li>
<li>不会存在内存溢出  </li>
</ul>
</li>
</ul>
<blockquote>
<p>虚拟机栈</p>
</blockquote>
<p>Java Virtual Machine Stacks （Java 虚拟机栈）  </p>
<p>每个线程运行时所需要的内存，没个栈由多个栈帧组成，对应着当前正在执行的那个方法，存储的是局部变量表、返回地址、操作数栈</p>
<blockquote>
<p>本地方法栈</p>
</blockquote>
<p>native 关键字修饰的方法分配的栈内存</p>
<blockquote>
<p>堆</p>
</blockquote>
<p>Heap 堆</p>
<ul>
<li>通过new关键字创建的对象使用堆内存</li>
<li>线程共享，队中的对象需要考虑线程安全的问题</li>
<li>有专门的垃圾回收机制</li>
<li><p>构成</p>
<ul>
<li>Eden区</li>
<li>survivor区</li>
<li>老年代</li>
</ul>
</li>
<li><p>堆内存诊断</p>
<ol>
<li>jps 工具<br>查看当前系统中有哪些 java 进程</li>
<li>jmap 工具<br>查看堆内存占用情况 jmap - heap 进程id</li>
<li>jconsole 工具<br>图形界面的，多功能的监测工具，可以连续监测  </li>
</ol>
</li>
</ul>
<blockquote>
<p>方法区</p>
</blockquote>
<p>在jdk1.6及以前，方法区在堆内存中一个叫永久代的区域，属于堆内存</p>
<p>在jdk1.8中，从堆内存中移除了永久代，取而代之的是一个叫元空间的内存，元空间存放在物理内存中，不受jvm管理</p>
<p>这里不是简单地将整个永久代移除到元空间，原来常量池中字符串池（stringtable）依然保留在堆内存，对比如下</p>
<p><img src="/2019/05/02/JAVA内存结构/1606210814252.png" alt="1606210814252"></p>
<p><img src="/2019/05/02/JAVA内存结构/1606210838645.png" alt="1606210838645"></p>
<blockquote>
<p>直接内存</p>
</blockquote>
<p>Direct Memory</p>
<ul>
<li>常见于 NIO 操作时，用于数据缓冲区</li>
<li>分配回收成本较高，但读写性能高</li>
<li><p>不受 JVM 内存回收管理  </p>
<p>分配和回收</p>
</li>
<li><p>使用了 Unsafe 对象完成直接内存的分配回收，并且回收需要主动调用 freeMemory 方法</p>
</li>
<li>ByteBuffer 的实现类内部，使用了 Cleaner （虚引用）来监测 ByteBuffer 对象，一旦<br>ByteBuffer 对象被垃圾回收，那么就会由 ReferenceHandler 线程通过 Cleaner 的 clean 方法调<br>用 freeMemory 来释放直接内存  </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;程序计数器&lt;/li&gt;
&lt;li&gt;虚拟机栈&lt;/li&gt;
&lt;li&gt;本地方法栈&lt;/li&gt;
&lt;li&gt;堆&lt;/li&gt;
&lt;li&gt;方法区  &lt;/li&gt;
&lt;li&gt;直接内存（jdk1.8后）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JVM" scheme="http://yzy755.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>MQ业务解耦</title>
    <link href="http://yzy755.github.io/2018/09/03/MQ%E4%B8%9A%E5%8A%A1%E8%A7%A3%E8%80%A6/"/>
    <id>http://yzy755.github.io/2018/09/03/MQ业务解耦/</id>
    <published>2018-09-03T09:00:53.000Z</published>
    <updated>2018-09-04T09:18:26.738Z</updated>
    
    <content type="html"><![CDATA[<p>天使排班中有工时存欠的概念，意思是记录护士姐姐们相比一周的标准工时多或少工作的时长，作为统计工作情况的一个依据，存欠值守用户手动输入、实际排班时长、请假以及加班时长的影响，涉及到很多个业务模块，若让业务模块每次数据变更都去计算存欠值耦合就太过严重，所以用MQ解耦<br><a id="more"></a></p>
<p>业务模块每次数据变更，比如加班申请通过后发布加班时长增加的消息，存欠统计模块订阅需要的消息<br><img src="/2018/09/03/MQ业务解耦/图片1.png" alt="logo"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMqMsg</span><span class="params">(HcContext context, SchedulingOvertimeInfo schedulingOvertimeInfo, String type)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</div><div class="line">            GetWeekBeginEndVo weekBeginEnd = DateUtil.getWeekBeginEnd(dateFormat.parse(schedulingOvertimeInfo.getOvertimeDate()));</div><div class="line"></div><div class="line">            <span class="comment">// 消息内容</span></div><div class="line">            ChangedMqMsg changedMqMsg = <span class="keyword">new</span> ChangedMqMsg();</div><div class="line">            changedMqMsg.setBeginDate(weekBeginEnd.getBeginDate());</div><div class="line">            changedMqMsg.setEndDate(weekBeginEnd.getEndDate());</div><div class="line">            changedMqMsg.setDepartmentId(schedulingOvertimeInfo.getDepartmentId());</div><div class="line">            changedMqMsg.setuId(schedulingOvertimeInfo.getuId());</div><div class="line">            changedMqMsg.setOvertimeDuration(<span class="string">"minus"</span>.equals(type) ? <span class="number">0f</span> : schedulingOvertimeInfo.getOvertimeDuration());</div><div class="line"></div><div class="line">            <span class="comment">// 入队</span></div><div class="line">            ComponentCommonMsg cmsg = <span class="keyword">new</span> ComponentCommonMsg();</div><div class="line">            cmsg.setNotifyType(MqEnum.OVERTIME_DURATION_CHANGED.getId());</div><div class="line">            cmsg.setNotifyMsg(JSON.toJSONString(changedMqMsg));</div><div class="line">            commonTopicMsgProducer.sendMessage(cmsg);</div><div class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">            logger.error(<span class="string">"s:&#123;&#125; 日期转换失败:&#123;&#125;"</span>, context, CommonUtils.getStackTrace(e));</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;天使排班中有工时存欠的概念，意思是记录护士姐姐们相比一周的标准工时多或少工作的时长，作为统计工作情况的一个依据，存欠值守用户手动输入、实际排班时长、请假以及加班时长的影响，涉及到很多个业务模块，若让业务模块每次数据变更都去计算存欠值耦合就太过严重，所以用MQ解耦&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工作实践" scheme="http://yzy755.github.io/categories/%E5%B7%A5%E4%BD%9C%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="activityMQ" scheme="http://yzy755.github.io/tags/activityMQ/"/>
    
      <category term="海鹚" scheme="http://yzy755.github.io/tags/%E6%B5%B7%E9%B9%9A/"/>
    
  </entry>
  
  <entry>
    <title>shiro全面的权限方案</title>
    <link href="http://yzy755.github.io/2018/05/12/shiro%E5%85%A8%E9%9D%A2%E7%9A%84%E6%9D%83%E9%99%90%E6%96%B9%E6%A1%88/"/>
    <id>http://yzy755.github.io/2018/05/12/shiro全面的权限方案/</id>
    <published>2018-05-12T09:17:53.000Z</published>
    <updated>2018-09-04T09:18:43.315Z</updated>
    
    <content type="html"><![CDATA[<p>天使排班基于微信的用户体系，在系统中用户的角色和权限全靠数据库查询和代码控制，没有一个强大简洁的权限控制框架实在不方便，于是引入了以前使用过的shiro，并在使用上进行了加强，集成了redis权限缓存以及基于redis的sessionDAO，全面支持分布式。<br><a id="more"></a></p>
<h1 id="1-认证"><a href="#1-认证" class="headerlink" title="1.认证"></a>1.认证</h1><p>认证通过微信或钉钉的认证，认证后在天使排版中只需在shiro中默认标记为认证通过即可</p>
<h1 id="2-授权"><a href="#2-授权" class="headerlink" title="2.授权"></a>2.授权</h1><h2 id="2-1权限控制"><a href="#2-1权限控制" class="headerlink" title="2.1权限控制"></a>2.1权限控制</h2><h3 id="2-1-1基于角色的访问控制"><a href="#2-1-1基于角色的访问控制" class="headerlink" title="2.1.1基于角色的访问控制"></a>2.1.1基于角色的访问控制</h3><pre><code>RBAC基于角色的访问控制（Role-Based Access Control）是以角色为中心进行访问控制，比如：主体的角色为管理员可以排班，查询成员信息等，访问控制流程如下：
</code></pre><p><img src="/2018/05/12/shiro全面的权限方案/图片1.png" alt="logo"></p>
<p>上图中的判断逻辑代码可以理解为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(主体.hasRole(<span class="string">"管理员角色id"</span>))&#123;</div><div class="line">	排班</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>缺点：以角色进行访问控制粒度较粗，如果上图中排班所需要的角色变化为创建者和管理员，此时就需要修改判断逻辑为“判断主体的角色是否是创建者或管理员”，系统可扩展性差。<br>修改代码如下：<br>if(主体.hasRole(“管理员角色id”) ||  主体.hasRole(“创建者角色id”)){<br>    排班<br>}</p>
<h3 id="2-1-2基于资源的访问控制"><a href="#2-1-2基于资源的访问控制" class="headerlink" title="2.1.2基于资源的访问控制"></a>2.1.2基于资源的访问控制</h3><pre><code>RBAC基于资源的访问控制（Resource-Based Access Control）是以资源为中心进行访问控制，比如：主体必须具有排班权限才可以排班等，访问控制流程如下：
</code></pre><p>上图中的判断逻辑代码可以理解为：<br>if(主体.hasPermission(“排班权限标识”)){<br>    排班<br>}</p>
<p>优点：系统设计时定义好排班的权限标识，即使排班所需要的角色变化为创建者和管理员也只需要将“排班权限”添加到“管理角色”的权限列表中，判断逻辑不用修改，系统可扩展性强。</p>
<h3 id="2-1-3基于url拦截"><a href="#2-1-3基于url拦截" class="headerlink" title="2.1.3基于url拦截"></a>2.1.3基于url拦截</h3><pre><code>基于url拦截是企业中常用的权限管理方法，实现思路是：将系统操作的每个url配置在权限表中，将权限对应到角色，将角色分配给用户，用户访问系统功能通过Filter进行过虑，过虑器获取到用户访问的url，只要访问的url是用户分配角色中的url则放行继续访问。
如下图：
</code></pre><p><img src="/2018/05/12/shiro全面的权限方案/图片2.png" alt="logo"></p>
<h2 id="2-2权限模型"><a href="#2-2权限模型" class="headerlink" title="2.2权限模型"></a>2.2权限模型</h2><p>对主体、资源、权限通过数据模型表示。</p>
<p>主体（账号、密码）<br>资源（资源名称、访问地址）<br>权限（权限名称、资源id）<br>角色（角色名称）<br>角色和权限关系（角色id、权限id）<br>主体和角色关系（主体id、角色id）</p>
<p>通常企业开发中将资源和权限表合并为一张权限表，如下：<br>资源（资源名称、访问地址）<br>权限（权限名称、资源id）<br>合并为：<br>权限（权限名称、资源名称、资源访问地址）<br>如下图：</p>
<p><img src="/2018/05/12/shiro全面的权限方案/图片3.png" alt="logo"></p>
<p>上图常被称为权限管理的通用模型，在开发中根据系统自身的特点还会对上图进行修改，字段可以个性化。</p>
<h1 id="3-Shiro"><a href="#3-Shiro" class="headerlink" title="3. Shiro"></a>3. Shiro</h1><h2 id="3-1-Shiro架构"><a href="#3-1-Shiro架构" class="headerlink" title="3.1 Shiro架构"></a>3.1 Shiro架构</h2><p><img src="/2018/05/12/shiro全面的权限方案/图片4.png" alt="logo"></p>
<h3 id="3-1-1-Subject"><a href="#3-1-1-Subject" class="headerlink" title="3.1.1 Subject"></a>3.1.1 Subject</h3><p>Subject即主体，外部应用与subject进行交互，subject记录了当前操作用户，将用户的概念理解为当前操作的主体，可能是一个通过浏览器请求的用户，也可能是一个运行的程序。    Subject在shiro中是一个接口，接口中定义了很多认证授相关的方法，外部程序通过subject进行认证授，而subject是通过SecurityManager安全管理器进行认证授权</p>
<h3 id="3-1-2-SecurityManager"><a href="#3-1-2-SecurityManager" class="headerlink" title="3.1.2 SecurityManager"></a>3.1.2 SecurityManager</h3><p>SecurityManager即安全管理器，对全部的subject进行安全管理，它是shiro的核心，负责对所有的subject进行安全管理。通过SecurityManager可以完成subject的认证、授权等，实质上SecurityManager是通过Authenticator进行认证，通过Authorizer进行授权，通过SessionManager进行会话管理等。<br>SecurityManager是一个接口，继承了Authenticator, Authorizer, SessionManager这三个接口。</p>
<h3 id="3-1-3-Authenticator"><a href="#3-1-3-Authenticator" class="headerlink" title="3.1.3 Authenticator"></a>3.1.3 Authenticator</h3><p>Authenticator即认证器，对用户身份进行认证，Authenticator是一个接口，shiro提供ModularRealmAuthenticator实现类，通过ModularRealmAuthenticator基本上可以满足大多数需求，也可以自定义认证器。</p>
<h3 id="3-1-4-Authorizer"><a href="#3-1-4-Authorizer" class="headerlink" title="3.1.4 Authorizer"></a>3.1.4 Authorizer</h3><p>Authorizer即授权器，用户通过认证器认证通过，在访问功能时需要通过授权器判断用户是否有此功能的操作权限。</p>
<h3 id="3-1-5-realm"><a href="#3-1-5-realm" class="headerlink" title="3.1.5 realm"></a>3.1.5 realm</h3><p>Realm即领域，相当于datasource数据源，securityManager进行安全认证需要通过Realm获取用户权限数据，比如：如果用户身份数据在数据库那么realm就需要从数据库获取用户身份信息。<br>注意：不要把realm理解成只是从数据源取数据，在realm中还有认证授权校验的相关的代码。<br>其中，最基础的是 Realm 接口，AuthenticationRealm 负责认证，AuthorizingRealm负责授权，通常自定义的 realm 继承AuthorizingRealm 。</p>
<h3 id="3-1-6-sessionManager"><a href="#3-1-6-sessionManager" class="headerlink" title="3.1.6 sessionManager"></a>3.1.6 sessionManager</h3><p>sessionManager即会话管理，shiro框架定义了一套会话管理，它不依赖web容器的session，所以shiro可以使用在非web应用上，也可以将分布式应用的会话集中在一点管理，此特性可使它实现单点登录。</p>
<h3 id="3-1-7-SessionDAO"><a href="#3-1-7-SessionDAO" class="headerlink" title="3.1.7 SessionDAO"></a>3.1.7 SessionDAO</h3><p>SessionDAO即会话dao，是对session会话操作的一套接口，比如要将session存储到数据库，可以通过jdbc将会话存储到数据库。<br>通过SessionDao管理session数据，针对个性化的session数据存储需要使用sessionDao</p>
<h3 id="3-1-8-CacheManager"><a href="#3-1-8-CacheManager" class="headerlink" title="3.1.8 CacheManager"></a>3.1.8 CacheManager</h3><p>CacheManager即缓存管理，将用户权限数据存储在缓存，这样可以提高性能。<br>Shiro有默认的cache实现，是通过自定义map实现的，可整合ehcache或者redis实现cache</p>
<h3 id="3-1-9-Cryptography"><a href="#3-1-9-Cryptography" class="headerlink" title="3.1.9 Cryptography"></a>3.1.9 Cryptography</h3><p>Cryptography即密码管理，shiro提供了一套加密/解密的组件，方便开发。比如提供常用的散列、加/解密等功能。</p>
<h2 id="3-2-shiro的jar包"><a href="#3-2-shiro的jar包" class="headerlink" title="3.2 shiro的jar包"></a>3.2 shiro的jar包</h2><p>与其它java开源框架类似，将shiro的jar包加入项目就可以使用shiro提供的功能了。shiro-core是核心包必须选用，还提供了与web整合的shiro-web、与spring整合的shiro-spring、与任务调度quartz整合的shiro-quartz等，下边是shiro各jar包的maven坐标。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">	&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;shiro-core&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.2.3&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;shiro-web&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.2.3&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.2.3&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line">		&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;shiro-quartz&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.2.3&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div><div class="line"></div><div class="line">也可以通过引入shiro-all包括shiro所有的包：</div><div class="line">	&lt;dependency&gt;</div><div class="line">			&lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;shiro-all&lt;/artifactId&gt;</div><div class="line">			&lt;version&gt;1.2.3&lt;/version&gt;</div><div class="line">		&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<h2 id="3-3-shiro入口"><a href="#3-3-shiro入口" class="headerlink" title="3.3 shiro入口"></a>3.3 shiro入口</h2><p>Web.xml:<br><img src="/2018/05/12/shiro全面的权限方案/图片5.png" alt="logo"><br>Stringmvc:<br><img src="/2018/05/12/shiro全面的权限方案/图片6.png" alt="logo"></p>
<h2 id="3-4-shiro认证"><a href="#3-4-shiro认证" class="headerlink" title="3.4 shiro认证"></a>3.4 shiro认证</h2><p>认证流程<br><img src="/2018/05/12/shiro全面的权限方案/图片7.png" alt="logo"></p>
<h5 id="1、web初始化securityManager。"><a href="#1、web初始化securityManager。" class="headerlink" title="1、web初始化securityManager。"></a>1、web初始化securityManager。</h5><h5 id="2、调用subject-login方法主体提交认证，提交的token"><a href="#2、调用subject-login方法主体提交认证，提交的token" class="headerlink" title="2、调用subject.login方法主体提交认证，提交的token"></a>2、调用subject.login方法主体提交认证，提交的token</h5><h5 id="3、securityManager进行认证，securityManager最终由ModularRealmAuthenticator进行认证。"><a href="#3、securityManager进行认证，securityManager最终由ModularRealmAuthenticator进行认证。" class="headerlink" title="3、securityManager进行认证，securityManager最终由ModularRealmAuthenticator进行认证。"></a>3、securityManager进行认证，securityManager最终由ModularRealmAuthenticator进行认证。</h5><h5 id="4、ModularRealmAuthenticator给Realm传入token"><a href="#4、ModularRealmAuthenticator给Realm传入token" class="headerlink" title="4、ModularRealmAuthenticator给Realm传入token"></a>4、ModularRealmAuthenticator给Realm传入token</h5><h5 id="5、Realm根据输入的token（UsernamePasswordToken）调用doGetAuthenticationInfo从数据库查询用户信息，根据账号查询用户信息（账号和密码）"><a href="#5、Realm根据输入的token（UsernamePasswordToken）调用doGetAuthenticationInfo从数据库查询用户信息，根据账号查询用户信息（账号和密码）" class="headerlink" title="5、Realm根据输入的token（UsernamePasswordToken）调用doGetAuthenticationInfo从数据库查询用户信息，根据账号查询用户信息（账号和密码）"></a>5、Realm根据输入的token（UsernamePasswordToken）调用doGetAuthenticationInfo从数据库查询用户信息，根据账号查询用户信息（账号和密码）</h5><pre><code>如果查询到用户信息，就给ModularRealmAuthenticator返回用户信息（账号和密码）
如果查询不到，就给ModularRealmAuthenticator返回null
</code></pre><h5 id="6、ModularRealmAuthenticator接收Realm返回Authentication认证信息"><a href="#6、ModularRealmAuthenticator接收Realm返回Authentication认证信息" class="headerlink" title="6、ModularRealmAuthenticator接收Realm返回Authentication认证信息"></a>6、ModularRealmAuthenticator接收Realm返回Authentication认证信息</h5><p>如果返回的认证信息是null，ModularRealmAuthenticator抛出异常（org.apache.shiro.authc.UnknownAccountException）</p>
<p>如果返回的认证信息不是null（说明数据库找到了用户），对Realm返回用户密码 和 token中的密码 进行对比，如果不一致抛出异常（org.apache.shiro.authc.IncorrectCredentialsException）</p>
<h2 id="3-5-shiro授权"><a href="#3-5-shiro授权" class="headerlink" title="3.5 shiro授权"></a>3.5 shiro授权</h2><p>授权流程<br><img src="/2018/05/12/shiro全面的权限方案/图片8.png" alt="logo"></p>
<h5 id="1、对subject进行授权，调用方法isPermitted（”permission串”）"><a href="#1、对subject进行授权，调用方法isPermitted（”permission串”）" class="headerlink" title="1、对subject进行授权，调用方法isPermitted（”permission串”）"></a>1、对subject进行授权，调用方法isPermitted（”permission串”）</h5><h5 id="2、SecurityManager执行授权，通过ModularRealmAuthorizer执行授权"><a href="#2、SecurityManager执行授权，通过ModularRealmAuthorizer执行授权" class="headerlink" title="2、SecurityManager执行授权，通过ModularRealmAuthorizer执行授权"></a>2、SecurityManager执行授权，通过ModularRealmAuthorizer执行授权</h5><h5 id="3、ModularRealmAuthorizer执行realm（从数据库查询权限数据"><a href="#3、ModularRealmAuthorizer执行realm（从数据库查询权限数据" class="headerlink" title="3、ModularRealmAuthorizer执行realm（从数据库查询权限数据"></a>3、ModularRealmAuthorizer执行realm（从数据库查询权限数据</h5><pre><code>调用realm的授权方法：doGetAuthorizationInfo
</code></pre><h5 id="4、realm从数据库查询权限数据，返回ModularRealmAuthorizer"><a href="#4、realm从数据库查询权限数据，返回ModularRealmAuthorizer" class="headerlink" title="4、realm从数据库查询权限数据，返回ModularRealmAuthorizer"></a>4、realm从数据库查询权限数据，返回ModularRealmAuthorizer</h5><h5 id="5、ModularRealmAuthorizer调用PermissionResolver进行权限串比对"><a href="#5、ModularRealmAuthorizer调用PermissionResolver进行权限串比对" class="headerlink" title="5、ModularRealmAuthorizer调用PermissionResolver进行权限串比对"></a>5、ModularRealmAuthorizer调用PermissionResolver进行权限串比对</h5><h5 id="6、如果比对后，isPermitted中”permission串”在realm查询到权限数据中，说明用户访问permission串有权限，否则-没有权限，抛出异常。"><a href="#6、如果比对后，isPermitted中”permission串”在realm查询到权限数据中，说明用户访问permission串有权限，否则-没有权限，抛出异常。" class="headerlink" title="6、如果比对后，isPermitted中”permission串”在realm查询到权限数据中，说明用户访问permission串有权限，否则 没有权限，抛出异常。"></a>6、如果比对后，isPermitted中”permission串”在realm查询到权限数据中，说明用户访问permission串有权限，否则 没有权限，抛出异常。</h5><h2 id="3-6自定义realm"><a href="#3-6自定义realm" class="headerlink" title="3.6自定义realm"></a>3.6自定义realm</h2><p>自定义realm继承AuthorizingRealm，其中两个最重要的方法doGetAuthenticationInfo认证方法、doGetAuthorizationInfo授权方法，重载两个方法，在自定义realm中注入角色和权限的service进行查询。</p>
<h3 id="3-6-1认证方法"><a href="#3-6-1认证方法" class="headerlink" title="3.6.1认证方法"></a>3.6.1认证方法</h3><p>根据shiro认证流程，在调用subject.login()方法后会进入认证方法，在该方法中将用户名和用户密码写入shiro认证信息中。由于天使排班没有自己的账号密码模块，可以将用户id作为用户名，密码设置为空进行记录：</p>
<p>登陆：<br><img src="/2018/05/12/shiro全面的权限方案/图片9.png" alt="logo"><br>认证：<br><img src="/2018/05/12/shiro全面的权限方案/图片10.png" alt="logo"></p>
<h3 id="3-6-2授权方法"><a href="#3-6-2授权方法" class="headerlink" title="3.6.2授权方法"></a>3.6.2授权方法</h3><p>授权方法触发的方式有很多，简单的方式可以在认证方法中显式调用，正常的方式是在用户访问受保护的资源时进行授权，这个前提是在shiro的配置中配置哪些资源是需要权限访问的，配置有两种方式，第一种方式：在shiroFilter总过滤器中，配置url对应需要的角色或权限比如：<br><img src="/2018/05/12/shiro全面的权限方案/图片11.png" alt="logo"><br>第二种方式：在方法上添加注解，方法可以使service方法，也可以是controller，建议在controller方法上加，service方法由于复用的关系，加权限控制不适合，比如：<br><img src="/2018/05/12/shiro全面的权限方案/图片12.png" alt="logo"><br><img src="/2018/05/12/shiro全面的权限方案/图片13.png" alt="logo"><br>授权方法实现：<br><img src="/2018/05/12/shiro全面的权限方案/图片14.png" alt="logo"><br><img src="/2018/05/12/shiro全面的权限方案/图片15.png" alt="logo"></p>
<h1 id="4-扩展shiro"><a href="#4-扩展shiro" class="headerlink" title="4.扩展shiro"></a>4.扩展shiro</h1><h2 id="4-1需求"><a href="#4-1需求" class="headerlink" title="4.1需求"></a>4.1需求</h2><p>在线修改用户角色或权限实时生效</p>
<h2 id="4-2为什么要扩展"><a href="#4-2为什么要扩展" class="headerlink" title="4.2为什么要扩展"></a>4.2为什么要扩展</h2><p>在用户认证和授权完成后，为了提高性能，使用了cacheManage组件缓存了用户的角色权限信息，在用户退出登录之前不会再次请求授权方法，需要在适当的时机清除指定用户的权限缓存，指定用户在缓存清空后访问受保护的资源之前重新进行授权。</p>
<h2 id="4-3怎么做"><a href="#4-3怎么做" class="headerlink" title="4.3怎么做"></a>4.3怎么做</h2><p>在shiroFilter核心过滤器中，提供了filters参数，这个参数记录了能够控制资源访问的权限过滤器链，初始化过程中shiro会注册默认的filter，shiro默认提供如下过滤器：<br><img src="/2018/05/12/shiro全面的权限方案/图片16.png" alt="logo"></p>
<p>在这基础上自定义自己的过滤器，这里选择继承AccessControlFilter，重载两个方法：<br>isAccessAllowed：即是否允许访问，返回 true 表示允许；<br>    onAccessDenied：表示访问拒绝时是否自己处理，如果返回 true 表示自己不处理且继续拦截器链执行，返回 false 表示自己已经处理了（比如重定向到另一个页面）。</p>
<p>isAccessAllowed方法默认返回false不允许访问，随后就进入onAccessDenied方法，然后就可以自己处理当前用户了，判断当前用户session中是否被标记为修改了权限，如果被标记了的话，就清除当前用户的缓存，最后返回true，如下：<br><img src="/2018/05/12/shiro全面的权限方案/图片17.png" alt="logo"><br>配置如下：<br><img src="/2018/05/12/shiro全面的权限方案/图片18.png" alt="logo"></p>
<p>如何标记用户，在管理员修改用户的角色权限逻辑中，根据被修改的用户id，找到其对应的session并标记，这里需要在修改的service中注入sessionDao对象，从而获取想要的session。</p>
<h1 id="5-数据库设计"><a href="#5-数据库设计" class="headerlink" title="5.数据库设计"></a>5.数据库设计</h1><p>权限表<br><img src="/2018/05/12/shiro全面的权限方案/图片19.png" alt="logo"></p>
<p>角色权限关联表<br><img src="/2018/05/12/shiro全面的权限方案/图片20.png" alt="logo"></p>
<p>角色表、用户表、用户角色关联表沿用以前的设计</p>
<p>海鹚的session是重写的，sessionId和cookiename都是自定义的，与shiro的session不能通用，重写sessionDAO实现session同步，屏蔽公司的filter，自定义sessionId和cookiename</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;天使排班基于微信的用户体系，在系统中用户的角色和权限全靠数据库查询和代码控制，没有一个强大简洁的权限控制框架实在不方便，于是引入了以前使用过的shiro，并在使用上进行了加强，集成了redis权限缓存以及基于redis的sessionDAO，全面支持分布式。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工作实践" scheme="http://yzy755.github.io/categories/%E5%B7%A5%E4%BD%9C%E5%AE%9E%E8%B7%B5/"/>
    
    
      <category term="海鹚" scheme="http://yzy755.github.io/tags/%E6%B5%B7%E9%B9%9A/"/>
    
      <category term="shiro" scheme="http://yzy755.github.io/tags/shiro/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow的Python API</title>
    <link href="http://yzy755.github.io/2017/05/25/TensorFlow%E7%9A%84Python%20API/"/>
    <id>http://yzy755.github.io/2017/05/25/TensorFlow的Python API/</id>
    <published>2017-05-25T02:17:53.000Z</published>
    <updated>2017-05-25T02:04:39.900Z</updated>
    
    <content type="html"><![CDATA[<p>tensorflow的java api极限性还是很大，至今也是能找到linux和mac的库文件，再加上决定使用superset作为olap系统，正好可以在superset上集成Python版本的TensorFlow<br><a id="more"></a><br>继续想使用现成的图像识别模型做一个简单的demo，网上有现成的训练完的模型<br>源码：</p>
<pre><code># Copyright 2015 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

&quot;&quot;&quot;Simple image classification with Inception.

Run image classification with Inception trained on ImageNet 2012 Challenge data
set.

This program creates a graph from a saved GraphDef protocol buffer,
and runs inference on an input JPEG image. It outputs human readable
strings of the top 5 predictions along with their probabilities.

Change the --image_file argument to any jpg image to compute a
classification of that image.

Please see the tutorial and website for a detailed description of how
to use this script to perform image recognition.

https://tensorflow.org/tutorials/image_recognition/
&quot;&quot;&quot;

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import os.path
import re
import sys
import tarfile

import numpy as np
from six.moves import urllib
import tensorflow as tf

FLAGS = tf.app.flags.FLAGS

# classify_image_graph_def.pb:
#   Binary representation of the GraphDef protocol buffer.
# imagenet_synset_to_human_label_map.txt:
#   Map from synset ID to a human readable string.
# imagenet_2012_challenge_label_map_proto.pbtxt:
#   Text representation of a protocol buffer mapping a label to synset ID.
tf.app.flags.DEFINE_string(
    &apos;model_dir&apos;, &apos;/tmp/imagenet&apos;,
    &quot;&quot;&quot;Path to classify_image_graph_def.pb, &quot;&quot;&quot;
    &quot;&quot;&quot;imagenet_synset_to_human_label_map.txt, and &quot;&quot;&quot;
    &quot;&quot;&quot;imagenet_2012_challenge_label_map_proto.pbtxt.&quot;&quot;&quot;)
tf.app.flags.DEFINE_string(&apos;image_file&apos;, &apos;&apos;,
                           &quot;&quot;&quot;Absolute path to image file.&quot;&quot;&quot;)
tf.app.flags.DEFINE_integer(&apos;num_top_predictions&apos;, 5,
                            &quot;&quot;&quot;Display this many predictions.&quot;&quot;&quot;)

# pylint: disable=line-too-long
DATA_URL = &apos;http://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz&apos;
# pylint: enable=line-too-long


class NodeLookup(object):
  &quot;&quot;&quot;Converts integer node ID&apos;s to human readable labels.&quot;&quot;&quot;

  def __init__(self,
               label_lookup_path=None,
               uid_lookup_path=None):
    if not label_lookup_path:
      label_lookup_path = os.path.join(
          FLAGS.model_dir, &apos;imagenet_2012_challenge_label_map_proto.pbtxt&apos;)
    if not uid_lookup_path:
      uid_lookup_path = os.path.join(
          FLAGS.model_dir, &apos;imagenet_synset_to_human_label_map.txt&apos;)
    self.node_lookup = self.load(label_lookup_path, uid_lookup_path)

  def load(self, label_lookup_path, uid_lookup_path):
    &quot;&quot;&quot;Loads a human readable English name for each softmax node.

    Args:
      label_lookup_path: string UID to integer node ID.
      uid_lookup_path: string UID to human-readable string.

    Returns:
      dict from integer node ID to human-readable string.
    &quot;&quot;&quot;
    if not tf.gfile.Exists(uid_lookup_path):
      tf.logging.fatal(&apos;File does not exist %s&apos;, uid_lookup_path)
    if not tf.gfile.Exists(label_lookup_path):
      tf.logging.fatal(&apos;File does not exist %s&apos;, label_lookup_path)

    # Loads mapping from string UID to human-readable string
    proto_as_ascii_lines = tf.gfile.GFile(uid_lookup_path).readlines()
    uid_to_human = {}
    p = re.compile(r&apos;[n\d]*[ \S,]*&apos;)
    for line in proto_as_ascii_lines:
      parsed_items = p.findall(line)
      uid = parsed_items[0]
      human_string = parsed_items[2]
      uid_to_human[uid] = human_string

    # Loads mapping from string UID to integer node ID.
    node_id_to_uid = {}
    proto_as_ascii = tf.gfile.GFile(label_lookup_path).readlines()
    for line in proto_as_ascii:
      if line.startswith(&apos;  target_class:&apos;):
        target_class = int(line.split(&apos;: &apos;)[1])
      if line.startswith(&apos;  target_class_string:&apos;):
        target_class_string = line.split(&apos;: &apos;)[1]
        node_id_to_uid[target_class] = target_class_string[1:-2]

    # Loads the final mapping of integer node ID to human-readable string
    node_id_to_name = {}
    for key, val in node_id_to_uid.items():
      if val not in uid_to_human:
        tf.logging.fatal(&apos;Failed to locate: %s&apos;, val)
      name = uid_to_human[val]
      node_id_to_name[key] = name

    return node_id_to_name

  def id_to_string(self, node_id):
    if node_id not in self.node_lookup:
      return &apos;&apos;
    return self.node_lookup[node_id]


def create_graph():
  &quot;&quot;&quot;Creates a graph from saved GraphDef file and returns a saver.&quot;&quot;&quot;
  # Creates graph from saved graph_def.pb.
  with tf.gfile.FastGFile(os.path.join(
      FLAGS.model_dir, &apos;classify_image_graph_def.pb&apos;), &apos;rb&apos;) as f:
    graph_def = tf.GraphDef()
    graph_def.ParseFromString(f.read())
    _ = tf.import_graph_def(graph_def, name=&apos;&apos;)


def run_inference_on_image(image):
  &quot;&quot;&quot;Runs inference on an image.

  Args:
    image: Image file name.

  Returns:
    Nothing
  &quot;&quot;&quot;
  if not tf.gfile.Exists(image):
    tf.logging.fatal(&apos;File does not exist %s&apos;, image)
  image_data = tf.gfile.FastGFile(image, &apos;rb&apos;).read()

  # Creates graph from saved GraphDef.
  create_graph()

  with tf.Session() as sess:
    # Some useful tensors:
    # &apos;softmax:0&apos;: A tensor containing the normalized prediction across
    #   1000 labels.
    # &apos;pool_3:0&apos;: A tensor containing the next-to-last layer containing 2048
    #   float description of the image.
    # &apos;DecodeJpeg/contents:0&apos;: A tensor containing a string providing JPEG
    #   encoding of the image.
    # Runs the softmax tensor by feeding the image_data as input to the graph.
    softmax_tensor = sess.graph.get_tensor_by_name(&apos;softmax:0&apos;)
    predictions = sess.run(softmax_tensor,
                           {&apos;DecodeJpeg/contents:0&apos;: image_data})
    predictions = np.squeeze(predictions)

    # Creates node ID --&gt; English string lookup.
    node_lookup = NodeLookup()

    top_k = predictions.argsort()[-FLAGS.num_top_predictions:][::-1]
    for node_id in top_k:
      human_string = node_lookup.id_to_string(node_id)
      score = predictions[node_id]
      print(&apos;%s (score = %.5f)&apos; % (human_string, score))


def maybe_download_and_extract():
  &quot;&quot;&quot;Download and extract model tar file.&quot;&quot;&quot;
  dest_directory = FLAGS.model_dir
  if not os.path.exists(dest_directory):
    os.makedirs(dest_directory)
  filename = DATA_URL.split(&apos;/&apos;)[-1]
  filepath = os.path.join(dest_directory, filename)
  if not os.path.exists(filepath):
    def _progress(count, block_size, total_size):
      sys.stdout.write(&apos;\r&gt;&gt; Downloading %s %.1f%%&apos; % (
          filename, float(count * block_size) / float(total_size) * 100.0))
      sys.stdout.flush()
    filepath, _ = urllib.request.urlretrieve(DATA_URL, filepath, _progress)
    print()
    statinfo = os.stat(filepath)
    print(&apos;Succesfully downloaded&apos;, filename, statinfo.st_size, &apos;bytes.&apos;)
  tarfile.open(filepath, &apos;r:gz&apos;).extractall(dest_directory)


def main(_):
  maybe_download_and_extract()
  image = (FLAGS.image_file if FLAGS.image_file else
           os.path.join(FLAGS.model_dir, &apos;cropped_panda.jpg&apos;))
  run_inference_on_image(image)


if __name__ == &apos;__main__&apos;:
  tf.app.run()
</code></pre><p>这是个可以直接运行py文件：python classify_image.py 就可以识别cropped_panda.jpg为大熊猫，程序会下载训练好的pb模型文件和物品分类大全txt文件，然后在 <a href="https://github.com/airbnb/superset" target="_blank" rel="external">https://github.com/airbnb/superset</a> 下载superset源码，在view包的core.py中拓展一个文件上传功能，将上传的文件条用上面的识别方法，就可以做到简单的图形识别，整个流程下来问题主要还是算法模型的生成。。。<br>在部署superset过程中也遇到很多坑，官方文档上是说修改完源码后要重新对前端打包，基本可以参照 <a href="https://fangyeqing.github.io/2017/03/04/superset%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="external">https://fangyeqing.github.io/2017/03/04/superset%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</a> 这上面的教程，后台编译就比较简单了，在superset根目录下执行 python setup.py install 就行，然后参照前面写的superset搭建启动的方式即可</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tensorflow的java api极限性还是很大，至今也是能找到linux和mac的库文件，再加上决定使用superset作为olap系统，正好可以在superset上集成Python版本的TensorFlow&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://yzy755.github.io/tags/python/"/>
    
      <category term="AI" scheme="http://yzy755.github.io/tags/AI/"/>
    
      <category term="TensorFlow" scheme="http://yzy755.github.io/tags/TensorFlow/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow的java API</title>
    <link href="http://yzy755.github.io/2017/05/17/TensorFlow%E7%9A%84java%20API/"/>
    <id>http://yzy755.github.io/2017/05/17/TensorFlow的java API/</id>
    <published>2017-05-17T10:17:53.000Z</published>
    <updated>2017-05-25T02:04:38.674Z</updated>
    
    <content type="html"><![CDATA[<p>对数学不好的人来讲，阅读TensorFlow实在是一件让人头皮发麻的事情，现在接触的这个大数据分析项目是想将使用TensorFlow写的算法打包供外部使用以及外部系统以rest接口方式来调用算法得到结果，写算法和调用这两个工作肯定是要分离的，暂且不管TensorFlow本身如何使用，研究了下用java调用TensorFlow的方式。<br><a id="more"></a><br>从 <a href="https://codeload.github.com/tensorflow/tensorflow/zip/v1.1.0" target="_blank" rel="external">https://codeload.github.com/tensorflow/tensorflow/zip/v1.1.0</a> 下载源码<br>电脑上用不超过3.5版本（anaconda3 4.2版本）的Python： pip install tensorflow 直接安装<br>然后就发现了很奇怪的地方，<a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/java/README.md" target="_blank" rel="external">https://github.com/tensorflow/tensorflow/blob/master/tensorflow/java/README.md</a> 上对TensorFlow for java的描述是说有linux、Mac、windows的库，但是在源码tensorflow-1.1.0\tensorflow\java目录下的readme文件中只给出了linux和mac的下载地址，无奈只能在先在linux虚拟机中尝试了，根据那个readme文件可以下载到.jar用于java调用TensorFlow api，还有一个.so文件用于底层调用native方法库，这样也不难理解，但是这样其实失去了java最强的跨平台特性。。。<br>建一个简单的java project，将下载的jar包加入classpath，写个main方法，一句话试下能不能用：System.out.println(TensorFlow.version());<br>报错：TensorFlow Java API methods will throw an UnsatisfiedLinkError unless native code shared libraries are loaded，意思是java的library中没有相应的库文件，执行System.out.println(System.getProperty(“java.library.path”));看下这台电脑的库路径是什么，将so文件放进去即可，或者是在该工程的jdk中加入自定义的库路径，然后就可以执行查看版本的方法了，</p>
<p>将源码中的tensorflow\java\src代码拷贝到工程中，其中test包中都可以执行尝试下，最符合我研究目标的一个类躲在tensorflow\java\src\main\java\org\tensorflow\examples包中，里边是一个调用模型去识别图片中的物体的类：LabelImage.java<br>    <a href="https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip" target="_blank" rel="external">https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip</a> 下载算法模型和物品种类列表解压到目录下，这里是：/tmp/graph/<br>    创建一个调用类，main方法就一句话：LabelImage.main(new String[] { “/tmp/graph/“, “/tmp/graph/plane.jpg” });当然要准备一张合适的图片，然后他就给你识别，这是一张战斗飞机的图片，而识别的结果为：BEST MATCH: airliner (45.18% likely) ，意思是班机，都是飞机，八九不十</p>
<p>源码中调用的是一个.pb文件，我的理解是该文件是用TensorFlow写好算法并训练完毕生成的模型，就以类似这种文件为界限，生成该文件的工作交给算法设计人员，调用该文件的工作交给技术人员，以后的算法打包也好，webservice调用也好都好理解。</p>
<p>其实使用java这种方法去调用TensorFlow，在不了解TensorFlow使用的情况下还是写不出来什么代码，只是可以规避现有的java技术人员重新学习Python和搭建python web服务的时间成本和风险罢了，有时间的话最好还是用Python接，没有异构的问题。</p>
<p>思考1：pb模型文件一旦产生如何提高学习的准确率，就像上面识别飞机也只有45.18%的概率，今日头条的推荐应该也是用这种训练学习的方式，你用得越多越久，它就越知道你想看什么，然后达到推荐的目的，如何保证持续学习训练。。。<br>    猜想：设置一个节点，无论是从时间维度还是数据量大小维度考虑，这个节点将获取的数据添加到训练集，重新训练得出模型</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对数学不好的人来讲，阅读TensorFlow实在是一件让人头皮发麻的事情，现在接触的这个大数据分析项目是想将使用TensorFlow写的算法打包供外部使用以及外部系统以rest接口方式来调用算法得到结果，写算法和调用这两个工作肯定是要分离的，暂且不管TensorFlow本身如何使用，研究了下用java调用TensorFlow的方式。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="AI" scheme="http://yzy755.github.io/tags/AI/"/>
    
      <category term="TensorFlow" scheme="http://yzy755.github.io/tags/TensorFlow/"/>
    
      <category term="java" scheme="http://yzy755.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>基于python+flask+mysql的web开发初探</title>
    <link href="http://yzy755.github.io/2017/05/12/%E5%9F%BA%E4%BA%8Epython+flask+mysql%E7%9A%84web%E5%BC%80%E5%8F%91%E5%88%9D%E6%8E%A2/"/>
    <id>http://yzy755.github.io/2017/05/12/基于python+flask+mysql的web开发初探/</id>
    <published>2017-05-12T07:40:53.000Z</published>
    <updated>2017-05-12T09:07:07.785Z</updated>
    
    <content type="html"><![CDATA[<p>由于用Python开发一个Web框架十分容易，所以Python有上百个开源的Web框架，当下流行的是Flask,Django等<br>Flask是一个使用 Python 编写的轻量级 Web 应用框架。其 WSGI 工具箱采用 Werkzeug ，模板引擎则使用 Jinja2 。<br><a id="more"></a><br>搭建的大致步骤和常见的问题：</p>
<p>1.安装anaconda，anaconda里面集成了很多关于python科学计算的第三方库，主要是安装方便，而python是一个编译器，如果不使用anaconda，那么安装起来会比较痛苦，各个库之间的依赖性就很难连接的很好</p>
<p>2.安装mysql</p>
<p>3.安装mysql-python，命令:pip install MySql-python</p>
<pre><code>错误1：Microsoft Visual C++ 14.0 is required. 
升级.NET Framework 版本到4.5.1
从错误提示的url下载，下载后安装visualcppbuildtools_full
</code></pre><p>3.安装mysql connector, 下载地址：<a href="https://dev.mysql.com/downloads/connector/python/" target="_blank" rel="external">https://dev.mysql.com/downloads/connector/python/</a><br>我的系统为64， 下载的是mysql-connector-python-2.1.5-py3.4-winx64，还是报错，后来注意到寻找的目录是Program Files (x86)，又下了个32位的安装。错误过去了。但是又来新的错误：</p>
<pre><code>LINK : error LNK2001: unresolved external symbol _DllMainCRTStartup
build\lib.win-amd64-3.5\_mysql.cp35-win_amd64.pyd : fatal error LNK1120: 56 unresolved externalserror: command &apos;C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\BIN\\x86_amd64\\link.exe&apos; failed with exit status 1120
</code></pre><p>5.安装第三方包pymysql。下载地址：<a href="https://pypi.python.org/pypi/PyMySQL#downloads" target="_blank" rel="external">https://pypi.python.org/pypi/PyMySQL#downloads</a><br>下载PyMySQL-0.7.11-py2.py3-none-any.whl，使用pip install PyMySQL-0.7.11-py2.py3-none-any.whl 即可，再执行pip install MySql-python就成功了</p>
<p>python引入mysql方法：<br>import pymysql as MySQLdb</p>
<p>首次尝试python的web开发：<br>源码:</p>
<pre><code>db.py:

    host=&quot;127.0.0.1&quot;
    user=&quot;root&quot;
    password=&quot;123456&quot;
    charset=&quot;utf8&quot;
    database=&quot;test&quot;
    port=3306

service.py:

    import pymysql as MySQLdb
    import sys
    import db
    class AService(object):
        def getA(self,id):
            conn = MySQLdb.connect(host=db.host,user=db.user,passwd=db.password,port=db.port,db=db.database,charset=db.charset)
            result=[]
            try:
                cursor = conn.cursor()
                cursor.execute(&quot;select id,sname from student where id=&apos;%d&apos;&quot;%(id))
                result = cursor.fetchone()

            finally:
                cursor.close()
                conn.close()
            return result

hello.py:

    from flask import Flask, jsonify
    import service
    import sys

    app = Flask(__name__)

    @app.route(&apos;/service&apos;, methods=[&apos;GET&apos;])
    def getSerivice():
            mservice=service.AService()
            result = mservice.getA(1)
            json = &quot;&quot;
            json +=&quot;{&quot;
            json +=&quot;&apos;id&apos;:&quot;+str(result[0])+&quot;,&quot;
            json +=&quot;&apos;sname&apos;:&apos;&quot;+result[1]+&quot;&apos;&quot;
            json +=&quot;}&quot;
            return json;
    if __name__==&quot;__main__&quot;:
        app.run()
</code></pre><p>在cmd中执行 python hello.py<br>打开浏览器 <a href="http://localhost:5000" target="_blank" rel="external">http://localhost:5000</a><br>出现 {‘id’:1,’sname’:’yizeyuan’}<br>成功！</p>
<p>这个例子太简单，实际上可以像平时javaweb开发一样使用MVC模式，上面的hello.py是控制器，service.py是model,而view我们同样可以使用html，Flask使用jinja2渲染<br>使用方式：<br>    from flask import Flask, request, render_template #加上render_template<br>当请求处理完成返回一个模板以及变量<br>    return render_template(‘index.html’, message=’欢迎使用flask’, username=’yizeyuan’)<br>首页的html代码为：</p>
<pre><code>&lt;html&gt;
    &lt;head&gt;
      &lt;title&gt;index&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;h1 style=&quot;font-style:italic&quot;&gt;Home&lt;/h1&gt;
      {{message}}
      欢迎你，{{username}}
    &lt;/body&gt;
&lt;/html&gt;
</code></pre><p>很像angularjs有木有！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于用Python开发一个Web框架十分容易，所以Python有上百个开源的Web框架，当下流行的是Flask,Django等&lt;br&gt;Flask是一个使用 Python 编写的轻量级 Web 应用框架。其 WSGI 工具箱采用 Werkzeug ，模板引擎则使用 Jinja2 。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yzy755.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="python" scheme="http://yzy755.github.io/tags/python/"/>
    
      <category term="web开发" scheme="http://yzy755.github.io/tags/web%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
